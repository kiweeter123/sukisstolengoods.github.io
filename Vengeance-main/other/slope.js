var mg = document.createElement("iframe")
mg.setAttribute("id", "mgid")
mg.setAttribute("src", 'data:text/html;base64,PGhlYWQ+CiAgICA8c3R5bGU+Ci53ZWJnbC1jb250ZW50ICoge2JvcmRlcjogMDsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwfQoud2ViZ2wtY29udGVudCAubG9nbywgLnByb2dyZXNzIHtwb3NpdGlvbjogYWJzb2x1dGU7IGxlZnQ6IDUwJTsgdG9wOiA1MCU7IC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7IHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO30KLndlYmdsLWNvbnRlbnQgLmxvZ28ge2JhY2tncm91bmQ6IHVybCgncHJvZ3Jlc3NMb2dvLkxpZ2h0LnBuZycpIG5vLXJlcGVhdCBjZW50ZXIgLyBjb250YWluOyB3aWR0aDogMTU0cHg7IGhlaWdodDogMTMwcHg7fQoud2ViZ2wtY29udGVudCAucHJvZ3Jlc3Mge2hlaWdodDogMThweDsgd2lkdGg6IDE0MXB4OyBtYXJnaW4tdG9wOiA5MHB4O30KLndlYmdsLWNvbnRlbnQgLnByb2dyZXNzIC5lbXB0eSB7YmFja2dyb3VuZDogdXJsKCdwcm9ncmVzc0VtcHR5LkxpZ2h0LnBuZycpIG5vLXJlcGVhdCByaWdodCAvIGNvdmVyOyBmbG9hdDogcmlnaHQ7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGRpc3BsYXk6IGlubGluZS1ibG9jazt9Ci53ZWJnbC1jb250ZW50IC5wcm9ncmVzcyAuZnVsbCB7YmFja2dyb3VuZDogdXJsKCdwcm9ncmVzc0Z1bGwuTGlnaHQucG5nJykgbm8tcmVwZWF0IGxlZnQgLyBjb3ZlcjsgZmxvYXQ6IGxlZnQ7IHdpZHRoOiAwJTsgaGVpZ2h0OiAxMDAlOyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7fQoud2ViZ2wtY29udGVudCAubG9nby5EYXJrIHtiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9Ccm93bmNoYTAyMy9WZW5nZWFuY2UvbWFpbi9vdGhlci9zbG9wZS9wcm9ncmVzc0xvZ28uRGFyay5wbmcnKTt9Ci53ZWJnbC1jb250ZW50IC5wcm9ncmVzcy5EYXJrIC5lbXB0eSB7YmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQnJvd25jaGEwMjMvVmVuZ2VhbmNlL21haW4vb3RoZXIvc2xvcGUvcHJvZ3Jlc3NFbXB0eS5EYXJrLnBuZycpO30KLndlYmdsLWNvbnRlbnQgLnByb2dyZXNzLkRhcmsgLmZ1bGwge2JhY2tncm91bmQtaW1hZ2U6IHVybCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0Jyb3duY2hhMDIzL1ZlbmdlYW5jZS9tYWluL290aGVyL3Nsb3BlL3Byb2dyZXNzRnVsbC5EYXJrLnBuZycpO30KLndlYmdsLWNvbnRlbnQgLmZvb3RlciB7bWFyZ2luLXRvcDogNXB4OyBoZWlnaHQ6IDM4cHg7IGxpbmUtaGVpZ2h0OiAzOHB4OyBmb250LWZhbWlseTogSGVsdmV0aWNhLCBWZXJkYW5hLCBBcmlhbCwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAxOHB4O30gCi53ZWJnbC1jb250ZW50IC5mb290ZXIgLndlYmdsLWxvZ28sIC50aXRsZSwgLmZ1bGxzY3JlZW4ge2hlaWdodDogMTAwJTsgZGlzcGxheTogaW5saW5lLWJsb2NrOyBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCBjZW50ZXIgbm8tcmVwZWF0O30gCi53ZWJnbC1jb250ZW50IC5mb290ZXIgLndlYmdsLWxvZ28ge2JhY2tncm91bmQtaW1hZ2U6IHVybCgnd2ViZ2wtbG9nby5wbmcnKTsgd2lkdGg6IDIwNHB4OyBmbG9hdDogbGVmdDt9Ci53ZWJnbC1jb250ZW50IC5mb290ZXIgLnRpdGxlIHttYXJnaW4tcmlnaHQ6IDEwcHg7IGZsb2F0OiByaWdodDt9Ci53ZWJnbC1jb250ZW50IC5mb290ZXIgLmZ1bGxzY3JlZW4ge2JhY2tncm91bmQtaW1hZ2U6IHVybCgnZnVsbHNjcmVlbi5wbmcnKTsgd2lkdGg6IDM4cHg7IGZsb2F0OiByaWdodDt9CiAgICA8L3N0eWxlPgogICAgPHNjcmlwdD4KZnVuY3Rpb24gVW5pdHlQcm9ncmVzcyhnYW1lSW5zdGFuY2UsIHByb2dyZXNzKSB7CiAgaWYgKCFnYW1lSW5zdGFuY2UuTW9kdWxlKQogICAgcmV0dXJuOwogIGlmICghZ2FtZUluc3RhbmNlLmxvZ28pIHsKICAgIGdhbWVJbnN0YW5jZS5sb2dvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICBnYW1lSW5zdGFuY2UubG9nby5jbGFzc05hbWUgPSAibG9nbyAiICsgZ2FtZUluc3RhbmNlLk1vZHVsZS5zcGxhc2hTY3JlZW5TdHlsZTsKICAgIGdhbWVJbnN0YW5jZS5jb250YWluZXIuYXBwZW5kQ2hpbGQoZ2FtZUluc3RhbmNlLmxvZ28pOwogIH0KICBpZiAoIWdhbWVJbnN0YW5jZS5wcm9ncmVzcykgewogICAgZ2FtZUluc3RhbmNlLnByb2dyZXNzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICBnYW1lSW5zdGFuY2UucHJvZ3Jlc3MuY2xhc3NOYW1lID0gInByb2dyZXNzICIgKyBnYW1lSW5zdGFuY2UuTW9kdWxlLnNwbGFzaFNjcmVlblN0eWxlOwogICAgZ2FtZUluc3RhbmNlLnByb2dyZXNzLmVtcHR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICBnYW1lSW5zdGFuY2UucHJvZ3Jlc3MuZW1wdHkuY2xhc3NOYW1lID0gImVtcHR5IjsKICAgIGdhbWVJbnN0YW5jZS5wcm9ncmVzcy5hcHBlbmRDaGlsZChnYW1lSW5zdGFuY2UucHJvZ3Jlc3MuZW1wdHkpOwogICAgZ2FtZUluc3RhbmNlLnByb2dyZXNzLmZ1bGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIGdhbWVJbnN0YW5jZS5wcm9ncmVzcy5mdWxsLmNsYXNzTmFtZSA9ICJmdWxsIjsKICAgIGdhbWVJbnN0YW5jZS5wcm9ncmVzcy5hcHBlbmRDaGlsZChnYW1lSW5zdGFuY2UucHJvZ3Jlc3MuZnVsbCk7CiAgICBnYW1lSW5zdGFuY2UuY29udGFpbmVyLmFwcGVuZENoaWxkKGdhbWVJbnN0YW5jZS5wcm9ncmVzcyk7CiAgfQogIGdhbWVJbnN0YW5jZS5wcm9ncmVzcy5mdWxsLnN0eWxlLndpZHRoID0gKDEwMCAqIHByb2dyZXNzKSArICIlIjsKICBnYW1lSW5zdGFuY2UucHJvZ3Jlc3MuZW1wdHkuc3R5bGUud2lkdGggPSAoMTAwICogKDEgLSBwcm9ncmVzcykpICsgIiUiOwogIGlmIChwcm9ncmVzcyA9PSAxKQogICAgZ2FtZUluc3RhbmNlLmxvZ28uc3R5bGUuZGlzcGxheSA9IGdhbWVJbnN0YW5jZS5wcm9ncmVzcy5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwp9CiAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQ+CnZhciBVbml0eUxvYWRlciA9IFVuaXR5TG9hZGVyIHx8IHsKICAgIGNvbXBhdGliaWxpdHlDaGVjazogZnVuY3Rpb24oZSwgdCwgcikgeyBVbml0eUxvYWRlci5TeXN0ZW1JbmZvLmhhc1dlYkdMID8gVW5pdHlMb2FkZXIuU3lzdGVtSW5mby5tb2JpbGUgPyBlLnBvcHVwKCJQbGVhc2Ugbm90ZSB0aGF0IFVuaXR5IFdlYkdMIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIG9uIG1vYmlsZXMuIFByZXNzIE9LIGlmIHlvdSB3aXNoIHRvIGNvbnRpbnVlIGFueXdheS4iLCBbeyB0ZXh0OiAiT0siLCBjYWxsYmFjazogdCB9XSkgOiBbIkZpcmVmb3giLCAiQ2hyb21lIiwgIlNhZmFyaSJdLmluZGV4T2YoVW5pdHlMb2FkZXIuU3lzdGVtSW5mby5icm93c2VyKSA9PSAtMSA/IGUucG9wdXAoIlBsZWFzZSBub3RlIHRoYXQgeW91ciBicm93c2VyIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGZvciB0aGlzIFVuaXR5IFdlYkdMIGNvbnRlbnQuIFByZXNzIE9LIGlmIHlvdSB3aXNoIHRvIGNvbnRpbnVlIGFueXdheS4iLCBbeyB0ZXh0OiAiT0siLCBjYWxsYmFjazogdCB9XSkgOiB0KCkgOiBlLnBvcHVwKCJZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBXZWJHTCIsIFt7IHRleHQ6ICJPSyIsIGNhbGxiYWNrOiByIH1dKSB9LAogICAgQmxvYnM6IHt9LAogICAgbG9hZENvZGU6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgdmFyIG4gPSBbXS5zbGljZS5jYWxsKFVuaXR5TG9hZGVyLkNyeXB0b2dyYXBoeS5tZDUoZSkpLm1hcChmdW5jdGlvbihlKSB7IHJldHVybiAoIjAiICsgZS50b1N0cmluZygxNikpLnN1YnN0cigtMikgfSkuam9pbigiIiksCiAgICAgICAgICAgIG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKSwKICAgICAgICAgICAgYSA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoWydVbml0eUxvYWRlclsiJyArIG4gKyAnIl09JywgZV0sIHsgdHlwZTogInRleHQvamF2YXNjcmlwdCIgfSkpOwogICAgICAgIFVuaXR5TG9hZGVyLkJsb2JzW2FdID0gciwgby5zcmMgPSBhLCBvLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyBVUkwucmV2b2tlT2JqZWN0VVJMKGEpLCB0KG4pIH0sIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobykgfSwKICAgIGFsbG9jYXRlSGVhcEpvYjogZnVuY3Rpb24oZSwgdCkgeyBmb3IgKHZhciByID0gZS5UT1RBTF9TVEFDSyB8fCA1MjQyODgwLCBuID0gZS5UT1RBTF9NRU1PUlkgfHwgKGUuYnVmZmVyID8gZS5idWZmZXIuYnl0ZUxlbmd0aCA6IDI2ODQzNTQ1NiksIG8gPSA2NTUzNiwgYSA9IDE2Nzc3MjE2LCBpID0gbzsgaSA8IG4gfHwgaSA8IDIgKiByOykgaSArPSBpIDwgYSA/IGkgOiBhOwogICAgICAgIGkgIT0gbiAmJiBlLnByaW50RXJyKCJpbmNyZWFzaW5nIFRPVEFMX01FTU9SWSB0byAiICsgaSArICIgdG8gYmUgY29tcGxpYW50IHdpdGggdGhlIGFzbS5qcyBzcGVjIChhbmQgZ2l2ZW4gdGhhdCBUT1RBTF9TVEFDSz0iICsgciArICIpIiksIG4gPSBpLCB0LnBhcmFtZXRlcnMudXNlV2FzbSA/IChlLndhc21NZW1vcnkgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHsgaW5pdGlhbDogbiAvIG8sIG1heGltdW06IG4gLyBvIH0pLCBlLmJ1ZmZlciA9IGUud2FzbU1lbW9yeS5idWZmZXIpIDogZS5idWZmZXIgPyBlLmJ1ZmZlci5ieXRlTGVuZ3RoICE9IG4gJiYgKGUucHJpbnRFcnIoInByb3ZpZGVkIGJ1ZmZlciBzaG91bGQgYmUgIiArIG4gKyAiIGJ5dGVzLCBidXQgaXQgaXMgIiArIGUuYnVmZmVyLmJ5dGVMZW5ndGggKyAiLCByZWFsbG9jYXRpbmcgdGhlIGJ1ZmZlciIpLCBlLmJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihuKSkgOiBlLmJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihuKSwgZS5UT1RBTF9NRU1PUlkgPSBlLmJ1ZmZlci5ieXRlTGVuZ3RoLCB0LmNvbXBsZXRlKCkgfSwKICAgIHNldHVwSW5kZXhlZERCSm9iOiBmdW5jdGlvbihlLCB0KSB7CiAgICAgICAgZnVuY3Rpb24gcihuKSB7IHIuY2FsbGVkIHx8IChyLmNhbGxlZCA9ICEwLCBlLmluZGV4ZWREQiA9IG4sIHQuY29tcGxldGUoKSkgfSB0cnkgeyB2YXIgbiA9IHdpbmRvdy5pbmRleGVkREIgfHwgd2luZG93Lm1vekluZGV4ZWREQiB8fCB3aW5kb3cud2Via2l0SW5kZXhlZERCIHx8IHdpbmRvdy5tc0luZGV4ZWREQiwKICAgICAgICAgICAgICAgIG8gPSBuLm9wZW4oIi9pZGJmcy10ZXN0Iik7CiAgICAgICAgICAgIG8ub25lcnJvciA9IGZ1bmN0aW9uKGUpIHsgZS5wcmV2ZW50RGVmYXVsdCgpLCByKCkgfSwgby5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHsgby5yZXN1bHQuY2xvc2UoKSwgcihuKSB9LCBzZXRUaW1lb3V0KHIsIDFlMykgfSBjYXRjaCAoZSkgeyByKCkgfSB9LAogICAgcHJvY2Vzc1dhc21Db2RlSm9iOiBmdW5jdGlvbihlLCB0KSB7IGUud2FzbUJpbmFyeSA9IFVuaXR5TG9hZGVyLkpvYi5yZXN1bHQoZSwgImRvd25sb2FkV2FzbUNvZGUiKSwgdC5jb21wbGV0ZSgpIH0sCiAgICBwcm9jZXNzV2FzbUZyYW1ld29ya0pvYjogZnVuY3Rpb24oZSwgdCkgeyBVbml0eUxvYWRlci5sb2FkQ29kZShVbml0eUxvYWRlci5Kb2IucmVzdWx0KGUsICJkb3dubG9hZFdhc21GcmFtZXdvcmsiKSwgZnVuY3Rpb24ocikgeyBVbml0eUxvYWRlcltyXShlKSwgdC5jb21wbGV0ZSgpIH0sIHsgTW9kdWxlOiBlLCB1cmw6IGUud2FzbUZyYW1ld29ya1VybCB9KSB9LAogICAgcHJvY2Vzc0FzbUNvZGVKb2I6IGZ1bmN0aW9uKGUsIHQpIHsgdmFyIHIgPSBVbml0eUxvYWRlci5Kb2IucmVzdWx0KGUsICJkb3dubG9hZEFzbUNvZGUiKTsKICAgICAgICBVbml0eUxvYWRlci5sb2FkQ29kZShNYXRoLmZyb3VuZCA/IHIgOiBVbml0eUxvYWRlci5VdGlscy5vcHRpbWl6ZU1hdGhGcm91bmQociksIGZ1bmN0aW9uKHIpIHsgZS5hc20gPSBVbml0eUxvYWRlcltyXSwgdC5jb21wbGV0ZSgpIH0sIHsgTW9kdWxlOiBlLCB1cmw6IGUuYXNtQ29kZVVybCB9KSB9LAogICAgcHJvY2Vzc0FzbUZyYW1ld29ya0pvYjogZnVuY3Rpb24oZSwgdCkgeyBVbml0eUxvYWRlci5sb2FkQ29kZShVbml0eUxvYWRlci5Kb2IucmVzdWx0KGUsICJkb3dubG9hZEFzbUZyYW1ld29yayIpLCBmdW5jdGlvbihyKSB7IFVuaXR5TG9hZGVyW3JdKGUpLCB0LmNvbXBsZXRlKCkgfSwgeyBNb2R1bGU6IGUsIHVybDogZS5hc21GcmFtZXdvcmtVcmwgfSkgfSwKICAgIHByb2Nlc3NBc21NZW1vcnlKb2I6IGZ1bmN0aW9uKGUsIHQpIHsgZS5tZW1vcnlJbml0aWFsaXplclJlcXVlc3Quc3RhdHVzID0gMjAwLCBlLm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdC5yZXNwb25zZSA9IFVuaXR5TG9hZGVyLkpvYi5yZXN1bHQoZSwgImRvd25sb2FkQXNtTWVtb3J5IiksIGUubWVtb3J5SW5pdGlhbGl6ZXJSZXF1ZXN0LmNhbGxiYWNrICYmIGUubWVtb3J5SW5pdGlhbGl6ZXJSZXF1ZXN0LmNhbGxiYWNrKCksIHQuY29tcGxldGUoKSB9LAogICAgcHJvY2Vzc0RhdGFKb2I6IGZ1bmN0aW9uKGUsIHQpIHsgdmFyIHIgPSBVbml0eUxvYWRlci5Kb2IucmVzdWx0KGUsICJkb3dubG9hZERhdGEiKSwKICAgICAgICAgICAgbiA9IG5ldyBEYXRhVmlldyhyLmJ1ZmZlciwgci5ieXRlT2Zmc2V0LCByLmJ5dGVMZW5ndGgpLAogICAgICAgICAgICBvID0gMCwKICAgICAgICAgICAgYSA9ICJVbml0eVdlYkRhdGExLjBcMCI7IGlmICghU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCByLnN1YmFycmF5KG8sIG8gKyBhLmxlbmd0aCkpID09IGEpIHRocm93ICJ1bmtub3duIGRhdGEgZm9ybWF0IjsKICAgICAgICBvICs9IGEubGVuZ3RoOyB2YXIgaSA9IG4uZ2V0VWludDMyKG8sICEwKTsgZm9yIChvICs9IDQ7IG8gPCBpOykgeyB2YXIgcyA9IG4uZ2V0VWludDMyKG8sICEwKTsKICAgICAgICAgICAgbyArPSA0OyB2YXIgZCA9IG4uZ2V0VWludDMyKG8sICEwKTsKICAgICAgICAgICAgbyArPSA0OyB2YXIgbCA9IG4uZ2V0VWludDMyKG8sICEwKTsKICAgICAgICAgICAgbyArPSA0OyB2YXIgdSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgci5zdWJhcnJheShvLCBvICsgbCkpOwogICAgICAgICAgICBvICs9IGw7IGZvciAodmFyIGYgPSAwLCBjID0gdS5pbmRleE9mKCIvIiwgZikgKyAxOyBjID4gMDsgZiA9IGMsIGMgPSB1LmluZGV4T2YoIi8iLCBmKSArIDEpIGUuRlNfY3JlYXRlUGF0aCh1LnN1YnN0cmluZygwLCBmKSwgdS5zdWJzdHJpbmcoZiwgYyAtIDEpLCAhMCwgITApOwogICAgICAgICAgICBlLkZTX2NyZWF0ZURhdGFGaWxlKHUsIG51bGwsIHIuc3ViYXJyYXkocywgcyArIGQpLCAhMCwgITAsICEwKSB9IGUucmVtb3ZlUnVuRGVwZW5kZW5jeSgicHJvY2Vzc0RhdGFKb2IiKSwgdC5jb21wbGV0ZSgpIH0sCiAgICBkb3dubG9hZEpvYjogZnVuY3Rpb24oZSwgdCkgeyB2YXIgciA9IHQucGFyYW1ldGVycy5vYmpQYXJhbWV0ZXJzID8gbmV3IFVuaXR5TG9hZGVyLlhNTEh0dHBSZXF1ZXN0KHQucGFyYW1ldGVycy5vYmpQYXJhbWV0ZXJzKSA6IG5ldyBYTUxIdHRwUmVxdWVzdDsKICAgICAgICByLm9wZW4oIkdFVCIsIHQucGFyYW1ldGVycy51cmwpLCByLnJlc3BvbnNlVHlwZSA9ICJhcnJheWJ1ZmZlciIsIHIub25sb2FkID0gZnVuY3Rpb24oKSB7IFVuaXR5TG9hZGVyLkNvbXByZXNzaW9uLmRlY29tcHJlc3MobmV3IFVpbnQ4QXJyYXkoci5yZXNwb25zZSksIGZ1bmN0aW9uKGUpIHsgdC5jb21wbGV0ZShlKSB9KSB9LCB0LnBhcmFtZXRlcnMub25wcm9ncmVzcyAmJiByLmFkZEV2ZW50TGlzdGVuZXIoInByb2dyZXNzIiwgdC5wYXJhbWV0ZXJzLm9ucHJvZ3Jlc3MpLCB0LnBhcmFtZXRlcnMub25sb2FkICYmIHIuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsIHQucGFyYW1ldGVycy5vbmxvYWQpLCByLnNlbmQoKSB9LAogICAgc2NoZWR1bGVCdWlsZERvd25sb2FkSm9iOiBmdW5jdGlvbihlLCB0LCByKSB7IFVuaXR5TG9hZGVyLlByb2dyZXNzLnVwZGF0ZShlLCB0KSwgVW5pdHlMb2FkZXIuSm9iLnNjaGVkdWxlKGUsIHQsIFtdLCBVbml0eUxvYWRlci5kb3dubG9hZEpvYiwgeyB1cmw6IGUucmVzb2x2ZUJ1aWxkVXJsKGVbcl0pLCBvbnByb2dyZXNzOiBmdW5jdGlvbihyKSB7IFVuaXR5TG9hZGVyLlByb2dyZXNzLnVwZGF0ZShlLCB0LCByKSB9LCBvbmxvYWQ6IGZ1bmN0aW9uKHIpIHsgVW5pdHlMb2FkZXIuUHJvZ3Jlc3MudXBkYXRlKGUsIHQsIHIpIH0sIG9ialBhcmFtZXRlcnM6IGUuY29tcGFueU5hbWUgJiYgZS5wcm9kdWN0TmFtZSAmJiBlLmNhY2hlQ29udHJvbCAmJiBlLmNhY2hlQ29udHJvbFtyXSA/IHsgY29tcGFueU5hbWU6IGUuY29tcGFueU5hbWUsIHByb2R1Y3ROYW1lOiBlLnByb2R1Y3ROYW1lLCBjYWNoZUNvbnRyb2w6IGUuY2FjaGVDb250cm9sW3JdIH0gOiBudWxsIH0pIH0sCiAgICBsb2FkTW9kdWxlOiBmdW5jdGlvbihlKSB7IGlmIChlLnVzZVdhc20gPSBlLndhc21Db2RlVXJsICYmIFVuaXR5TG9hZGVyLlN5c3RlbUluZm8uaGFzV2FzbSwgZS51c2VXYXNtKSBVbml0eUxvYWRlci5zY2hlZHVsZUJ1aWxkRG93bmxvYWRKb2IoZSwgImRvd25sb2FkV2FzbUNvZGUiLCAid2FzbUNvZGVVcmwiKSwgVW5pdHlMb2FkZXIuSm9iLnNjaGVkdWxlKGUsICJwcm9jZXNzV2FzbUNvZGUiLCBbImRvd25sb2FkV2FzbUNvZGUiXSwgVW5pdHlMb2FkZXIucHJvY2Vzc1dhc21Db2RlSm9iKSwgVW5pdHlMb2FkZXIuc2NoZWR1bGVCdWlsZERvd25sb2FkSm9iKGUsICJkb3dubG9hZFdhc21GcmFtZXdvcmsiLCAid2FzbUZyYW1ld29ya1VybCIpLCBVbml0eUxvYWRlci5Kb2Iuc2NoZWR1bGUoZSwgInByb2Nlc3NXYXNtRnJhbWV3b3JrIiwgWyJkb3dubG9hZFdhc21GcmFtZXdvcmsiLCAicHJvY2Vzc1dhc21Db2RlIiwgInNldHVwSW5kZXhlZERCIl0sIFVuaXR5TG9hZGVyLnByb2Nlc3NXYXNtRnJhbWV3b3JrSm9iKTsKICAgICAgICBlbHNlIHsgaWYgKCFlLmFzbUNvZGVVcmwpIHRocm93ICJXZWJBc3NlbWJseSBzdXBwb3J0IGlzIG5vdCBkZXRlY3RlZCBpbiB0aGlzIGJyb3dzZXIuIjsKICAgICAgICAgICAgVW5pdHlMb2FkZXIuc2NoZWR1bGVCdWlsZERvd25sb2FkSm9iKGUsICJkb3dubG9hZEFzbUNvZGUiLCAiYXNtQ29kZVVybCIpLCBVbml0eUxvYWRlci5Kb2Iuc2NoZWR1bGUoZSwgInByb2Nlc3NBc21Db2RlIiwgWyJkb3dubG9hZEFzbUNvZGUiXSwgVW5pdHlMb2FkZXIucHJvY2Vzc0FzbUNvZGVKb2IpLCBVbml0eUxvYWRlci5zY2hlZHVsZUJ1aWxkRG93bmxvYWRKb2IoZSwgImRvd25sb2FkQXNtTWVtb3J5IiwgImFzbU1lbW9yeVVybCIpLCBVbml0eUxvYWRlci5Kb2Iuc2NoZWR1bGUoZSwgInByb2Nlc3NBc21NZW1vcnkiLCBbImRvd25sb2FkQXNtTWVtb3J5Il0sIFVuaXR5TG9hZGVyLnByb2Nlc3NBc21NZW1vcnlKb2IpLCBlLm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdCA9IHsgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24odCwgcikgeyBlLm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdC5jYWxsYmFjayA9IHIgfSB9LCBlLmFzbUxpYnJhcnlVcmwgJiYgKGUuZHluYW1pY0xpYnJhcmllcyA9IFtlLmFzbUxpYnJhcnlVcmxdLm1hcChlLnJlc29sdmVCdWlsZFVybCkpLCBVbml0eUxvYWRlci5zY2hlZHVsZUJ1aWxkRG93bmxvYWRKb2IoZSwgImRvd25sb2FkQXNtRnJhbWV3b3JrIiwgImFzbUZyYW1ld29ya1VybCIpLCBVbml0eUxvYWRlci5Kb2Iuc2NoZWR1bGUoZSwgInByb2Nlc3NBc21GcmFtZXdvcmsiLCBbImRvd25sb2FkQXNtRnJhbWV3b3JrIiwgInByb2Nlc3NBc21Db2RlIiwgInNldHVwSW5kZXhlZERCIl0sIFVuaXR5TG9hZGVyLnByb2Nlc3NBc21GcmFtZXdvcmtKb2IpIH0gVW5pdHlMb2FkZXIuc2NoZWR1bGVCdWlsZERvd25sb2FkSm9iKGUsICJkb3dubG9hZERhdGEiLCAiZGF0YVVybCIpLCBVbml0eUxvYWRlci5Kb2Iuc2NoZWR1bGUoZSwgInNldHVwSW5kZXhlZERCIiwgW10sIFVuaXR5TG9hZGVyLnNldHVwSW5kZXhlZERCSm9iKSwgZS5wcmVSdW4ucHVzaChmdW5jdGlvbigpIHsgZS5hZGRSdW5EZXBlbmRlbmN5KCJwcm9jZXNzRGF0YUpvYiIpLCBVbml0eUxvYWRlci5Kb2Iuc2NoZWR1bGUoZSwgInByb2Nlc3NEYXRhIiwgWyJkb3dubG9hZERhdGEiXSwgVW5pdHlMb2FkZXIucHJvY2Vzc0RhdGFKb2IpIH0pIH0sCiAgICBpbnN0YW50aWF0ZTogZnVuY3Rpb24oZSwgdCwgcikgewogICAgICAgIGZ1bmN0aW9uIG4oZSwgcikgeyBpZiAoInN0cmluZyIgPT0gdHlwZW9mIGUgJiYgIShlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZSkpKSByZXR1cm4gITE7CiAgICAgICAgICAgIGUuaW5uZXJIVE1MID0gIiIsIGUuc3R5bGUuYm9yZGVyID0gZS5zdHlsZS5tYXJnaW4gPSBlLnN0eWxlLnBhZGRpbmcgPSAwLCAic3RhdGljIiA9PSBnZXRDb21wdXRlZFN0eWxlKGUpLmdldFByb3BlcnR5VmFsdWUoInBvc2l0aW9uIikgJiYgKGUuc3R5bGUucG9zaXRpb24gPSAicmVsYXRpdmUiKSwgZS5zdHlsZS53aWR0aCA9IHIud2lkdGggfHwgZS5zdHlsZS53aWR0aCwgZS5zdHlsZS5oZWlnaHQgPSByLmhlaWdodCB8fCBlLnN0eWxlLmhlaWdodCwgci5jb250YWluZXIgPSBlOyB2YXIgbiA9IHIuTW9kdWxlOyByZXR1cm4gbi5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKSwgbi5jYW52YXMuc3R5bGUud2lkdGggPSAiMTAwJSIsIG4uY2FudmFzLnN0eWxlLmhlaWdodCA9ICIxMDAlIiwgbi5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigiY29udGV4dG1lbnUiLCBmdW5jdGlvbihlKSB7IGUucHJldmVudERlZmF1bHQoKSB9KSwgbi5jYW52YXMuaWQgPSAiI2NhbnZhcyIsIGUuYXBwZW5kQ2hpbGQobi5jYW52YXMpLCByLmNvbXBhdGliaWxpdHlDaGVjayhyLCBmdW5jdGlvbigpIHsgdmFyIHQgPSBuZXcgWE1MSHR0cFJlcXVlc3Q7CiAgICAgICAgICAgICAgICB0Lm9wZW4oIkdFVCIsIHIudXJsLCAhMCksIHQucmVzcG9uc2VUeXBlID0gInRleHQiLCB0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHsgbi5wcmludCgiQ291bGQgbm90IGRvd25sb2FkICIgKyByLnVybCksIDAgPT0gZG9jdW1lbnQuVVJMLmluZGV4T2YoImZpbGU6IikgJiYgYWxlcnQoIkl0IHNlZW1zIHlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHJ1bm5pbmcgVW5pdHkgV2ViR0wgY29udGVudCBmcm9tIGZpbGU6Ly8gdXJscy4gUGxlYXNlIHVwbG9hZCBpdCB0byBhbiBodHRwIHNlcnZlciwgb3IgdHJ5IGEgZGlmZmVyZW50IGJyb3dzZXIuIikgfSwgdC5vbmxvYWQgPSBmdW5jdGlvbigpIHsgdmFyIG8gPSBKU09OLnBhcnNlKHQucmVzcG9uc2VUZXh0KTsgZm9yICh2YXIgYSBpbiBvKSAidW5kZWZpbmVkIiA9PSB0eXBlb2YgblthXSAmJiAoblthXSA9IG9bYV0pOyBmb3IgKHZhciBpID0gITEsIHMgPSAwOyBzIDwgbi5ncmFwaGljc0FQSS5sZW5ndGg7IHMrKykgeyB2YXIgZCA9IG4uZ3JhcGhpY3NBUElbc107ICJXZWJHTCAyLjAiID09IGQgJiYgMiA9PSBVbml0eUxvYWRlci5TeXN0ZW1JbmZvLmhhc1dlYkdMID8gaSA9ICEwIDogIldlYkdMIDEuMCIgPT0gZCAmJiBVbml0eUxvYWRlci5TeXN0ZW1JbmZvLmhhc1dlYkdMID49IDEgPyBpID0gITAgOiBuLnByaW50KCJXYXJuaW5nOiBVbnN1cHBvcnRlZCBncmFwaGljcyBBUEkgIiArIGQpIH0gcmV0dXJuIGkgPyAoZS5zdHlsZS5iYWNrZ3JvdW5kID0gbi5iYWNrZ3JvdW5kVXJsID8gImNlbnRlci9jb3ZlciB1cmwoJyIgKyBuLnJlc29sdmVCdWlsZFVybChuLmJhY2tncm91bmRVcmwpICsgIicpIiA6IG4uYmFja2dyb3VuZENvbG9yID8gIiAiICsgbi5iYWNrZ3JvdW5kQ29sb3IgOiAiIiwgci5vblByb2dyZXNzKHIsIDApLCB2b2lkIFVuaXR5TG9hZGVyLmxvYWRNb2R1bGUobikpIDogdm9pZCByLnBvcHVwKCJZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBhbnkgb2YgdGhlIHJlcXVpcmVkIGdyYXBoaWNzIEFQSSBmb3IgdGhpcyBjb250ZW50OiAiICsgbi5ncmFwaGljc0FQSSwgW3sgdGV4dDogIk9LIiB9XSkgfSwgdC5zZW5kKCkgfSwgZnVuY3Rpb24oKSB7IG4ucHJpbnQoIkluc3RhbnRpYXRpb24gb2YgdGhlICciICsgdCArICInIHRlcm1pbmF0ZWQgZHVlIHRvIHRoZSBmYWlsZWQgY29tcGF0aWJpbGl0eSBjaGVjay4iKSB9KSwgITAgfSB2YXIgbyA9IHsgdXJsOiB0LCBvblByb2dyZXNzOiBVbml0eUxvYWRlci5Qcm9ncmVzcy5oYW5kbGVyLCBjb21wYXRpYmlsaXR5Q2hlY2s6IFVuaXR5TG9hZGVyLmNvbXBhdGliaWxpdHlDaGVjaywgTW9kdWxlOiB7IHByZVJ1bjogW10sIHBvc3RSdW46IFtdLCBwcmludDogZnVuY3Rpb24oZSkgeyBjb25zb2xlLmxvZyhlKSB9LCBwcmludEVycjogZnVuY3Rpb24oZSkgeyBjb25zb2xlLmVycm9yKGUpIH0sIEpvYnM6IHt9LCBidWlsZERvd25sb2FkUHJvZ3Jlc3M6IHt9LCByZXNvbHZlQnVpbGRVcmw6IGZ1bmN0aW9uKGUpIHsgcmV0dXJuIGUubWF0Y2goLyhodHRwfGh0dHBzfGZ0cHxmaWxlKTpcL1wvLykgPyBlIDogdC5zdWJzdHJpbmcoMCwgdC5sYXN0SW5kZXhPZigiLyIpICsgMSkgKyBlIH0gfSwgU2V0RnVsbHNjcmVlbjogZnVuY3Rpb24oKSB7IGlmIChvLk1vZHVsZS5TZXRGdWxsc2NyZWVuKSByZXR1cm4gby5Nb2R1bGUuU2V0RnVsbHNjcmVlbi5hcHBseShvLk1vZHVsZSwgYXJndW1lbnRzKSB9LCBTZW5kTWVzc2FnZTogZnVuY3Rpb24oKSB7IGlmIChvLk1vZHVsZS5TZW5kTWVzc2FnZSkgcmV0dXJuIG8uTW9kdWxlLlNlbmRNZXNzYWdlLmFwcGx5KG8uTW9kdWxlLCBhcmd1bWVudHMpIH0gfTsKICAgICAgICBvLk1vZHVsZS5nYW1lSW5zdGFuY2UgPSBvLCBvLnBvcHVwID0gZnVuY3Rpb24oZSwgdCkgeyByZXR1cm4gVW5pdHlMb2FkZXIuRXJyb3IucG9wdXAobywgZSwgdCkgfSwgby5Nb2R1bGUucG9zdFJ1bi5wdXNoKGZ1bmN0aW9uKCkgeyBvLm9uUHJvZ3Jlc3MobywgMSkgfSk7IGZvciAodmFyIGEgaW4gcikKICAgICAgICAgICAgaWYgKCJNb2R1bGUiID09IGEpCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIHJbYV0pIG8uTW9kdWxlW2ldID0gclthXVtpXTsKICAgICAgICAgICAgZWxzZSBvW2FdID0gclthXTsgcmV0dXJuIG4oZSwgbykgfHwgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGZ1bmN0aW9uKCkgeyBuKGUsIG8pIH0pLCBvIH0sCiAgICBTeXN0ZW1JbmZvOiBmdW5jdGlvbigpIHsgdmFyIGUsIHQsIHIsIG4gPSAiLSIsCiAgICAgICAgICAgIG8gPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbiwKICAgICAgICAgICAgYSA9IG5hdmlnYXRvci51c2VyQWdlbnQsCiAgICAgICAgICAgIGkgPSBuYXZpZ2F0b3IuYXBwTmFtZSwKICAgICAgICAgICAgcyA9IG5hdmlnYXRvci5hcHBWZXJzaW9uLAogICAgICAgICAgICBkID0gcGFyc2VJbnQobmF2aWdhdG9yLmFwcFZlcnNpb24sIDEwKTsKICAgICAgICAodCA9IGEuaW5kZXhPZigiT3BlcmEiKSkgIT0gLTEgPyAoaSA9ICJPcGVyYSIsIHMgPSBhLnN1YnN0cmluZyh0ICsgNiksICh0ID0gYS5pbmRleE9mKCJWZXJzaW9uIikpICE9IC0xICYmIChzID0gYS5zdWJzdHJpbmcodCArIDgpKSkgOiAodCA9IGEuaW5kZXhPZigiTVNJRSIpKSAhPSAtMSA/IChpID0gIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlciIsIHMgPSBhLnN1YnN0cmluZyh0ICsgNSkpIDogKHQgPSBhLmluZGV4T2YoIkNocm9tZSIpKSAhPSAtMSA/IChpID0gIkNocm9tZSIsIHMgPSBhLnN1YnN0cmluZyh0ICsgNykpIDogKHQgPSBhLmluZGV4T2YoIlNhZmFyaSIpKSAhPSAtMSA/IChpID0gIlNhZmFyaSIsIHMgPSBhLnN1YnN0cmluZyh0ICsgNyksICh0ID0gYS5pbmRleE9mKCJWZXJzaW9uIikpICE9IC0xICYmIChzID0gYS5zdWJzdHJpbmcodCArIDgpKSkgOiAodCA9IGEuaW5kZXhPZigiRmlyZWZveCIpKSAhPSAtMSA/IChpID0gIkZpcmVmb3giLCBzID0gYS5zdWJzdHJpbmcodCArIDgpKSA6IGEuaW5kZXhPZigiVHJpZGVudC8iKSAhPSAtMSA/IChpID0gIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlciIsIHMgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoInJ2OiIpICsgMykpIDogKGUgPSBhLmxhc3RJbmRleE9mKCIgIikgKyAxKSA8ICh0ID0gYS5sYXN0SW5kZXhPZigiLyIpKSAmJiAoaSA9IGEuc3Vic3RyaW5nKGUsIHQpLCBzID0gYS5zdWJzdHJpbmcodCArIDEpLCBpLnRvTG93ZXJDYXNlKCkgPT0gaS50b1VwcGVyQ2FzZSgpICYmIChpID0gbmF2aWdhdG9yLmFwcE5hbWUpKSwgKHIgPSBzLmluZGV4T2YoIjsiKSkgIT0gLTEgJiYgKHMgPSBzLnN1YnN0cmluZygwLCByKSksIChyID0gcy5pbmRleE9mKCIgIikpICE9IC0xICYmIChzID0gcy5zdWJzdHJpbmcoMCwgcikpLCAociA9IHMuaW5kZXhPZigiKSIpKSAhPSAtMSAmJiAocyA9IHMuc3Vic3RyaW5nKDAsIHIpKSwgZCA9IHBhcnNlSW50KCIiICsgcywgMTApLCBpc05hTihkKSA/IChzID0gIiIgKyBwYXJzZUZsb2F0KG5hdmlnYXRvci5hcHBWZXJzaW9uKSwgZCA9IHBhcnNlSW50KG5hdmlnYXRvci5hcHBWZXJzaW9uLCAxMCkpIDogcyA9ICIiICsgcGFyc2VGbG9hdChzKTsgdmFyIGwgPSAvTW9iaWxlfG1pbml8RmVubmVjfEFuZHJvaWR8aVAoYWR8b2R8aG9uZSkvLnRlc3QobyksCiAgICAgICAgICAgIHUgPSBuLAogICAgICAgICAgICBmID0gW3sgczogIldpbmRvd3MgMy4xMSIsIHI6IC9XaW4xNi8gfSwgeyBzOiAiV2luZG93cyA5NSIsIHI6IC8oV2luZG93cyA5NXxXaW45NXxXaW5kb3dzXzk1KS8gfSwgeyBzOiAiV2luZG93cyBNRSIsIHI6IC8oV2luIDl4IDQuOTB8V2luZG93cyBNRSkvIH0sIHsgczogIldpbmRvd3MgOTgiLCByOiAvKFdpbmRvd3MgOTh8V2luOTgpLyB9LCB7IHM6ICJXaW5kb3dzIENFIiwgcjogL1dpbmRvd3MgQ0UvIH0sIHsgczogIldpbmRvd3MgMjAwMCIsIHI6IC8oV2luZG93cyBOVCA1LjB8V2luZG93cyAyMDAwKS8gfSwgeyBzOiAiV2luZG93cyBYUCIsIHI6IC8oV2luZG93cyBOVCA1LjF8V2luZG93cyBYUCkvIH0sIHsgczogIldpbmRvd3MgU2VydmVyIDIwMDMiLCByOiAvV2luZG93cyBOVCA1LjIvIH0sIHsgczogIldpbmRvd3MgVmlzdGEiLCByOiAvV2luZG93cyBOVCA2LjAvIH0sIHsgczogIldpbmRvd3MgNyIsIHI6IC8oV2luZG93cyA3fFdpbmRvd3MgTlQgNi4xKS8gfSwgeyBzOiAiV2luZG93cyA4LjEiLCByOiAvKFdpbmRvd3MgOC4xfFdpbmRvd3MgTlQgNi4zKS8gfSwgeyBzOiAiV2luZG93cyA4IiwgcjogLyhXaW5kb3dzIDh8V2luZG93cyBOVCA2LjIpLyB9LCB7IHM6ICJXaW5kb3dzIDEwIiwgcjogLyhXaW5kb3dzIDEwfFdpbmRvd3MgTlQgMTAuMCkvIH0sIHsgczogIldpbmRvd3MgTlQgNC4wIiwgcjogLyhXaW5kb3dzIE5UIDQuMHxXaW5OVDQuMHxXaW5OVHxXaW5kb3dzIE5UKS8gfSwgeyBzOiAiV2luZG93cyBNRSIsIHI6IC9XaW5kb3dzIE1FLyB9LCB7IHM6ICJBbmRyb2lkIiwgcjogL0FuZHJvaWQvIH0sIHsgczogIk9wZW4gQlNEIiwgcjogL09wZW5CU0QvIH0sIHsgczogIlN1biBPUyIsIHI6IC9TdW5PUy8gfSwgeyBzOiAiTGludXgiLCByOiAvKExpbnV4fFgxMSkvIH0sIHsgczogImlPUyIsIHI6IC8oaVBob25lfGlQYWR8aVBvZCkvIH0sIHsgczogIk1hYyBPUyBYIiwgcjogL01hYyBPUyBYLyB9LCB7IHM6ICJNYWMgT1MiLCByOiAvKE1hY1BQQ3xNYWNJbnRlbHxNYWNfUG93ZXJQQ3xNYWNpbnRvc2gpLyB9LCB7IHM6ICJRTlgiLCByOiAvUU5YLyB9LCB7IHM6ICJVTklYIiwgcjogL1VOSVgvIH0sIHsgczogIkJlT1MiLCByOiAvQmVPUy8gfSwgeyBzOiAiT1MvMiIsIHI6IC9PU1wvMi8gfSwgeyBzOiAiU2VhcmNoIEJvdCIsIHI6IC8obnVoa3xHb29nbGVib3R8WWFtbXlib3R8T3BlbmJvdHxTbHVycHxNU05Cb3R8QXNrIEplZXZlc1wvVGVvbWF8aWFfYXJjaGl2ZXIpLyB9XTsgZm9yICh2YXIgYyBpbiBmKSB7IHZhciBoID0gZltjXTsgaWYgKGguci50ZXN0KGEpKSB7IHUgPSBoLnM7IGJyZWFrIH0gfSB2YXIgcCA9IG47IHN3aXRjaCAoL1dpbmRvd3MvLnRlc3QodSkgJiYgKHAgPSAvV2luZG93cyAoLiopLy5leGVjKHUpWzFdLCB1ID0gIldpbmRvd3MiKSwgdSkgewogICAgICAgICAgICBjYXNlICJNYWMgT1MgWCI6CiAgICAgICAgICAgICAgICBwID0gL01hYyBPUyBYICgxMFtcLlxfXGRdKykvLmV4ZWMoYSlbMV07IGJyZWFrOwogICAgICAgICAgICBjYXNlICJBbmRyb2lkIjoKICAgICAgICAgICAgICAgIHAgPSAvQW5kcm9pZCAoW1wuXF9cZF0rKS8uZXhlYyhhKVsxXTsgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgImlPUyI6CiAgICAgICAgICAgICAgICBwID0gL09TIChcZCspXyhcZCspXz8oXGQrKT8vLmV4ZWMobyksIHAgPSBwWzFdICsgIi4iICsgcFsyXSArICIuIiArICgwIHwgcFszXSkgfSByZXR1cm4geyB3aWR0aDogc2NyZWVuLndpZHRoID8gc2NyZWVuLndpZHRoIDogMCwgaGVpZ2h0OiBzY3JlZW4uaGVpZ2h0ID8gc2NyZWVuLmhlaWdodCA6IDAsIGJyb3dzZXI6IGksIGJyb3dzZXJWZXJzaW9uOiBzLCBtb2JpbGU6IGwsIG9zOiB1LCBvc1ZlcnNpb246IHAsIGdwdTogZnVuY3Rpb24oKSB7IHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIiksCiAgICAgICAgICAgICAgICAgICAgdCA9IGUuZ2V0Q29udGV4dCgiZXhwZXJpbWVudGFsLXdlYmdsIik7IGlmICh0KSB7IHZhciByID0gdC5nZXRFeHRlbnNpb24oIldFQkdMX2RlYnVnX3JlbmRlcmVyX2luZm8iKTsgaWYgKHIpIHJldHVybiB0LmdldFBhcmFtZXRlcihyLlVOTUFTS0VEX1JFTkRFUkVSX1dFQkdMKSB9IHJldHVybiBuIH0oKSwgbGFuZ3VhZ2U6IHdpbmRvdy5uYXZpZ2F0b3IudXNlckxhbmd1YWdlIHx8IHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2UsIGhhc1dlYkdMOiBmdW5jdGlvbigpIHsgaWYgKCF3aW5kb3cuV2ViR0xSZW5kZXJpbmdDb250ZXh0KSByZXR1cm4gMDsgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKSwKICAgICAgICAgICAgICAgICAgICB0ID0gZS5nZXRDb250ZXh0KCJ3ZWJnbDIiKTsgcmV0dXJuIHQgPyAyIDogKHQgPSBlLmdldENvbnRleHQoImV4cGVyaW1lbnRhbC13ZWJnbDIiKSwgdCA/IDIgOiAodCA9IGUuZ2V0Q29udGV4dCgid2ViZ2wiKSwgdCB8fCAodCA9IGUuZ2V0Q29udGV4dCgiZXhwZXJpbWVudGFsLXdlYmdsIikpID8gMSA6IDApKSB9KCksIGhhc0N1cnNvckxvY2s6IGZ1bmN0aW9uKCkgeyB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOyByZXR1cm4gZS5yZXF1ZXN0UG9pbnRlckxvY2sgfHwgZS5tb3pSZXF1ZXN0UG9pbnRlckxvY2sgfHwgZS53ZWJraXRSZXF1ZXN0UG9pbnRlckxvY2sgfHwgZS5tc1JlcXVlc3RQb2ludGVyTG9jayA/IDEgOiAwIH0oKSwgaGFzRnVsbHNjcmVlbjogZnVuY3Rpb24oKSB7IHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7IHJldHVybiAoZS5yZXF1ZXN0RnVsbFNjcmVlbiB8fCBlLm1velJlcXVlc3RGdWxsU2NyZWVuIHx8IGUubXNSZXF1ZXN0RnVsbHNjcmVlbiB8fCBlLndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuKSAmJiAoaS5pbmRleE9mKCJTYWZhcmkiKSA9PSAtMSB8fCBzID49IDEwLjEpID8gMSA6IDAgfSgpLCBoYXNXYXNtOiAib2JqZWN0IiA9PSB0eXBlb2YgV2ViQXNzZW1ibHkgJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgV2ViQXNzZW1ibHkudmFsaWRhdGUgJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgV2ViQXNzZW1ibHkuY29tcGlsZSB9IH0oKSwKICAgIEVycm9yOiB7IGluaXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gNTAsIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJlcnJvciIsIGZ1bmN0aW9uKGUpIHsgdmFyIHQgPSBVbml0eUxvYWRlci5FcnJvci5nZXRNb2R1bGUoZSk7IGlmICghdCkgcmV0dXJuIFVuaXR5TG9hZGVyLkVycm9yLmhhbmRsZXIoZSk7IHZhciByID0gdC51c2VXYXNtID8gdC53YXNtU3ltYm9sc1VybCA6IHQuYXNtU3ltYm9sc1VybDsgaWYgKCFyKSByZXR1cm4gVW5pdHlMb2FkZXIuRXJyb3IuaGFuZGxlcihlLCB0KTsgdmFyIG4gPSBuZXcgWE1MSHR0cFJlcXVlc3Q7CiAgICAgICAgICAgICAgICBuLm9wZW4oIkdFVCIsIHQucmVzb2x2ZUJ1aWxkVXJsKHIpKSwgbi5yZXNwb25zZVR5cGUgPSAiYXJyYXlidWZmZXIiLCBuLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyBVbml0eUxvYWRlci5sb2FkQ29kZShVbml0eUxvYWRlci5Db21wcmVzc2lvbi5kZWNvbXByZXNzKG5ldyBVaW50OEFycmF5KG4ucmVzcG9uc2UpKSwgZnVuY3Rpb24ocikgeyB0LmRlbWFuZ2xlU3ltYm9sID0gVW5pdHlMb2FkZXJbcl0oKSwgVW5pdHlMb2FkZXIuRXJyb3IuaGFuZGxlcihlLCB0KSB9KSB9LCBuLnNlbmQoKSB9KSwgITAgfSgpLCBzdGFja1RyYWNlRm9ybWF0OiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoIkNocm9tZSIpICE9IC0xID8gIihcXHMrYXRcXHMrKSgoW1xcd1xcZF9cXC5dKj8pKFtcXHdcXGRfJF0rKSgvW1xcd1xcZF9cXC4vXSt8KSkoXFxzK1xcWy4qXFxdfClcXHMqXFwoKGJsb2I6LiopXFwpIiA6ICIoXFxzKikoKFtcXHdcXGRfXFwuXSo/KShbXFx3XFxkXyRdKykoL1tcXHdcXGRfXFwuL10rfCkpKFxccytcXFsuKlxcXXwpXFxzKkAoYmxvYjouKikiLCBzdGFja1RyYWNlRm9ybWF0V2FzbTogbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCJDaHJvbWUiKSAhPSAtMSA/ICIoKFxccythdFxccyopXFxzXFwoPFdBU00+XFxbKFxcZCspXFxdXFwrXFxkK1xcKSkoKSIgOiAiKChcXHMqKXdhc20tZnVuY3Rpb25cXFsoXFxkKylcXF0pQChibG9iOi4qKSIsIGJsb2JQYXJzZVJlZ0V4cDogbmV3IFJlZ0V4cCgiXihibG9iOi4qKSg6XFxkKzpcXGQrKSQiKSwgZ2V0TW9kdWxlOiBmdW5jdGlvbihlKSB7IHZhciB0ID0gZS5tZXNzYWdlLm1hdGNoKG5ldyBSZWdFeHAodGhpcy5zdGFja1RyYWNlRm9ybWF0LCAiZyIpKTsgZm9yICh2YXIgciBpbiB0KSB7IHZhciBuID0gdFtyXS5tYXRjaChuZXcgUmVnRXhwKCJeIiArIHRoaXMuc3RhY2tUcmFjZUZvcm1hdCArICIkIikpLAogICAgICAgICAgICAgICAgICAgIG8gPSBuWzddLm1hdGNoKHRoaXMuYmxvYlBhcnNlUmVnRXhwKTsgaWYgKG8gJiYgVW5pdHlMb2FkZXIuQmxvYnNbb1sxXV0gJiYgVW5pdHlMb2FkZXIuQmxvYnNbb1sxXV0uTW9kdWxlKSByZXR1cm4gVW5pdHlMb2FkZXIuQmxvYnNbb1sxXV0uTW9kdWxlIH0gfSwgZGVtYW5nbGU6IGZ1bmN0aW9uKGUsIHQpIHsgdmFyIHIgPSBlLm1lc3NhZ2U7IHJldHVybiB0ID8gKHIgPSByLnJlcGxhY2UobmV3IFJlZ0V4cCh0aGlzLnN0YWNrVHJhY2VGb3JtYXQsICJnIiksIGZ1bmN0aW9uKGUpIHsgdmFyIHIgPSBlLm1hdGNoKG5ldyBSZWdFeHAoIl4iICsgdGhpcy5zdGFja1RyYWNlRm9ybWF0ICsgIiQiKSksCiAgICAgICAgICAgICAgICAgICAgbiA9IHJbN10ubWF0Y2godGhpcy5ibG9iUGFyc2VSZWdFeHApLAogICAgICAgICAgICAgICAgICAgIG8gPSB0LmRlbWFuZ2xlU3ltYm9sID8gdC5kZW1hbmdsZVN5bWJvbChyWzRdKSA6IHJbNF0sCiAgICAgICAgICAgICAgICAgICAgYSA9IG4gJiYgVW5pdHlMb2FkZXIuQmxvYnNbblsxXV0gJiYgVW5pdHlMb2FkZXIuQmxvYnNbblsxXV0udXJsID8gVW5pdHlMb2FkZXIuQmxvYnNbblsxXV0udXJsIDogImJsb2IiOyByZXR1cm4gclsxXSArIG8gKyAoclsyXSAhPSBvID8gIiBbIiArIHJbMl0gKyAiXSIgOiAiIikgKyAiICgiICsgKG4gPyBhLnN1YnN0cihhLmxhc3RJbmRleE9mKCIvIikgKyAxKSArIG5bMl0gOiByWzddKSArICIpIiB9LmJpbmQodGhpcykpLCB0LnVzZVdhc20gJiYgKHIgPSByLnJlcGxhY2UobmV3IFJlZ0V4cCh0aGlzLnN0YWNrVHJhY2VGb3JtYXRXYXNtLCAiZyIpLCBmdW5jdGlvbihlKSB7IHZhciByID0gZS5tYXRjaChuZXcgUmVnRXhwKCJeIiArIHRoaXMuc3RhY2tUcmFjZUZvcm1hdFdhc20gKyAiJCIpKSwKICAgICAgICAgICAgICAgICAgICBuID0gdC5kZW1hbmdsZVN5bWJvbCA/IHQuZGVtYW5nbGVTeW1ib2woclszXSkgOiByWzNdLAogICAgICAgICAgICAgICAgICAgIG8gPSByWzRdLm1hdGNoKHRoaXMuYmxvYlBhcnNlUmVnRXhwKSwKICAgICAgICAgICAgICAgICAgICBhID0gbyAmJiBVbml0eUxvYWRlci5CbG9ic1tvWzFdXSAmJiBVbml0eUxvYWRlci5CbG9ic1tvWzFdXS51cmwgPyBVbml0eUxvYWRlci5CbG9ic1tvWzFdXS51cmwgOiAiYmxvYiI7IHJldHVybiAobiA9PSByWzNdID8gclsxXSA6IHJbMl0gKyBuICsgIiBbd2FzbToiICsgclszXSArICJdIikgKyAocls0XSA/ICIgKCIgKyAobyA/IGEuc3Vic3RyKGEubGFzdEluZGV4T2YoIi8iKSArIDEpICsgb1syXSA6IHJbNF0pICsgIikiIDogIiIpIH0uYmluZCh0aGlzKSkpLCByKSA6IHIgfSwgaGFuZGxlcjogZnVuY3Rpb24oZSwgdCkgeyB2YXIgciA9IHQgPyB0aGlzLmRlbWFuZ2xlKGUsIHQpIDogZS5tZXNzYWdlOyBpZiAoISh0ICYmIHQuZXJyb3JoYW5kbGVyICYmIHQuZXJyb3JoYW5kbGVyKHIsIGUuZmlsZW5hbWUsIGUubGluZW5vKSB8fCAoY29uc29sZS5sb2coIkludm9raW5nIGVycm9yIGhhbmRsZXIgZHVlIHRvXG4iICsgciksICJmdW5jdGlvbiIgPT0gdHlwZW9mIGR1bXAgJiYgZHVtcCgiSW52b2tpbmcgZXJyb3IgaGFuZGxlciBkdWUgdG9cbiIgKyByKSwgci5pbmRleE9mKCJVbmtub3duRXJyb3IiKSAhPSAtMSB8fCByLmluZGV4T2YoIlByb2dyYW0gdGVybWluYXRlZCB3aXRoIGV4aXQoMCkiKSAhPSAtMSB8fCB0aGlzLmRpZFNob3dFcnJvck1lc3NhZ2UpKSkgeyB2YXIgciA9ICJBbiBlcnJvciBvY2N1cnJlZCBydW5uaW5nIHRoZSBVbml0eSBjb250ZW50IG9uIHRoaXMgcGFnZS4gU2VlIHlvdXIgYnJvd3NlciBKYXZhU2NyaXB0IGNvbnNvbGUgZm9yIG1vcmUgaW5mby4gVGhlIGVycm9yIHdhczpcbiIgKyByOwogICAgICAgICAgICAgICAgci5pbmRleE9mKCJESVNBQkxFX0VYQ0VQVElPTl9DQVRDSElORyIpICE9IC0xID8gciA9ICJBbiBleGNlcHRpb24gaGFzIG9jY3VycmVkLCBidXQgZXhjZXB0aW9uIGhhbmRsaW5nIGhhcyBiZWVuIGRpc2FibGVkIGluIHRoaXMgYnVpbGQuIElmIHlvdSBhcmUgdGhlIGRldmVsb3BlciBvZiB0aGlzIGNvbnRlbnQsIGVuYWJsZSBleGNlcHRpb25zIGluIHlvdXIgcHJvamVjdCBXZWJHTCBwbGF5ZXIgc2V0dGluZ3MgdG8gYmUgYWJsZSB0byBjYXRjaCB0aGUgZXhjZXB0aW9uIG9yIHNlZSB0aGUgc3RhY2sgdHJhY2UuIiA6IHIuaW5kZXhPZigiQ2Fubm90IGVubGFyZ2UgbWVtb3J5IGFycmF5cyIpICE9IC0xID8gciA9ICJPdXQgb2YgbWVtb3J5LiBJZiB5b3UgYXJlIHRoZSBkZXZlbG9wZXIgb2YgdGhpcyBjb250ZW50LCB0cnkgYWxsb2NhdGluZyBtb3JlIG1lbW9yeSB0byB5b3VyIFdlYkdMIGJ1aWxkIGluIHRoZSBXZWJHTCBwbGF5ZXIgc2V0dGluZ3MuIiA6IHIuaW5kZXhPZigiSW52YWxpZCBhcnJheSBidWZmZXIgbGVuZ3RoIikgPT0gLTEgJiYgci5pbmRleE9mKCJJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCIpID09IC0xICYmIHIuaW5kZXhPZigib3V0IG9mIG1lbW9yeSIpID09IC0xIHx8IChyID0gIlRoZSBicm93c2VyIGNvdWxkIG5vdCBhbGxvY2F0ZSBlbm91Z2ggbWVtb3J5IGZvciB0aGUgV2ViR0wgY29udGVudC4gSWYgeW91IGFyZSB0aGUgZGV2ZWxvcGVyIG9mIHRoaXMgY29udGVudCwgdHJ5IGFsbG9jYXRpbmcgbGVzcyBtZW1vcnkgdG8geW91ciBXZWJHTCBidWlsZCBpbiB0aGUgV2ViR0wgcGxheWVyIHNldHRpbmdzLiIpLCAociksIHRoaXMuZGlkU2hvd0Vycm9yTWVzc2FnZSA9ICEwIH0gfSwgcG9wdXA6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgciA9IHIgfHwgW3sgdGV4dDogIk9LIiB9XTsgdmFyIG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgICAgbi5zdHlsZS5jc3NUZXh0ID0gInBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiA1MCU7IGxlZnQ6IDUwJTsgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7IHRleHQtYWxpZ246IGNlbnRlcjsgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7IHBhZGRpbmc6IDVweDsgYmFja2dyb3VuZDogI0U4RThFOCI7IHZhciBvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpOwogICAgICAgICAgICBvLnRleHRDb250ZW50ID0gdCwgbi5hcHBlbmRDaGlsZChvKSwgbi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJiciIpKTsgZm9yICh2YXIgYSA9IDA7IGEgPCByLmxlbmd0aDsgYSsrKSB7IHZhciBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYnV0dG9uIik7CiAgICAgICAgICAgICAgICByW2FdLnRleHQgJiYgKGkudGV4dENvbnRlbnQgPSByW2FdLnRleHQpLCByW2FdLmNhbGxiYWNrICYmIChpLm9uY2xpY2sgPSByW2FdLmNhbGxiYWNrKSwgaS5zdHlsZS5tYXJnaW4gPSAiNXB4IiwgaS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKCkgeyBlLmNvbnRhaW5lci5yZW1vdmVDaGlsZChuKSB9KSwgbi5hcHBlbmRDaGlsZChpKSB9IGUuY29udGFpbmVyLmFwcGVuZENoaWxkKG4pIH0gfSwKICAgIEpvYjogeyBzY2hlZHVsZTogZnVuY3Rpb24oZSwgdCwgciwgbiwgbykgeyBvID0gbyB8fCB7fTsgdmFyIGEgPSBlLkpvYnNbdF07IGlmIChhIHx8IChhID0gZS5Kb2JzW3RdID0geyBkZXBlbmRlbmNpZXM6IHt9LCBkZXBlbmRhbnRzOiB7fSB9KSwgYS5jYWxsYmFjaykgdGhyb3cgIltVbml0eUxvYWRlci5Kb2Iuc2NoZWR1bGVdIGpvYiAnIiArIHQgKyAiJyBoYXMgYmVlbiBhbHJlYWR5IHNjaGVkdWxlZCI7IGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiBuKSB0aHJvdyAiW1VuaXR5TG9hZGVyLkpvYi5zY2hlZHVsZV0gam9iICciICsgdCArICInIGhhcyBpbnZhbGlkIGNhbGxiYWNrIjsgaWYgKCJvYmplY3QiICE9IHR5cGVvZiBvKSB0aHJvdyAiW1VuaXR5TG9hZGVyLkpvYi5zY2hlZHVsZV0gam9iICciICsgdCArICInIGhhcyBpbnZhbGlkIHBhcmFtZXRlcnMiOwogICAgICAgICAgICBhLmNhbGxiYWNrID0gZnVuY3Rpb24oZSwgdCkgeyBhLnN0YXJ0dGltZSA9IHBlcmZvcm1hbmNlLm5vdygpLCBuKGUsIHQpIH0sIGEucGFyYW1ldGVycyA9IG8sIGEuY29tcGxldGUgPSBmdW5jdGlvbihyKSB7IGEuZW5kdGltZSA9IHBlcmZvcm1hbmNlLm5vdygpLCBhLnJlc3VsdCA9IHsgdmFsdWU6IHIgfTsgZm9yICh2YXIgbiBpbiBhLmRlcGVuZGFudHMpIHsgdmFyIG8gPSBlLkpvYnNbbl07CiAgICAgICAgICAgICAgICAgICAgby5kZXBlbmRlbmNpZXNbdF0gPSBhLmRlcGVuZGFudHNbbl0gPSAhMTsgdmFyIGkgPSAiZnVuY3Rpb24iICE9IHR5cGVvZiBvLmNhbGxiYWNrOyBmb3IgKHZhciBzIGluIG8uZGVwZW5kZW5jaWVzKSBpID0gaSB8fCBvLmRlcGVuZGVuY2llc1tzXTsgaWYgKCFpKSB7IGlmIChvLmV4ZWN1dGVkKSB0aHJvdyAiW1VuaXR5TG9hZGVyLkpvYi5zY2hlZHVsZV0gam9iICciICsgdCArICInIGhhcyBhbHJlYWR5IGJlZW4gZXhlY3V0ZWQiOwogICAgICAgICAgICAgICAgICAgICAgICBvLmV4ZWN1dGVkID0gITAsIHNldFRpbWVvdXQoby5jYWxsYmFjay5iaW5kKG51bGwsIGUsIG8pLCAwKSB9IH0gfTsgdmFyIGkgPSAhMTsKICAgICAgICAgICAgci5mb3JFYWNoKGZ1bmN0aW9uKHIpIHsgdmFyIG4gPSBlLkpvYnNbcl07CiAgICAgICAgICAgICAgICBuIHx8IChuID0gZS5Kb2JzW3JdID0geyBkZXBlbmRlbmNpZXM6IHt9LCBkZXBlbmRhbnRzOiB7fSB9KSwgKGEuZGVwZW5kZW5jaWVzW3JdID0gbi5kZXBlbmRhbnRzW3RdID0gIW4ucmVzdWx0KSAmJiAoaSA9ICEwKSB9KSwgaSB8fCAoYS5leGVjdXRlZCA9ICEwLCBzZXRUaW1lb3V0KGEuY2FsbGJhY2suYmluZChudWxsLCBlLCBhKSwgMCkpIH0sIHJlc3VsdDogZnVuY3Rpb24oZSwgdCkgeyB2YXIgciA9IGUuSm9ic1t0XTsgaWYgKCFyKSB0aHJvdyAiW1VuaXR5TG9hZGVyLkpvYi5yZXN1bHRdIGpvYiAnIiArIHQgKyAiJyBkb2VzIG5vdCBleGlzdCI7IGlmICgib2JqZWN0IiAhPSB0eXBlb2Ygci5yZXN1bHQpIHRocm93ICJbVW5pdHlMb2FkZXIuSm9iLnJlc3VsdF0gam9iICciICsgdCArICInIGhhcyBpbnZhbGlkIHJlc3VsdCI7IHJldHVybiByLnJlc3VsdC52YWx1ZSB9IH0sCiAgICBYTUxIdHRwUmVxdWVzdDogZnVuY3Rpb24oKSB7CiAgICAgICAgZnVuY3Rpb24gZShlKSB7IGNvbnNvbGUubG9nKCJbVW5pdHlDYWNoZV0gIiArIGUpIH0KCiAgICAgICAgZnVuY3Rpb24gdChlKSB7IHJldHVybiB0LmxpbmsgPSB0LmxpbmsgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpLCB0LmxpbmsuaHJlZiA9IGUsIHQubGluay5ocmVmIH0KCiAgICAgICAgZnVuY3Rpb24gcihlKSB7IHZhciB0ID0gd2luZG93LmxvY2F0aW9uLmhyZWYubWF0Y2goL15bYS16XSs6XC9cL1teXC9dKy8pOyByZXR1cm4gIXQgfHwgZS5sYXN0SW5kZXhPZih0WzBdLCAwKSB9CgogICAgICAgIGZ1bmN0aW9uIG4oKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIHQodCkgeyBpZiAoInVuZGVmaW5lZCIgPT0gdHlwZW9mIHIuZGF0YWJhc2UpCiAgICAgICAgICAgICAgICAgICAgZm9yIChyLmRhdGFiYXNlID0gdCwgci5kYXRhYmFzZSB8fCBlKCJpbmRleGVkREIgZGF0YWJhc2UgY291bGQgbm90IGJlIG9wZW5lZCIpOyByLnF1ZXVlLmxlbmd0aDspIHsgdmFyIG4gPSByLnF1ZXVlLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHIuZGF0YWJhc2UgPyByLmV4ZWN1dGUuYXBwbHkociwgbikgOiAiZnVuY3Rpb24iID09IHR5cGVvZiBuLm9uZXJyb3IgJiYgbi5vbmVycm9yKG5ldyBFcnJvcigib3BlcmF0aW9uIGNhbmNlbGxlZCIpKSB9IH0gdmFyIHIgPSB0aGlzOwogICAgICAgICAgICByLnF1ZXVlID0gW107IHRyeSB7IHZhciBuID0gd2luZG93LmluZGV4ZWREQiB8fCB3aW5kb3cubW96SW5kZXhlZERCIHx8IHdpbmRvdy53ZWJraXRJbmRleGVkREIgfHwgd2luZG93Lm1zSW5kZXhlZERCLAogICAgICAgICAgICAgICAgICAgIG8gPSBuLm9wZW4oaSk7CiAgICAgICAgICAgICAgICBvLm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGUpIHsgdmFyIHQgPSBlLnRhcmdldC5yZXN1bHQuY3JlYXRlT2JqZWN0U3RvcmUocywgeyBrZXlQYXRoOiAidXJsIiB9KTsKICAgICAgICAgICAgICAgICAgICBbInZlcnNpb24iLCAiY29tcGFueSIsICJwcm9kdWN0IiwgInVwZGF0ZWQiLCAicmV2YWxpZGF0ZWQiLCAiYWNjZXNzZWQiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpIHsgdC5jcmVhdGVJbmRleChlLCBlKSB9KSB9LCBvLm9uc3VjY2VzcyA9IGZ1bmN0aW9uKGUpIHsgdChlLnRhcmdldC5yZXN1bHQpIH0sIG8ub25lcnJvciA9IGZ1bmN0aW9uKCkgeyB0KG51bGwpIH0sIHNldFRpbWVvdXQoby5vbmVycm9yLCAxZTMpIH0gY2F0Y2ggKGUpIHsgdChudWxsKSB9IH0KCiAgICAgICAgZnVuY3Rpb24gbyhlLCB0LCByLCBuLCBvKSB7IHZhciBhID0geyB1cmw6IGUsIHZlcnNpb246IGQsIGNvbXBhbnk6IHQsIHByb2R1Y3Q6IHIsIHVwZGF0ZWQ6IG4sIHJldmFsaWRhdGVkOiBuLCBhY2Nlc3NlZDogbiwgcmVzcG9uc2VIZWFkZXJzOiB7fSwgeGhyOiB7fSB9OyByZXR1cm4gbyAmJiAoWyJMYXN0LU1vZGlmaWVkIiwgIkVUYWciXS5mb3JFYWNoKGZ1bmN0aW9uKGUpIHsgYS5yZXNwb25zZUhlYWRlcnNbZV0gPSBvLmdldFJlc3BvbnNlSGVhZGVyKGUpIH0pLCBbInJlc3BvbnNlVVJMIiwgInN0YXR1cyIsICJzdGF0dXNUZXh0IiwgInJlc3BvbnNlIl0uZm9yRWFjaChmdW5jdGlvbihlKSB7IGEueGhyW2VdID0gb1tlXSB9KSksIGEgfQoKICAgICAgICBmdW5jdGlvbiBhKHQpIHsgdGhpcy5jYWNoZSA9IHsgZW5hYmxlZDogITEgfSwgdCAmJiAodGhpcy5jYWNoZS5jb250cm9sID0gdC5jYWNoZUNvbnRyb2wsIHRoaXMuY2FjaGUuY29tcGFueSA9IHQuY29tcGFueU5hbWUsIHRoaXMuY2FjaGUucHJvZHVjdCA9IHQucHJvZHVjdE5hbWUpLCB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCh0KSwgdGhpcy54aHIuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsIGZ1bmN0aW9uKCkgeyB2YXIgdCA9IHRoaXMueGhyLAogICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLmNhY2hlOwogICAgICAgICAgICAgICAgci5lbmFibGVkICYmICFyLnJldmFsaWRhdGVkICYmICgzMDQgPT0gdC5zdGF0dXMgPyAoci5yZXN1bHQucmV2YWxpZGF0ZWQgPSByLnJlc3VsdC5hY2Nlc3NlZCwgci5yZXZhbGlkYXRlZCA9ICEwLCBsLmV4ZWN1dGUoInB1dCIsIFtyLnJlc3VsdF0pLCBlKCInIiArIHIucmVzdWx0LnVybCArICInIHN1Y2Nlc3NmdWxseSByZXZhbGlkYXRlZCBhbmQgc2VydmVkIGZyb20gdGhlIGluZGV4ZWREQiBjYWNoZSIpKSA6IDIwMCA9PSB0LnN0YXR1cyA/IChyLnJlc3VsdCA9IG8oci5yZXN1bHQudXJsLCByLmNvbXBhbnksIHIucHJvZHVjdCwgci5yZXN1bHQuYWNjZXNzZWQsIHQpLCByLnJldmFsaWRhdGVkID0gITAsIGwuZXhlY3V0ZSgicHV0IiwgW3IucmVzdWx0XSwgZnVuY3Rpb24odCkgeyBlKCInIiArIHIucmVzdWx0LnVybCArICInIHN1Y2Nlc3NmdWxseSBkb3dubG9hZGVkIGFuZCBzdG9yZWQgaW4gdGhlIGluZGV4ZWREQiBjYWNoZSIpIH0sIGZ1bmN0aW9uKHQpIHsgZSgiJyIgKyByLnJlc3VsdC51cmwgKyAiJyBzdWNjZXNzZnVsbHkgZG93bmxvYWRlZCBidXQgbm90IHN0b3JlZCBpbiB0aGUgaW5kZXhlZERCIGNhY2hlIGR1ZSB0byB0aGUgZXJyb3I6ICIgKyB0KSB9KSkgOiBlKCInIiArIHIucmVzdWx0LnVybCArICInIHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzOiAiICsgdC5zdGF0dXMgKyAiICIgKyB0LnN0YXR1c1RleHQpKSB9LmJpbmQodGhpcykpIH0gdmFyIGkgPSAiVW5pdHlDYWNoZSIsCiAgICAgICAgICAgIHMgPSAiWE1MSHR0cFJlcXVlc3QiLAogICAgICAgICAgICBkID0gMTsKICAgICAgICBuLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24oZSwgdCwgciwgbikgeyBpZiAodGhpcy5kYXRhYmFzZSkgdHJ5IHsgdmFyIG8gPSB0aGlzLmRhdGFiYXNlLnRyYW5zYWN0aW9uKFtzXSwgWyJwdXQiLCAiZGVsZXRlIiwgImNsZWFyIl0uaW5kZXhPZihlKSAhPSAtMSA/ICJyZWFkd3JpdGUiIDogInJlYWRvbmx5Iikub2JqZWN0U3RvcmUocyk7ICJvcGVuS2V5Q3Vyc29yIiA9PSBlICYmIChvID0gby5pbmRleCh0WzBdKSwgdCA9IHQuc2xpY2UoMSkpOyB2YXIgYSA9IG9bZV0uYXBwbHkobywgdCk7ICJmdW5jdGlvbiIgPT0gdHlwZW9mIHIgJiYgKGEub25zdWNjZXNzID0gZnVuY3Rpb24oZSkgeyByKGUudGFyZ2V0LnJlc3VsdCkgfSksIGEub25lcnJvciA9IG4gfQogICAgICAgICAgICBjYXRjaCAoZSkgeyAiZnVuY3Rpb24iID09IHR5cGVvZiBuICYmIG4oZSkgfSBlbHNlICJ1bmRlZmluZWQiID09IHR5cGVvZiB0aGlzLmRhdGFiYXNlID8gdGhpcy5xdWV1ZS5wdXNoKGFyZ3VtZW50cykgOiAiZnVuY3Rpb24iID09IHR5cGVvZiBuICYmIG4obmV3IEVycm9yKCJpbmRleGVkREIgYWNjZXNzIGRlbmllZCIpKSB9OyB2YXIgbCA9IG5ldyBuOwogICAgICAgIGEucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbih0KSB7IHZhciBuID0gdGhpcy54aHIsCiAgICAgICAgICAgICAgICBvID0gdGhpcy5jYWNoZSwKICAgICAgICAgICAgICAgIGEgPSBhcmd1bWVudHM7IHJldHVybiBvLmVuYWJsZWQgPSBvLmVuYWJsZWQgJiYgImFycmF5YnVmZmVyIiA9PSBuLnJlc3BvbnNlVHlwZSAmJiAhdCwgby5lbmFibGVkID8gdm9pZCBsLmV4ZWN1dGUoImdldCIsIFtvLnJlc3VsdC51cmxdLCBmdW5jdGlvbih0KSB7IGlmICghdCB8fCB0LnZlcnNpb24gIT0gZCkgcmV0dXJuIHZvaWQgbi5zZW5kLmFwcGx5KG4sIGEpOyBpZiAoby5yZXN1bHQgPSB0LCBvLnJlc3VsdC5hY2Nlc3NlZCA9IERhdGUubm93KCksICJpbW11dGFibGUiID09IG8uY29udHJvbCkgby5yZXZhbGlkYXRlZCA9ICEwLCBsLmV4ZWN1dGUoInB1dCIsIFtvLnJlc3VsdF0pLCBuLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCJsb2FkIikpLCBlKCInIiArIG8ucmVzdWx0LnVybCArICInIHNlcnZlZCBmcm9tIHRoZSBpbmRleGVkREIgY2FjaGUgd2l0aG91dCByZXZhbGlkYXRpb24iKTsKICAgICAgICAgICAgICAgIGVsc2UgaWYgKHIoby5yZXN1bHQudXJsKSAmJiAoby5yZXN1bHQucmVzcG9uc2VIZWFkZXJzWyJMYXN0LU1vZGlmaWVkIl0gfHwgby5yZXN1bHQucmVzcG9uc2VIZWFkZXJzLkVUYWcpKSB7IHZhciBpID0gbmV3IFhNTEh0dHBSZXF1ZXN0OwogICAgICAgICAgICAgICAgICAgIGkub3BlbigiSEVBRCIsIG8ucmVzdWx0LnVybCksIGkub25sb2FkID0gZnVuY3Rpb24oKSB7IG8ucmV2YWxpZGF0ZWQgPSBbIkxhc3QtTW9kaWZpZWQiLCAiRVRhZyJdLmV2ZXJ5KGZ1bmN0aW9uKGUpIHsgcmV0dXJuICFvLnJlc3VsdC5yZXNwb25zZUhlYWRlcnNbZV0gfHwgby5yZXN1bHQucmVzcG9uc2VIZWFkZXJzW2VdID09IGkuZ2V0UmVzcG9uc2VIZWFkZXIoZSkgfSksIG8ucmV2YWxpZGF0ZWQgPyAoby5yZXN1bHQucmV2YWxpZGF0ZWQgPSBvLnJlc3VsdC5hY2Nlc3NlZCwgbC5leGVjdXRlKCJwdXQiLCBbby5yZXN1bHRdKSwgbi5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgibG9hZCIpKSwgZSgiJyIgKyBvLnJlc3VsdC51cmwgKyAiJyBzdWNjZXNzZnVsbHkgcmV2YWxpZGF0ZWQgYW5kIHNlcnZlZCBmcm9tIHRoZSBpbmRleGVkREIgY2FjaGUiKSkgOiBuLnNlbmQuYXBwbHkobiwgYSkgfSwgaS5zZW5kKCkgfSBlbHNlIG8ucmVzdWx0LnJlc3BvbnNlSGVhZGVyc1siTGFzdC1Nb2RpZmllZCJdID8gKG4uc2V0UmVxdWVzdEhlYWRlcigiSWYtTW9kaWZpZWQtU2luY2UiLCBvLnJlc3VsdC5yZXNwb25zZUhlYWRlcnNbIkxhc3QtTW9kaWZpZWQiXSksIG4uc2V0UmVxdWVzdEhlYWRlcigiQ2FjaGUtQ29udHJvbCIsICJuby1jYWNoZSIpKSA6IG8ucmVzdWx0LnJlc3BvbnNlSGVhZGVycy5FVGFnICYmIChuLnNldFJlcXVlc3RIZWFkZXIoIklmLU5vbmUtTWF0Y2giLCBvLnJlc3VsdC5yZXNwb25zZUhlYWRlcnMuRVRhZyksIG4uc2V0UmVxdWVzdEhlYWRlcigiQ2FjaGUtQ29udHJvbCIsICJuby1jYWNoZSIpKSwgbi5zZW5kLmFwcGx5KG4sIGEpIH0sIGZ1bmN0aW9uKGUpIHsgbi5zZW5kLmFwcGx5KG4sIGEpIH0pIDogbi5zZW5kLmFwcGx5KG4sIGEpIH0sIGEucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbihlLCByLCBuLCBhLCBpKSB7IHJldHVybiB0aGlzLmNhY2hlLnJlc3VsdCA9IG8odChyKSwgdGhpcy5jYWNoZS5jb21wYW55LCB0aGlzLmNhY2hlLnByb2R1Y3QsIERhdGUubm93KCkpLCB0aGlzLmNhY2hlLmVuYWJsZWQgPSBbIm11c3QtcmV2YWxpZGF0ZSIsICJpbW11dGFibGUiXS5pbmRleE9mKHRoaXMuY2FjaGUuY29udHJvbCkgIT0gLTEgJiYgIkdFVCIgPT0gZSAmJiB0aGlzLmNhY2hlLnJlc3VsdC51cmwubWF0Y2goIl5odHRwcz86Ly8iKSAmJiAoInVuZGVmaW5lZCIgPT0gdHlwZW9mIG4gfHwgbikgJiYgInVuZGVmaW5lZCIgPT0gdHlwZW9mIGEgJiYgInVuZGVmaW5lZCIgPT0gdHlwZW9mIGksIHRoaXMuY2FjaGUucmV2YWxpZGF0ZWQgPSAhMSwgdGhpcy54aHIub3Blbi5hcHBseSh0aGlzLnhociwgYXJndW1lbnRzKSB9LCBhLnByb3RvdHlwZS5zZXRSZXF1ZXN0SGVhZGVyID0gZnVuY3Rpb24oZSwgdCkgeyByZXR1cm4gdGhpcy5jYWNoZS5lbmFibGVkID0gITEsIHRoaXMueGhyLnNldFJlcXVlc3RIZWFkZXIuYXBwbHkodGhpcy54aHIsIGFyZ3VtZW50cykgfTsgdmFyIHUgPSBuZXcgWE1MSHR0cFJlcXVlc3Q7IGZvciAodmFyIGYgaW4gdSkgYS5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoZikgfHwgISBmdW5jdGlvbihlKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSwgZSwgImZ1bmN0aW9uIiA9PSB0eXBlb2YgdVtlXSA/IHsgdmFsdWU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy54aHJbZV0uYXBwbHkodGhpcy54aHIsIGFyZ3VtZW50cykgfSB9IDogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5jYWNoZS5yZXZhbGlkYXRlZCAmJiB0aGlzLmNhY2hlLnJlc3VsdC54aHIuaGFzT3duUHJvcGVydHkoZSkgPyB0aGlzLmNhY2hlLnJlc3VsdC54aHJbZV0gOiB0aGlzLnhocltlXSB9LCBzZXQ6IGZ1bmN0aW9uKHQpIHsgdGhpcy54aHJbZV0gPSB0IH0gfSkgfShmKTsgcmV0dXJuIGEgfSgpLAogICAgVXRpbHM6IHsgYXNzZXJ0OiBmdW5jdGlvbihlLCB0KSB7IGUgfHwgYWJvcnQoIkFzc2VydGlvbiBmYWlsZWQ6ICIgKyB0KSB9LCBvcHRpbWl6ZU1hdGhGcm91bmQ6IGZ1bmN0aW9uKGUsIHQpIHsgY29uc29sZS5sb2coIm9wdGltaXppbmcgb3V0IE1hdGguZnJvdW5kIGNhbGxzIik7IGZvciAodmFyIHIgPSB7IExPT0tJTkdfRk9SX01PRFVMRTogMCwgU0NBTk5JTkdfTU9EVUxFX1ZBUklBQkxFUzogMSwgU0NBTk5JTkdfTU9EVUxFX0ZVTkNUSU9OUzogMiB9LCBuID0gWyJFTVNDUklQVEVOX1NUQVJUX0FTTSIsICJFTVNDUklQVEVOX1NUQVJUX0ZVTkNTIiwgIkVNU0NSSVBURU5fRU5EX0ZVTkNTIl0sIG8gPSAidmFyIiwgYSA9ICJnbG9iYWwuTWF0aC5mcm91bmQ7IiwgaSA9IDAsIHMgPSB0ID8gci5MT09LSU5HX0ZPUl9NT0RVTEUgOiByLlNDQU5OSU5HX01PRFVMRV9WQVJJQUJMRVMsIGQgPSAwLCBsID0gMDsgcyA8PSByLlNDQU5OSU5HX01PRFVMRV9GVU5DVElPTlMgJiYgaSA8IGUubGVuZ3RoOyBpKyspCiAgICAgICAgICAgICAgICBpZiAoNDcgPT0gZVtpXSAmJiA0NyA9PSBlW2kgKyAxXSAmJiAzMiA9PSBlW2kgKyAyXSAmJiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGUuc3ViYXJyYXkoaSArIDMsIGkgKyAzICsgbltzXS5sZW5ndGgpKSA9PT0gbltzXSkgcysrOwogICAgICAgICAgICAgICAgZWxzZSBpZiAocyAhPSByLlNDQU5OSU5HX01PRFVMRV9WQVJJQUJMRVMgfHwgbCB8fCA2MSAhPSBlW2ldIHx8IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZS5zdWJhcnJheShpICsgMSwgaSArIDEgKyBhLmxlbmd0aCkpICE9PSBhKSB7IGlmIChsICYmIDQwID09IGVbaV0pIHsgZm9yICh2YXIgdSA9IDA7IHUgPCBsICYmIGVbaSAtIDEgLSB1XSA9PSBlW2QgLSB1XTspIHUrKzsgaWYgKHUgPT0gbCkgeyB2YXIgZiA9IGVbaSAtIDEgLSB1XTsgaWYgKGYgPCAzNiB8fCAzNiA8IGYgJiYgZiA8IDQ4IHx8IDU3IDwgZiAmJiBmIDwgNjUgfHwgOTAgPCBmICYmIGYgPCA5NSB8fCA5NSA8IGYgJiYgZiA8IDk3IHx8IDEyMiA8IGYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgdTsgdS0tKSBlW2kgLSB1XSA9IDMyIH0gfSB9IGVsc2UgeyBmb3IgKGQgPSBpIC0gMTsgMzIgIT0gZVtkIC0gbF07KSBsKys7CiAgICAgICAgICAgICAgICBsICYmIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZS5zdWJhcnJheShkIC0gbCAtIG8ubGVuZ3RoLCBkIC0gbCkpID09PSBvIHx8IChkID0gbCA9IDApIH0gcmV0dXJuIGUgfSB9LAogICAgQ3J5cHRvZ3JhcGh5OiB7IGNyYzMyOiBmdW5jdGlvbihlKSB7IHZhciB0ID0gVW5pdHlMb2FkZXIuQ3J5cHRvZ3JhcGh5LmNyYzMyLm1vZHVsZTsgaWYgKCF0KSB7IHZhciByID0gbmV3IEFycmF5QnVmZmVyKDE2Nzc3MjE2KSwKICAgICAgICAgICAgICAgICAgICBuID0gZnVuY3Rpb24oZSwgdCwgcikgeyAidXNlIGFzbSI7IHZhciBuID0gbmV3IGUuVWludDhBcnJheShyKTsgdmFyIG8gPSBuZXcgZS5VaW50MzJBcnJheShyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGEoZSwgdCkgeyBlID0gZSB8IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gdCB8IDA7IHZhciByID0gMDsgZm9yIChyID0gb1sxMDI0ID4+IDJdIHwgMDsgdDsgZSA9IGUgKyAxIHwgMCwgdCA9IHQgLSAxIHwgMCkgciA9IG9bKHIgJiAyNTUgXiBuW2VdKSA8PCAyID4+IDJdIF4gciA+Pj4gOCBeIDQyNzgxOTAwODA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvWzEwMjQgPj4gMl0gPSByIH0gcmV0dXJuIHsgcHJvY2VzczogYSB9IH0oeyBVaW50OEFycmF5OiBVaW50OEFycmF5LCBVaW50MzJBcnJheTogVWludDMyQXJyYXkgfSwgbnVsbCwgcik7CiAgICAgICAgICAgICAgICB0ID0gVW5pdHlMb2FkZXIuQ3J5cHRvZ3JhcGh5LmNyYzMyLm1vZHVsZSA9IHsgYnVmZmVyOiByLCBIRUFQVTg6IG5ldyBVaW50OEFycmF5KHIpLCBIRUFQVTMyOiBuZXcgVWludDMyQXJyYXkociksIHByb2Nlc3M6IG4ucHJvY2VzcywgY3JjMzI6IDEwMjQsIGRhdGE6IDEwMjggfTsgZm9yICh2YXIgbyA9IDA7IG8gPCAyNTY7IG8rKykgeyBmb3IgKHZhciBhID0gMjU1IF4gbywgaSA9IDA7IGkgPCA4OyBpKyspIGEgPSBhID4+PiAxIF4gKDEgJiBhID8gMzk4ODI5MjM4NCA6IDApOwogICAgICAgICAgICAgICAgICAgIHQuSEVBUFUzMltvXSA9IGEgfSB9IHQuSEVBUFUzMlt0LmNyYzMyID4+IDJdID0gMDsgZm9yICh2YXIgcyA9IDA7IHMgPCBlLmxlbmd0aDspIHsgdmFyIGQgPSBNYXRoLm1pbih0LkhFQVBVOC5sZW5ndGggLSB0LmRhdGEsIGUubGVuZ3RoIC0gcyk7CiAgICAgICAgICAgICAgICB0LkhFQVBVOC5zZXQoZS5zdWJhcnJheShzLCBzICsgZCksIHQuZGF0YSksIGNyYyA9IHQucHJvY2Vzcyh0LmRhdGEsIGQpLCBzICs9IGQgfSB2YXIgbCA9IHQuSEVBUFUzMlt0LmNyYzMyID4+IDJdOyByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW2wgPj4gMjQsIGwgPj4gMTYsIGwgPj4gOCwgbF0pIH0sIG1kNTogZnVuY3Rpb24oZSkgeyB2YXIgdCA9IFVuaXR5TG9hZGVyLkNyeXB0b2dyYXBoeS5tZDUubW9kdWxlOyBpZiAoIXQpIHsgdmFyIHIgPSBuZXcgQXJyYXlCdWZmZXIoMTY3NzcyMTYpLAogICAgICAgICAgICAgICAgICAgIG4gPSBmdW5jdGlvbihlLCB0LCByKSB7ICJ1c2UgYXNtIjsgdmFyIG4gPSBuZXcgZS5VaW50MzJBcnJheShyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG8oZSwgdCkgeyBlID0gZSB8IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gdCB8IDA7IHZhciByID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuWzEyOF0gfCAwLCBvID0gblsxMjldIHwgMCwgYSA9IG5bMTMwXSB8IDAsIGkgPSBuWzEzMV0gfCAwOyBmb3IgKDsgdDsgZSA9IGUgKyA2NCB8IDAsIHQgPSB0IC0gMSB8IDApIHsgcyA9IHI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IG87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGk7IGZvciAoYyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjIHwgMCkgPCA1MTI7IGMgPSBjICsgOCB8IDApIHsgcCA9IG5bYyA+PiAyXSB8IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSByICsgKG5bYyArIDQgPj4gMl0gfCAwKSArIChuW2UgKyAocCA+Pj4gMTQpID4+IDJdIHwgMCkgKyAoKGMgfCAwKSA8IDEyOCA/IGkgXiBvICYgKGEgXiBpKSA6IChjIHwgMCkgPCAyNTYgPyBhIF4gaSAmIChvIF4gYSkgOiAoYyB8IDApIDwgMzg0ID8gbyBeIGEgXiBpIDogYSBeIChvIHwgfmkpKSB8IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSAociA8PCAocCAmIDMxKSB8IHIgPj4+IDMyIC0gKHAgJiAzMSkpICsgbyB8IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IG87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBoIH0gciA9IHIgKyBzIHwgMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gbyArIGQgfCAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBhICsgbCB8IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkgKyB1IHwgMCB9IG5bMTI4XSA9IHI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuWzEyOV0gPSBvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgblsxMzBdID0gYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5bMTMxXSA9IGkgfSByZXR1cm4geyBwcm9jZXNzOiBvIH0gfSh7IFVpbnQzMkFycmF5OiBVaW50MzJBcnJheSB9LCBudWxsLCByKTsKICAgICAgICAgICAgICAgIHQgPSBVbml0eUxvYWRlci5DcnlwdG9ncmFwaHkubWQ1Lm1vZHVsZSA9IHsgYnVmZmVyOiByLCBIRUFQVTg6IG5ldyBVaW50OEFycmF5KHIpLCBIRUFQVTMyOiBuZXcgVWludDMyQXJyYXkociksIHByb2Nlc3M6IG4ucHJvY2VzcywgbWQ1OiA1MTIsIGRhdGE6IDU3NiB9LCB0LkhFQVBVMzIuc2V0KG5ldyBVaW50MzJBcnJheShbNywgMzYxNDA5MDM2MCwgNjU1NDgsIDM5MDU0MDI3MTAsIDEzMTA4OSwgNjA2MTA1ODE5LCAxOTY2MzAsIDMyNTA0NDE5NjYsIDI2MjE1MSwgNDExODU0ODM5OSwgMzI3NjkyLCAxMjAwMDgwNDI2LCAzOTMyMzMsIDI4MjE3MzU5NTUsIDQ1ODc3NCwgNDI0OTI2MTMxMywgNTI0Mjk1LCAxNzcwMDM1NDE2LCA1ODk4MzYsIDIzMzY1NTI4NzksIDY1NTM3NywgNDI5NDkyNTIzMywgNzIwOTE4LCAyMzA0NTYzMTM0LCA3ODY0MzksIDE4MDQ2MDM2ODIsIDg1MTk4MCwgNDI1NDYyNjE5NSwgOTE3NTIxLCAyNzkyOTY1MDA2LCA5ODMwNjIsIDEyMzY1MzUzMjksIDY1NTQxLCA0MTI5MTcwNzg2LCAzOTMyMjUsIDMyMjU0NjU2NjQsIDcyMDkxMCwgNjQzNzE3NzEzLCAyMCwgMzkyMTA2OTk5NCwgMzI3Njg1LCAzNTkzNDA4NjA1LCA2NTUzNjksIDM4MDE2MDgzLCA5ODMwNTQsIDM2MzQ0ODg5NjEsIDI2MjE2NCwgMzg4OTQyOTQ0OCwgNTg5ODI5LCA1Njg0NDY0MzgsIDkxNzUxMywgMzI3NTE2MzYwNiwgMTk2NjIyLCA0MTA3NjAzMzM1LCA1MjQzMDgsIDExNjM1MzE1MDEsIDg1MTk3MywgMjg1MDI4NTgyOSwgMTMxMDgxLCA0MjQzNTYzNTEyLCA0NTg3NjYsIDE3MzUzMjg0NzMsIDc4NjQ1MiwgMjM2ODM1OTU2MiwgMzI3Njg0LCA0Mjk0NTg4NzM4LCA1MjQyOTksIDIyNzIzOTI4MzMsIDcyMDkxMiwgMTgzOTAzMDU2MiwgOTE3NTI3LCA0MjU5NjU3NzQwLCA2NTU0MCwgMjc2Mzk3NTIzNiwgMjYyMTU1LCAxMjcyODkzMzUzLCA0NTg3NjgsIDQxMzk0Njk2NjQsIDY1NTM4MywgMzIwMDIzNjY1NiwgODUxOTcyLCA2ODEyNzkxNzQsIDExLCAzOTM2NDMwMDc0LCAxOTY2MjQsIDM1NzI0NDUzMTcsIDM5MzIzOSwgNzYwMjkxODksIDU4OTgyOCwgMzY1NDYwMjgwOSwgNzg2NDQzLCAzODczMTUxNDYxLCA5ODMwNTYsIDUzMDc0MjUyMCwgMTMxMDk1LCAzMjk5NjI4NjQ1LCA2LCA0MDk2MzM2NDUyLCA0NTg3NjIsIDExMjY4OTE0MTUsIDkxNzUxOSwgMjg3ODYxMjM5MSwgMzI3NzAxLCA0MjM3NTMzMjQxLCA3ODY0MzgsIDE3MDA0ODU1NzEsIDE5NjYxOCwgMjM5OTk4MDY5MCwgNjU1Mzc1LCA0MjkzOTE1NzczLCA2NTU1NywgMjI0MDA0NDQ5NywgNTI0Mjk0LCAxODczMzEzMzU5LCA5ODMwNTAsIDQyNjQzNTU1NTIsIDM5MzIzMSwgMjczNDc2ODkxNiwgODUxOTg5LCAxMzA5MTUxNjQ5LCAyNjIxNTAsIDQxNDk0NDQyMjYsIDcyMDkwNiwgMzE3NDc1NjkxNywgMTMxMDg3LCA3MTg3ODcyNTksIDU4OTg0NSwgMzk1MTQ4MTc0NV0pKSB9IHQuSEVBUFUzMi5zZXQobmV3IFVpbnQzMkFycmF5KFsxNzMyNTg0MTkzLCA0MDIzMjMzNDE3LCAyNTYyMzgzMTAyLCAyNzE3MzM4NzhdKSwgdC5tZDUgPj4gMik7IGZvciAodmFyIG8gPSAwOyBvIDwgZS5sZW5ndGg7KSB7IHZhciBhID0gTWF0aC5taW4odC5IRUFQVTgubGVuZ3RoIC0gdC5kYXRhLCBlLmxlbmd0aCAtIG8pICYgLTY0OyBpZiAodC5IRUFQVTguc2V0KGUuc3ViYXJyYXkobywgbyArIGEpLCB0LmRhdGEpLCBvICs9IGEsIHQucHJvY2Vzcyh0LmRhdGEsIGEgPj4gNiksIGUubGVuZ3RoIC0gbyA8IDY0KSB7IGlmIChhID0gZS5sZW5ndGggLSBvLCB0LkhFQVBVOC5zZXQoZS5zdWJhcnJheShlLmxlbmd0aCAtIGEsIGUubGVuZ3RoKSwgdC5kYXRhKSwgbyArPSBhLCB0LkhFQVBVOFt0LmRhdGEgKyBhKytdID0gMTI4LCBhID4gNTYpIHsgZm9yICh2YXIgaSA9IGE7IGkgPCA2NDsgaSsrKSB0LkhFQVBVOFt0LmRhdGEgKyBpXSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHQucHJvY2Vzcyh0LmRhdGEsIDEpLCBhID0gMCB9IGZvciAodmFyIGkgPSBhOyBpIDwgNjQ7IGkrKykgdC5IRUFQVThbdC5kYXRhICsgaV0gPSAwOyBmb3IgKHZhciBzID0gZS5sZW5ndGgsIGQgPSAwLCBpID0gNTY7IGkgPCA2NDsgaSsrLCBkID0gKDIyNCAmIHMpID4+IDUsIHMgLz0gMjU2KSB0LkhFQVBVOFt0LmRhdGEgKyBpXSA9ICgoMzEgJiBzKSA8PCAzKSArIGQ7CiAgICAgICAgICAgICAgICAgICAgdC5wcm9jZXNzKHQuZGF0YSwgMSkgfSB9IHJldHVybiBuZXcgVWludDhBcnJheSh0LkhFQVBVOC5zdWJhcnJheSh0Lm1kNSwgdC5tZDUgKyAxNikpIH0sIHNoYTE6IGZ1bmN0aW9uKGUpIHsgdmFyIHQgPSBVbml0eUxvYWRlci5DcnlwdG9ncmFwaHkuc2hhMS5tb2R1bGU7IGlmICghdCkgeyB2YXIgciA9IG5ldyBBcnJheUJ1ZmZlcigxNjc3NzIxNiksCiAgICAgICAgICAgICAgICAgICAgbiA9IGZ1bmN0aW9uKGUsIHQsIHIpIHsgInVzZSBhc20iOyB2YXIgbiA9IG5ldyBlLlVpbnQzMkFycmF5KHIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbyhlLCB0KSB7IGUgPSBlIHwgMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSB0IHwgMDsgdmFyIHIgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG5bODBdIHwgMCwgbyA9IG5bODFdIHwgMCwgYSA9IG5bODJdIHwgMCwgaSA9IG5bODNdIHwgMCwgcyA9IG5bODRdIHwgMDsgZm9yICg7IHQ7IGUgPSBlICsgNjQgfCAwLCB0ID0gdCAtIDEgfCAwKSB7IGQgPSByOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBzOyBmb3IgKHAgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocCB8IDApIDwgMzIwOyBwID0gcCArIDQgfCAwLCBzID0gaSwgaSA9IGEsIGEgPSBvIDw8IDMwIHwgbyA+Pj4gMiwgbyA9IHIsIHIgPSBoKSB7IGlmICgocCB8IDApIDwgNjQpIHsgaCA9IG5bZSArIHAgPj4gMl0gfCAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGggPDwgMjQgJiA0Mjc4MTkwMDgwIHwgaCA8PCA4ICYgMTY3MTE2ODAgfCBoID4+PiA4ICYgNjUyODAgfCBoID4+PiAyNCAmIDI1NSB9IGVsc2UgeyBoID0gbltwIC0gMTIgPj4gMl0gXiBuW3AgLSAzMiA+PiAyXSBeIG5bcCAtIDU2ID4+IDJdIF4gbltwIC0gNjQgPj4gMl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gaCA8PCAxIHwgaCA+Pj4gMzEgfSBuW3AgPj4gMl0gPSBoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gaCArICgociA8PCA1IHwgciA+Pj4gMjcpICsgcykgKyAoKHAgfCAwKSA8IDgwID8gKG8gJiBhIHwgfm8gJiBpIHwgMCkgKyAxNTE4NTAwMjQ5IHwgMCA6IChwIHwgMCkgPCAxNjAgPyAobyBeIGEgXiBpKSArIDE4NTk3NzUzOTMgfCAwIDogKHAgfCAwKSA8IDI0MCA/IChvICYgYSB8IG8gJiBpIHwgYSAmIGkpICsgMjQwMDk1OTcwOCB8IDAgOiAobyBeIGEgXiBpKSArIDMzOTU0Njk3ODIgfCAwKSB8IDAgfSByID0gciArIGQgfCAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBvICsgbCB8IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEgKyB1IHwgMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaSArIGYgfCAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBzICsgYyB8IDAgfSBuWzgwXSA9IHI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuWzgxXSA9IG87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuWzgyXSA9IGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuWzgzXSA9IGk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuWzg0XSA9IHMgfSByZXR1cm4geyBwcm9jZXNzOiBvIH0gfSh7IFVpbnQzMkFycmF5OiBVaW50MzJBcnJheSB9LCBudWxsLCByKTsKICAgICAgICAgICAgICAgIHQgPSBVbml0eUxvYWRlci5DcnlwdG9ncmFwaHkuc2hhMS5tb2R1bGUgPSB7IGJ1ZmZlcjogciwgSEVBUFU4OiBuZXcgVWludDhBcnJheShyKSwgSEVBUFUzMjogbmV3IFVpbnQzMkFycmF5KHIpLCBwcm9jZXNzOiBuLnByb2Nlc3MsIHNoYTE6IDMyMCwgZGF0YTogMzg0IH0gfSB0LkhFQVBVMzIuc2V0KG5ldyBVaW50MzJBcnJheShbMTczMjU4NDE5MywgNDAyMzIzMzQxNywgMjU2MjM4MzEwMiwgMjcxNzMzODc4LCAzMjg1Mzc3NTIwXSksIHQuc2hhMSA+PiAyKTsgZm9yICh2YXIgbyA9IDA7IG8gPCBlLmxlbmd0aDspIHsgdmFyIGEgPSBNYXRoLm1pbih0LkhFQVBVOC5sZW5ndGggLSB0LmRhdGEsIGUubGVuZ3RoIC0gbykgJiAtNjQ7IGlmICh0LkhFQVBVOC5zZXQoZS5zdWJhcnJheShvLCBvICsgYSksIHQuZGF0YSksIG8gKz0gYSwgdC5wcm9jZXNzKHQuZGF0YSwgYSA+PiA2KSwgZS5sZW5ndGggLSBvIDwgNjQpIHsgaWYgKGEgPSBlLmxlbmd0aCAtIG8sIHQuSEVBUFU4LnNldChlLnN1YmFycmF5KGUubGVuZ3RoIC0gYSwgZS5sZW5ndGgpLCB0LmRhdGEpLCBvICs9IGEsIHQuSEVBUFU4W3QuZGF0YSArIGErK10gPSAxMjgsIGEgPiA1NikgeyBmb3IgKHZhciBpID0gYTsgaSA8IDY0OyBpKyspIHQuSEVBUFU4W3QuZGF0YSArIGldID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgdC5wcm9jZXNzKHQuZGF0YSwgMSksIGEgPSAwIH0gZm9yICh2YXIgaSA9IGE7IGkgPCA2NDsgaSsrKSB0LkhFQVBVOFt0LmRhdGEgKyBpXSA9IDA7IGZvciAodmFyIHMgPSBlLmxlbmd0aCwgZCA9IDAsIGkgPSA2MzsgaSA+PSA1NjsgaS0tLCBkID0gKDIyNCAmIHMpID4+IDUsIHMgLz0gMjU2KSB0LkhFQVBVOFt0LmRhdGEgKyBpXSA9ICgoMzEgJiBzKSA8PCAzKSArIGQ7CiAgICAgICAgICAgICAgICAgICAgdC5wcm9jZXNzKHQuZGF0YSwgMSkgfSB9IGZvciAodmFyIGwgPSBuZXcgVWludDhBcnJheSgyMCksIGkgPSAwOyBpIDwgbC5sZW5ndGg7IGkrKykgbFtpXSA9IHQuSEVBUFU4W3Quc2hhMSArIChpICYgLTQpICsgMyAtICgzICYgaSldOyByZXR1cm4gbCB9IH0sCiAgICBQcm9ncmVzczogewogICAgICAgIFN0eWxlczogewogICAgICAgICAgICBEYXJrOiB7CiAgICAgICAgICAgICAgICBwcm9ncmVzc0xvZ29Vcmw6ICJkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUpvQUFBQ0NDQVlBQUFDK2V0SGhBQUFBQ1hCSVdYTUFBQXNTQUFBTEVnSFMzWDc4QUFBSTJVbEVRVlI0MnUyZDdWWGpTZ3lHcFp3dHdIUmdPakFWWUNyQVZMRFpDalpVc0tHQ3NCV0VEaElxaUtrZzZTQjBRRHFZK3lPVGUzSjlpZVBSZk1rejBqa2Nma0RzR2Z1SnBIazFINmlVQWpFeDN6YVJSeUFXeEpSUy8vNklqZUo5VlVxcG1WSnFwWTQyczMzdklYN3dIREJFbERmSkQ2d1NBR29BdU5lL3k4Ni90SWo0UUFFdHBBbG8vTUFxT21CVlYxOGk0Y1dGQnUySHZGb2U0UkFBbWpPNFREOWZJMkxMdVk4Q1dyeHdlQTVXWVhuSlJ3QVEwQVFzVlhUQUtoM2ZvdWIrRENSSDh3ZFhyVDNOb0R6TGdkMGc0a0Z5dER6eXJITzRRbHNEQUc4U090T1ZIUjRkNVZtMmRpK2dwU2M3TkI3eXJLVHpOTW5ScnVkWko2OVZqYURKdDRqNEtUbmFlUEtzazljYW16VUE4Q29lalcrZTVVdDJDRzFyUkh6aTZOR3lCVTBwdFJxcDErcXpBeUxlY0FRdHkybENTcWttUWNnQUFBb2QvdG5aSkVQSUNnQllKTnpGUmtEalliTUVjckUrdTVmQkFJL2tmd3Z4eFZYZmRyVWNKVG1hWC92REJMS0Q1K3ZYRWpyamViTWFBS1lSd1ZvRHdETUEzT25mV1lYUG5BVGJQNEhCYWdIZ0E0NVRyWGVkd2NnbU40K1dCV2hLcVdtQWgzOENhMzBPMW9YQmlPL3dYU21seXFIbEtCa011SUdzMEFPQTBoTlk3ZEJwMUhvd3NnL1U5VitJK01abE1KQ0RSM01sWnhpRDlZMkYxTzlZVFJ0SzJxTlp5aGs3RGRlN2k0VWZlakN5Q2RqOTNuS1VlRFMzdGpDQWJOZnhXZ2NQYmFIWUdvNVRsRXk5Y3FHVXFxN2tpd0xhV1JMLzArVGh3dkI1WTc3QjZ2YURXb044MWlQbUtYSDB1ZVB5TWxsdWlhQ1VtaXEzdGxkS0xaUlNqUjRnQkJ1TUtLVytpRzJlNjJzMHhNK3ZocnozRUQ4c1FYTUkyWmUrVmhteEx3dUxMMFp4Qml2SkJMUXducXlLM0pmU291M1R6clcyeE92VUhFQ2JjQXVYQUxCMHFDUEZ6aytvZldtLzBjRGVpZGVxSlVmejU4bW1ESjVyYmRIKzJ1SDF0aEk2RTRWTTkybFBiUCt5NTVyVVFVV1JQV2lKUWphekdMd1VQZGRkRWEvYlpKMmplY2pKM2hoQVZnQjlwc2pmSzNvZU5VOTd6RFpIUzlHVDJjb1pIa2V4K3l4RFo4S1EyY2daemNCN1VITy9NcXZRbVdLNGRDUm5yQWYrNzVwNGp6cjJ0ekNZUjB2Vmt6bVFNMHFEK3pncFJ5VWJPbE9HekRLa0xRajNJbzFva3dmTk1XUkxocEI1a1RONjdyZXhMY2tsbDZNNXpzbmVFUEVYTThoczVJd1g0dlFrcXN6UnhIeFEzanhhNnA1TTkzSHBzalEwOEo0VjhaNmI1RUpuSnBCVkZuMnFMZTlOeWdtVENwMnBoOHN6STAvUGRyQU9vU1crbXlqaGN5S1FrZnZaRUxXcEE3aFpxZjVCL054OXJBZm1MSFRtRUM0ZHlCbHpWNE1RbTl4d3REbGFacEROYmFkbk8yb0hkZFp0TWNvY0xhT2M3Q1JuL0E0c1p6ak4wMkxJSEJPQmpEUUFvSGlsMWtOZGxxcW5sYVBLMFJ5SHl5MXp3R3psak1wVG15aXpic3ZSaEU3SG5td0hBQS9BMzZoeXhwdkhoVEttNGZNbHlpNURGSS9tMnBPRlhOQnJJMmVFckdjYXRHdEdHWXl3SDNWbUNsa1JXODdvYVp2SlpNdnBkdzZHSFdnNVFtWXJaekRTOURhWEloa3IwREtHckxSWTVsWUhhdVBDZERBU0dyUWZROE9sdzhUL1pDdkZiR09aSGltQUttZTBnZHI0QWNjTkJ5L1phK3hWKzFjMzR2TUVXUTUyRzJwMHA2UEQxNFUvSDNSYkRsMlB4a2F3RmNqSTlocFNRdEFRdFQxeXhpSDJBNWtJWk03dEFBQXZFZTc3M1d5T0hTS3lPTDl6SXBBNXQrZElIdVM3WlhqUFhCN0svM0kwZ2N6S2RvaDRGM0dFL0hVMmNPbXRHMGZOMGZUNlFvR01ibjhqMy84OFQzdm45R0FtbmFUeUV3QitDUzlrK3gzNS9pV2p0dlRuYUhvcWk4QkdzeXJXNG1ZZGpjNUYyWnJUUXV2SmhlR3l3RWEzUmFTcVI4Mm9MY05BRTlpc3JJQitsZDZYUFY1b3l4OE9EMFVxQS83c05xUm8yeGx4ZHUydVc0SUtQZW9jZEJhVUI5aDI0UDhVWHBjSmRra1pBU0xpUXlESUtqaWVlVFc0TGNIcnpESjc0M3FTSFdzMXVrRWI1eVp6MGJydlhlYWo4WUZ0d1h3KzJwRGRoZjR6MHplM0diYXJrWUJtYzU3VExFRGJqR2Y3am1JQmNVNkxoUjMwMmZlYUFkTzFET1ZvUU1zWU51cks4SVhITnBsdW03VVpGV2c1d21hNVQ2MnZkWjJVUlRQTnFMWkVjQ3pxVHJuRHBxZG1VM2ZGWG5pQWpDcTlWREcrcGRhYnZHUzJ3WXYzc3dRTTJrTGRPN2VXM1lRUzMwM0ljVHNvWjBOOWpTNUh5eFUyTGd1S2JTU2wwZTlobXhGc1VlVU9pNEhKTEFuUU1vTnRFNnRQRnRXS01oblFjb0V0cHR4QjFQVDJvNm9NUklKdHpoUzJKYkUvbXdnajMyV1NvSG1BYlpwWUhYUWErSmsyeVlLV0NXeEJOMCsyOEtKRjBxQmxBbHN3dVlQb1FiZVhoSHFWMmduRUt1M3pPbTEyaEN3TjdsTzVBRnFsZkFLeDQ5cm9raE5zK2dUaGx2QlIwd1VrMURKV0cvdWJLR2VxdSt1WDkwUElpTnJkVjk5N1R5NTBaZ0liVlVqZERMZzI5VmllVmJhZ3BRcWJUN25ESWcrY1pRMWF3ckI1T2ZyYXR1eVVOV2dKdytaYzdpQmVjMzh0Tjg4R05BK3cxUXhBczZtRGxqN0tUdG5JR3dHbGo1V3ZPZm9HL1drdEpJV0ZRMW1EeHo1cFhEeWFCOC8yRlJzMjVYQ1ZPM0UycmJxVTgyVWJPajNDMWtUdUM3VU91blZkZGhMUS9PZHNTZ3VkODlENW13dTV3eUxmbTNNQmJkQnVRakZoQTRDZnhJOFgwTCtzcklYamx1bmVUemhSOU4yWURnQndxMHRVbEswVkhpNzFUWEhjdG1xc3B0WDJvUjdNSzNnNmpGRnl4bGZkQjlQUEhoRHhwcytqQ1dnT0pRWUFvTTVrZFFxZVpWc290a2JFSnk2Z3NjM1JIUFp2eVNYSGM5Z1dVdGxKY2pUUEVnTUErTmluek5qajZiWnNnWFphbnFuMWJtMHFIbzJYeE9EYzR3VnF5OTdrdll0SGN5Z3hhSzhXY29mSmJ6MmVic3NXYUp1ekRMWGU0M2xrTU1CVFluQU9ub2JNWjF1ZTlJeGZBUzBTYkZTSllXeDJjKzJFUGNYcFlOZ0U3VG1EUHU0NEhBU2JOV2lXTXlyR1l1OGNHNVdiUndOSS85aWhWa0RqNGRVKzRWaldTZEVPdnV1MkFwcVp2Y0I0amdnYXZUZkxGalJFUEJXYzd6UjBxZVJ0SDJ5ZmVVN3l4alhUa3lUdmdUWmJnb01OUGxGUGREUSswQlZ3bktkL0FxOWszdVJQUkx3MTZKK0F4aFM4c2dNZXR3UFRycGFkQkxSeGdsZHI0RTdneGJhclpTY0JMWTB3VzBmTzcyNU1LZ0lDV2pwaHRnNlkzKzBROGM2d2pRSmFndUJWSGZCYzUzY3ZpRGdYME1SODUzY1BwaFVCQVUzeU82ZXJuUVEwTVZmNVhlOXFKeTZnWmJGbVlPejVuZDV2YlhWaHhmdk05cjNMbWdHeHZ2enVVWWZad1dVbk5xRlRUTXlYVGVRUmlBbG9Zc25ZUDZiKzdCN2pKZHdBQUFBQUFFbEZUa1N1UW1DQyIsCiAgICAgICAgICAgICAgICBwcm9ncmVzc0VtcHR5VXJsOiAiZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFJMEFBQUFTQ0FZQUFBQm1ibDB6QUFBQUNYQklXWE1BQUFzU0FBQUxFZ0hTM1g3OEFBQUFUVWxFUVZSbzN1M2FJUTRBSUF3RVFVcjQvNWNQaXlNVkJET2owTTJtQ0tna0dkQXdqWUN1ZFp6TE9MaUlUWVByQ2RFZ0drU0RhRUEwaUFiUklCcEVBNkpCTkh4MXZuTDdWNE5Od3hzYkNOTUdJM1lJbXUwQUFBQUFTVVZPUks1Q1lJST0iLAogICAgICAgICAgICAgICAgcHJvZ3Jlc3NGdWxsVXJsOiAiZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFJMEFBQUFTQ0FZQUFBQm1ibDB6QUFBQUNYQklXWE1BQUFzU0FBQUxFZ0hTM1g3OEFBQUFPMGxFUVZSbzN1M1NRUkVBQUFqRE1NQy81NkVCM29tRVhqdEpDZzVHQWt5RGFUQU5wc0UwWUJwTWcya3dEYVlCMDJBYVRJTnBNQTJZaHI4Rk8xOEVJQnBaTWVRQUFBQUFTVVZPUks1Q1lJST0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIExpZ2h0OiB7IHByb2dyZXNzTG9nb1VybDogImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSm9BQUFDQ0NBWUFBQUMrZXRIaEFBQUFDWEJJV1hNQUFBc1NBQUFMRWdIUzNYNzhBQUFJaFVsRVFWUjQydTJkelczYlNCVEgveUZjZ05JQmc1d0RNS2NjUGE1QVRBVnhLa2hVZ2EwS2JGZGdkbUNwZ2xESG5GWkF6c0d5QkhXZ1BZamNNSVFsa20rKzNzeThQN0FJbkkzdEdmS25OKzlyWnQ0Y2owZUlSTGFWeVNNUXVkQlYvNHYzSHo3SkUrR3ZBb0FDY0EyZ0JMQUM4RGozaC96KzlkTWZhQ0tXeW50Z3FmYnJ2cFlVMEx4YU5CRUxMUVpnRlNQL1hnVzNkSXE4TG9kbEQ2NjVVZ0JxQVUzMDJuTFlCMnVoK2ZPV0FwcW9XdzdMQzM2V3J0Z3Zud0thUGFuVzBrenhzMHdzdlFzQUJ3RXRuYlREMHBPRktRRlVBbHE4YVllbElUOUxWOWNDV254cGg5S0NueFcxbnlhZ2piKzh6bW9Wek1lYXQvODFBbG80ZmxabnRVSlRDYVpWZ3RSQnkzRzV2Qk9hcmdVMGZub0oxR29GNmFlbDJpWlVSZ2haRjdBVUFocWZsL0VRK1lkSVFHT2c3eEg0WW1OK21vREd3UG4vRnZrY0Zmd25qNU1IN1k3SlN6ZzRnRTFBOC9oSnYvVUkxZ2FudHV1UDdaOUpMWjhwcFRmdUhJTlZBOWkxZis0SHdjaVAxQ3hhS3FEZE9uajRIVmliQVZpdkJTTzJsKzhDek1wUktZQzJzR1ROK2hhcm5oR011TEtzQ295Nk9WSUF6VlE2Z3dMV1VDN3pkOWNDbWp2bG9LY3o5aTFRVzVqcHgxZHdtMHd0QVh3VjBOem9ZWVkvdEI5WXJZT0ZzVkMwNmZsY2MxMkdZc1JmRk5CNlR2d1h3c1BsQU5ad0h0UWE1S3IxNjI2SlZsUkFtL0J5bmczK3ZLYTFEaTdBR3NKUHRXYnJkdHhiSW1oczJvYXVJb2ZzMEZxRTJtT29UNjFHTkQxSXFENGltd0o3RmpGa0FIRFRSbDYrSU12YnFKZHF6UTY5RHd4MUNWUUNtbDNJdmpMd1Q2aHpxVjlKVFd3Rk5KNlFWWjdub3pSZTh2b01mQlF0QmJSNElkT3hadFVacUtnQlRBRUdIU3VaUUdaRjFHcEVGN3hjV2xLRFhENHpnY3hLT29OYXozd2FzVnBVUDIyWk1tZ3hRZ2JvcFRQdUp3UUpZdEVFTXExMHhtb2lqQTF4WEhscW9NVUttVTRBVU9OVXRaaWlEZkYzcUpSQWl4a3lwZkV5NTNSWjdFTDAwektCekxzMWU1eTVISXBGY3dSWnhSQXluWFRHbXJqVVVxTGhJbWJRVEVQMmxSbGtPdW1NZmoxempxaHBqakpXMEdLSERKalhYTm5YSHZRV25wcjRmZGN4Z3BZQ1pBWG9lMFYxOW5idVFVdHpxTmhBU3dHeXpwcFJ0SUgrUGdUcTk1ZXhnSllLWkNYUlFvelZNNmVLbXVhNGpnRzBWQ0RUc1daUE1OT0lHVlNhSXhQSVNMb0hMWjNSd0Z3UFA3WHIxa3ZiVUNhUXpkWUM5TDJpMUhSRzhINWFKcENSbHN3RkVZcks4RmlvK2JROE5OQk1RcllQQURKZjZZeEw4QjZJSCtoZ1FETU4yUTM0aXhvQVZMQzNVV2J1OHJtR2gxMWhHU1BJRHN3aDg1M09PS2M1YVE2VHdZaDEwRktFVEdlMytaUGwrYzFKYzZ4OVBldE1JSnNrYW5kR2cvSDJiRjAxRTVkQ0c4R0lGZEJTaFN6WFNHZTRDbTZtV0xXVno0ZDQ1UUd5VGk4SVE3bEdPcU4yTk1ZZEx1OVZlSVRuWGZ0WG5pQXJFTDljcG1ycWtXQms3ZnRoWkI0Z1MwRnoyN04xZGJnQW03Y0FZQ3BvQWhuOXBmdXdJTHN6dmpDTDg5RXlnY3k0VnA0c3lJWmJBREFHbWtDbUYwMVhIbjkzSC9ES1lUQXlHN1JjSU5QU2srZmYzd2RyeStuQkRFRnJ3TCt3elZtK2I4N0xHWTFsZE9tc0JEYXlkTG83VEVEV1R4c3BqMk9aSEF3SWJIUlIrOVYwcFJpTlpUSm9BaHRkQzlCUEZOTFI4c3hZN3JpREpyRFJkUWYzWGF6cXpOOS9CNE5LekpRU1ZCZXVtNHhHaDZFNForVkVhSjdocnBsemJNUEpBenczbGs0dHF0dUE3VFBDNmQ3NGwyaGhGTnprc3NvSlk3bEZJRzFDSnBmUkFxZGJlQmNCZ05hQVhzWnhsWk9jc2luWWEyQXd0L0hSTkd5aEpJZXBoZW5jUVdDd3dMUVdjMTlCQ2drMDA3Q1ZnY0NtMC9kUFBUeFpOd2pnRXFTUVFUTU4yMjBnc0ZXZ05RL2FUakhNUFRMME9TVFFVb1dOYXRWc3BoZ1U0ZDhIdDFNOU5kaHEwQTlYc1hHZmVrNWNDb3ZRUUVzUk5xcFZzMkZKU28wUFRIQ2dwUVpiQTNvSHJXbXJSam5yN0JBeWFLbkJSdDBUa01Qc1BrK0tSYXQ5UEREVEIvR2xBcHZPdm9Cdk1KUHVVTVR2MjhVQVdrcXdWYUNmOTI5aUNhWGVoTEtKQmJTVVlGdHJ6RWszOHFOWXRBYWU3cGZQTEgvaVRjSjJ6eEMwR3ZSQ3RZNVZ5NG1nMXI0ZWxPMExMVXpDZGdkR3JjazlVYmZYS1kzNVVQMnpiYXlnbVlidG1TRnNCOUIzUDFIcm9OUWozT3VZUVVzQnRudlEweDJVamdwS1dzTnJzNm5MYXhSamg0MWFNZmlHZVdVazZ2SHRYdmQ1dXI0WU5tYllxTmZ1ek8zdUNLYnM1Qk8wMkdHaldyWGJHUTUrTUdVbjM2REZESnZPNlQxVHJOb0N0SWl6OXYxZ01vKy9PMWJZcUczZmFzSWNGSEZNdTVSQml4VTJuVHJvMkFZU2FscGprenBvc2NKRzdlNFkyMEJDQ1FRYWVDbzdjUVBOQm15S3daeW84em0zZ1NRSHJadTI1dkNDdVlCbUdyWVgrRDhHb05aNHlRK0dyQm5BNUp3MFRxQ1poRzJCMHdabDM3QlI1L0xhZFVEQmxaMDRnMllEdHRMalhCcVlhL3VtdUFOc3pqamhDSnBwMkY0QUhGdm83ajM0YjQvRWw5MC8xRThod0xKVFgxZmdxNnI5ODRzR1pNTVRFQlgrSkVacm5QSkxPcjdVMUhUSENyVG16WWMyTlVIdHBxMjV2TXczeCtQeC95L2VmL2lFeVBSamhnV3pEZDQvUkoveHNaMURRUUQ4N2JuLytmdlhUd0hOb0ZRTEc5VWFtQVJQWnl3VWJYQTZHb3dGYUJuaVZnMTZxM1czelA0dzVPUHBqSVdpSGFjWEVidEZBK2dINmRtd2VIbTdoTG80cCt3ZExsUUV4S0x4U2pHWXRuZ04zRng2MFlCQjJTazEwSFJTRERiQWMzSHpYYzN0QmFRQ21zNUJlcWJCSzJELzlyc3R0eGVRZ285bUlzVVFtdDZPV1hEeDBleHFsY0FjV1I2dG54cG9jeUxFVUxYbE9LalVRQVBpdndtbUZ0QjRxQUdUNjU4dEJUMENHaU94dU5BK0ZXdVdNbWhkd2ZsakMxMHNmdHVPNjhDdWtMYjIrUHZ1Z0JLblRsYUZNTk1nR3dFdG5CZlZ2YXpGQUx3OEFOK3pFZERDWEY0ci9PbTR5QWZnY2Jzd2pmWHlud2xQczZQVno2MS9kOFBNdjl0eWZuaGkwZlFzU04xYlpwVm4vNjRXME5KWVp2ditYVDRBejdaL3gvNUdad0hOM2pMYjkrK0tBWGltL2JzdDl3Y2lvTGxSbDBicEtoSnFBRjdVeTZhQUZvZC9keERRUkM3OHV6cUVTUXBvNGZ0M093Rk5aTk8vVzdZUWJrS1l4Rit0M0NLUkxVbGxRQ1NnaWVMUmY4MHNTNWZDRFZiaUFBQUFBRWxGVGtTdVFtQ0MiLCBwcm9ncmVzc0VtcHR5VXJsOiAiZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFJMEFBQUFTQ0FZQUFBQm1ibDB6QUFBQUNYQklXWE1BQUFzU0FBQUxFZ0hTM1g3OEFBQUFVVWxFUVZSbzN1M2FNUTRBRUF4QVVjUkp6R2IzdjFtdDNjUWdsdmNtYy9OVEEzWE1GUVV1TkNQZ1ZrL25haHdjaEUyRDZ3blJJQnBFZzJoQU5JZ0cwU0FhUkFPaVFUUjhsVis1L2F2QnB1R05EY3o2QTZvcTFDZ05BQUFBQUVsRlRrU3VRbUNDIiwgcHJvZ3Jlc3NGdWxsVXJsOiAiZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFJMEFBQUFTQ0FZQUFBQm1ibDB6QUFBQUNYQklXWE1BQUFzU0FBQUxFZ0hTM1g3OEFBQUFRRWxFUVZSbzN1M1NNUkVBTUFnQXNWSXBuVHZqM3hsb2dEbVI4UGZ4ZnRhQmdTc0Jwc0UwbUFiVFlCb3dEYWJCTkpnRzA0QnBNQTJtd1RTWUJrekRYZ1AvaGdHbnI0UHBlQUFBQUFCSlJVNUVya0pnZ2c9PSIgfQogICAgICAgIH0sCiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZSwgdCkgeyBpZiAoZS5Nb2R1bGUpIHsgdmFyIHIgPSBVbml0eUxvYWRlci5Qcm9ncmVzcy5TdHlsZXNbZS5Nb2R1bGUuc3BsYXNoU2NyZWVuU3R5bGVdLAogICAgICAgICAgICAgICAgICAgIG4gPSBlLk1vZHVsZS5wcm9ncmVzc0xvZ29VcmwgPyBlLk1vZHVsZS5yZXNvbHZlQnVpbGRVcmwoZS5Nb2R1bGUucHJvZ3Jlc3NMb2dvVXJsKSA6IHIucHJvZ3Jlc3NMb2dvVXJsLAogICAgICAgICAgICAgICAgICAgIG8gPSBlLk1vZHVsZS5wcm9ncmVzc0VtcHR5VXJsID8gZS5Nb2R1bGUucmVzb2x2ZUJ1aWxkVXJsKGUuTW9kdWxlLnByb2dyZXNzRW1wdHlVcmwpIDogci5wcm9ncmVzc0VtcHR5VXJsLAogICAgICAgICAgICAgICAgICAgIGEgPSBlLk1vZHVsZS5wcm9ncmVzc0Z1bGxVcmwgPyBlLk1vZHVsZS5yZXNvbHZlQnVpbGRVcmwoZS5Nb2R1bGUucHJvZ3Jlc3NGdWxsVXJsKSA6IHIucHJvZ3Jlc3NGdWxsVXJsLAogICAgICAgICAgICAgICAgICAgIGkgPSAicG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiA1MCU7IHRvcDogNTAlOyAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsiOwogICAgICAgICAgICAgICAgZS5sb2dvIHx8IChlLmxvZ28gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwgZS5sb2dvLnN0eWxlLmNzc1RleHQgPSBpICsgImJhY2tncm91bmQ6IHVybCgnIiArIG4gKyAiJykgbm8tcmVwZWF0IGNlbnRlciAvIGNvbnRhaW47IHdpZHRoOiAxNTRweDsgaGVpZ2h0OiAxMzBweDsiLCBlLmNvbnRhaW5lci5hcHBlbmRDaGlsZChlLmxvZ28pKSwgZS5wcm9ncmVzcyB8fCAoZS5wcm9ncmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLCBlLnByb2dyZXNzLnN0eWxlLmNzc1RleHQgPSBpICsgIiBoZWlnaHQ6IDE4cHg7IHdpZHRoOiAxNDFweDsgbWFyZ2luLXRvcDogOTBweDsiLCBlLnByb2dyZXNzLmVtcHR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IiksIGUucHJvZ3Jlc3MuZW1wdHkuc3R5bGUuY3NzVGV4dCA9ICJiYWNrZ3JvdW5kOiB1cmwoJyIgKyBvICsgIicpIG5vLXJlcGVhdCByaWdodCAvIGNvdmVyOyBmbG9hdDogcmlnaHQ7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGRpc3BsYXk6IGlubGluZS1ibG9jazsiLCBlLnByb2dyZXNzLmFwcGVuZENoaWxkKGUucHJvZ3Jlc3MuZW1wdHkpLCBlLnByb2dyZXNzLmZ1bGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwgZS5wcm9ncmVzcy5mdWxsLnN0eWxlLmNzc1RleHQgPSAiYmFja2dyb3VuZDogdXJsKCciICsgYSArICInKSBuby1yZXBlYXQgbGVmdCAvIGNvdmVyOyBmbG9hdDogbGVmdDsgd2lkdGg6IDAlOyBoZWlnaHQ6IDEwMCU7IGRpc3BsYXk6IGlubGluZS1ibG9jazsiLCBlLnByb2dyZXNzLmFwcGVuZENoaWxkKGUucHJvZ3Jlc3MuZnVsbCksIGUuY29udGFpbmVyLmFwcGVuZENoaWxkKGUucHJvZ3Jlc3MpKSwgZS5wcm9ncmVzcy5mdWxsLnN0eWxlLndpZHRoID0gMTAwICogdCArICIlIiwgZS5wcm9ncmVzcy5lbXB0eS5zdHlsZS53aWR0aCA9IDEwMCAqICgxIC0gdCkgKyAiJSIsIDEgPT0gdCAmJiAoZS5sb2dvLnN0eWxlLmRpc3BsYXkgPSBlLnByb2dyZXNzLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIpIH0gfSwKICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgdmFyIG4gPSBlLmJ1aWxkRG93bmxvYWRQcm9ncmVzc1t0XTsKICAgICAgICAgICAgbiB8fCAobiA9IGUuYnVpbGREb3dubG9hZFByb2dyZXNzW3RdID0geyBzdGFydGVkOiAhMSwgZmluaXNoZWQ6ICExLCBsZW5ndGhDb21wdXRhYmxlOiAhMSwgdG90YWw6IDAsIGxvYWRlZDogMCB9KSwgIm9iamVjdCIgIT0gdHlwZW9mIHIgfHwgInByb2dyZXNzIiAhPSByLnR5cGUgJiYgImxvYWQiICE9IHIudHlwZSB8fCAobi5zdGFydGVkIHx8IChuLnN0YXJ0ZWQgPSAhMCwgbi5sZW5ndGhDb21wdXRhYmxlID0gci5sZW5ndGhDb21wdXRhYmxlLCBuLnRvdGFsID0gci50b3RhbCksIG4ubG9hZGVkID0gci5sb2FkZWQsICJsb2FkIiA9PSByLnR5cGUgJiYgKG4uZmluaXNoZWQgPSAhMCkpOyB2YXIgbyA9IDAsCiAgICAgICAgICAgICAgICBhID0gMCwKICAgICAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICAgICAgcyA9IDAsCiAgICAgICAgICAgICAgICBkID0gMDsgZm9yICh2YXIgdCBpbiBlLmJ1aWxkRG93bmxvYWRQcm9ncmVzcykgeyB2YXIgbiA9IGUuYnVpbGREb3dubG9hZFByb2dyZXNzW3RdOyBpZiAoIW4uc3RhcnRlZCkgcmV0dXJuIDA7CiAgICAgICAgICAgICAgICBpKyssIG4ubGVuZ3RoQ29tcHV0YWJsZSA/IChvICs9IG4ubG9hZGVkLCBhICs9IG4udG90YWwsIHMrKykgOiBuLmZpbmlzaGVkIHx8IGQrKyB9IHZhciBsID0gaSA/IChpIC0gZCAtIChhID8gcyAqIChhIC0gbykgLyBhIDogMCkpIC8gaSA6IDA7CiAgICAgICAgICAgIGUuZ2FtZUluc3RhbmNlLm9uUHJvZ3Jlc3MoZS5nYW1lSW5zdGFuY2UsIC45ICogbCkgfQogICAgfSwKICAgIENvbXByZXNzaW9uOiB7CiAgICAgICAgaWRlbnRpdHk6IHsgcmVxdWlyZTogZnVuY3Rpb24oKSB7IHJldHVybiB7fSB9LCBkZWNvbXByZXNzOiBmdW5jdGlvbihlKSB7IHJldHVybiBlIH0gfSwKICAgICAgICBnemlwOiB7IHJlcXVpcmU6IGZ1bmN0aW9uKGUpIHsgdmFyIHQgPSB7ICJpbmZsYXRlLmpzIjogZnVuY3Rpb24oZSwgdCwgcikgeyAidXNlIHN0cmljdCI7CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBuKGUpIHsgaWYgKCEodGhpcyBpbnN0YW5jZW9mIG4pKSByZXR1cm4gbmV3IG4oZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBzLmFzc2lnbih7IGNodW5rU2l6ZTogMTYzODQsIHdpbmRvd0JpdHM6IDAsIHRvOiAiIiB9LCBlIHx8IHt9KTsgdmFyIHQgPSB0aGlzLm9wdGlvbnM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnJhdyAmJiB0LndpbmRvd0JpdHMgPj0gMCAmJiB0LndpbmRvd0JpdHMgPCAxNiAmJiAodC53aW5kb3dCaXRzID0gLXQud2luZG93Qml0cywgMCA9PT0gdC53aW5kb3dCaXRzICYmICh0LndpbmRvd0JpdHMgPSAtMTUpKSwgISh0LndpbmRvd0JpdHMgPj0gMCAmJiB0LndpbmRvd0JpdHMgPCAxNikgfHwgZSAmJiBlLndpbmRvd0JpdHMgfHwgKHQud2luZG93Qml0cyArPSAzMiksIHQud2luZG93Qml0cyA+IDE1ICYmIHQud2luZG93Qml0cyA8IDQ4ICYmIDAgPT09ICgxNSAmIHQud2luZG93Qml0cykgJiYgKHQud2luZG93Qml0cyB8PSAxNSksIHRoaXMuZXJyID0gMCwgdGhpcy5tc2cgPSAiIiwgdGhpcy5lbmRlZCA9ICExLCB0aGlzLmNodW5rcyA9IFtdLCB0aGlzLnN0cm0gPSBuZXcgZiwgdGhpcy5zdHJtLmF2YWlsX291dCA9IDA7IHZhciByID0gaS5pbmZsYXRlSW5pdDIodGhpcy5zdHJtLCB0LndpbmRvd0JpdHMpOyBpZiAociAhPT0gbC5aX09LKSB0aHJvdyBuZXcgRXJyb3IodVtyXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlciA9IG5ldyBjLCBpLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLCB0aGlzLmhlYWRlcikgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbyhlLCB0KSB7IHZhciByID0gbmV3IG4odCk7IGlmIChyLnB1c2goZSwgITApLCByLmVycikgdGhyb3cgci5tc2cgfHwgdVtyLmVycl07IHJldHVybiByLnJlc3VsdCB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhKGUsIHQpIHsgcmV0dXJuIHQgPSB0IHx8IHt9LCB0LnJhdyA9ICEwLCBvKGUsIHQpIH0gdmFyIGkgPSBlKCIuL3psaWIvaW5mbGF0ZSIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IGUoIi4vdXRpbHMvY29tbW9uIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZSgiLi91dGlscy9zdHJpbmdzIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gZSgiLi96bGliL2NvbnN0YW50cyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGUoIi4vemxpYi9tZXNzYWdlcyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGUoIi4vemxpYi96c3RyZWFtIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gZSgiLi96bGliL2d6aGVhZGVyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzsKICAgICAgICAgICAgICAgICAgICAgICAgbi5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGUsIHQpIHsgdmFyIHIsIG4sIG8sIGEsIHUsIGYsIGMgPSB0aGlzLnN0cm0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHRoaXMub3B0aW9ucy5jaHVua1NpemUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IHRoaXMub3B0aW9ucy5kaWN0aW9uYXJ5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSAhMTsgaWYgKHRoaXMuZW5kZWQpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSB0ID09PSB+fnQgPyB0IDogdCA9PT0gITAgPyBsLlpfRklOSVNIIDogbC5aX05PX0ZMVVNILCAic3RyaW5nIiA9PSB0eXBlb2YgZSA/IGMuaW5wdXQgPSBkLmJpbnN0cmluZzJidWYoZSkgOiAiW29iamVjdCBBcnJheUJ1ZmZlcl0iID09PSBoLmNhbGwoZSkgPyBjLmlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoZSkgOiBjLmlucHV0ID0gZSwgYy5uZXh0X2luID0gMCwgYy5hdmFpbF9pbiA9IGMuaW5wdXQubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8geyBpZiAoMCA9PT0gYy5hdmFpbF9vdXQgJiYgKGMub3V0cHV0ID0gbmV3IHMuQnVmOChwKSwgYy5uZXh0X291dCA9IDAsIGMuYXZhaWxfb3V0ID0gcCksIHIgPSBpLmluZmxhdGUoYywgbC5aX05PX0ZMVVNIKSwgciA9PT0gbC5aX05FRURfRElDVCAmJiB3ICYmIChmID0gInN0cmluZyIgPT0gdHlwZW9mIHcgPyBkLnN0cmluZzJidWYodykgOiAiW29iamVjdCBBcnJheUJ1ZmZlcl0iID09PSBoLmNhbGwodykgPyBuZXcgVWludDhBcnJheSh3KSA6IHcsIHIgPSBpLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgZikpLCByID09PSBsLlpfQlVGX0VSUk9SICYmIG0gPT09ICEwICYmIChyID0gbC5aX09LLCBtID0gITEpLCByICE9PSBsLlpfU1RSRUFNX0VORCAmJiByICE9PSBsLlpfT0spIHJldHVybiB0aGlzLm9uRW5kKHIpLCB0aGlzLmVuZGVkID0gITAsICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubmV4dF9vdXQgJiYgKDAgIT09IGMuYXZhaWxfb3V0ICYmIHIgIT09IGwuWl9TVFJFQU1fRU5EICYmICgwICE9PSBjLmF2YWlsX2luIHx8IG4gIT09IGwuWl9GSU5JU0ggJiYgbiAhPT0gbC5aX1NZTkNfRkxVU0gpIHx8ICgic3RyaW5nIiA9PT0gdGhpcy5vcHRpb25zLnRvID8gKG8gPSBkLnV0Zjhib3JkZXIoYy5vdXRwdXQsIGMubmV4dF9vdXQpLCBhID0gYy5uZXh0X291dCAtIG8sIHUgPSBkLmJ1ZjJzdHJpbmcoYy5vdXRwdXQsIG8pLCBjLm5leHRfb3V0ID0gYSwgYy5hdmFpbF9vdXQgPSBwIC0gYSwgYSAmJiBzLmFycmF5U2V0KGMub3V0cHV0LCBjLm91dHB1dCwgbywgYSwgMCksIHRoaXMub25EYXRhKHUpKSA6IHRoaXMub25EYXRhKHMuc2hyaW5rQnVmKGMub3V0cHV0LCBjLm5leHRfb3V0KSkpKSwgMCA9PT0gYy5hdmFpbF9pbiAmJiAwID09PSBjLmF2YWlsX291dCAmJiAobSA9ICEwKSB9IHdoaWxlICgoYy5hdmFpbF9pbiA+IDAgfHwgMCA9PT0gYy5hdmFpbF9vdXQpICYmIHIgIT09IGwuWl9TVFJFQU1fRU5EKTsgcmV0dXJuIHIgPT09IGwuWl9TVFJFQU1fRU5EICYmIChuID0gbC5aX0ZJTklTSCksIG4gPT09IGwuWl9GSU5JU0ggPyAociA9IGkuaW5mbGF0ZUVuZCh0aGlzLnN0cm0pLCB0aGlzLm9uRW5kKHIpLCB0aGlzLmVuZGVkID0gITAsIHIgPT09IGwuWl9PSykgOiBuICE9PSBsLlpfU1lOQ19GTFVTSCB8fCAodGhpcy5vbkVuZChsLlpfT0spLCBjLmF2YWlsX291dCA9IDAsICEwKSB9LCBuLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbihlKSB7IHRoaXMuY2h1bmtzLnB1c2goZSkgfSwgbi5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbihlKSB7IGUgPT09IGwuWl9PSyAmJiAoInN0cmluZyIgPT09IHRoaXMub3B0aW9ucy50byA/IHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbigiIikgOiB0aGlzLnJlc3VsdCA9IHMuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcykpLCB0aGlzLmNodW5rcyA9IFtdLCB0aGlzLmVyciA9IGUsIHRoaXMubXNnID0gdGhpcy5zdHJtLm1zZyB9LCByLkluZmxhdGUgPSBuLCByLmluZmxhdGUgPSBvLCByLmluZmxhdGVSYXcgPSBhLCByLnVuZ3ppcCA9IG8gfSwgInV0aWxzL2NvbW1vbi5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgInVzZSBzdHJpY3QiOyB2YXIgbiA9ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBVaW50OEFycmF5ICYmICJ1bmRlZmluZWQiICE9IHR5cGVvZiBVaW50MTZBcnJheSAmJiAidW5kZWZpbmVkIiAhPSB0eXBlb2YgSW50MzJBcnJheTsKICAgICAgICAgICAgICAgICAgICAgICAgci5hc3NpZ24gPSBmdW5jdGlvbihlKSB7IGZvciAodmFyIHQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOyB0Lmxlbmd0aDspIHsgdmFyIHIgPSB0LnNoaWZ0KCk7IGlmIChyKSB7IGlmICgib2JqZWN0IiAhPSB0eXBlb2YgcikgdGhyb3cgbmV3IFR5cGVFcnJvcihyICsgIm11c3QgYmUgbm9uLW9iamVjdCIpOyBmb3IgKHZhciBuIGluIHIpIHIuaGFzT3duUHJvcGVydHkobikgJiYgKGVbbl0gPSByW25dKSB9IH0gcmV0dXJuIGUgfSwgci5zaHJpbmtCdWYgPSBmdW5jdGlvbihlLCB0KSB7IHJldHVybiBlLmxlbmd0aCA9PT0gdCA/IGUgOiBlLnN1YmFycmF5ID8gZS5zdWJhcnJheSgwLCB0KSA6IChlLmxlbmd0aCA9IHQsIGUpIH07IHZhciBvID0geyBhcnJheVNldDogZnVuY3Rpb24oZSwgdCwgciwgbiwgbykgeyBpZiAodC5zdWJhcnJheSAmJiBlLnN1YmFycmF5KSByZXR1cm4gdm9pZCBlLnNldCh0LnN1YmFycmF5KHIsIHIgKyBuKSwgbyk7IGZvciAodmFyIGEgPSAwOyBhIDwgbjsgYSsrKSBlW28gKyBhXSA9IHRbciArIGFdIH0sIGZsYXR0ZW5DaHVua3M6IGZ1bmN0aW9uKGUpIHsgdmFyIHQsIHIsIG4sIG8sIGEsIGk7IGZvciAobiA9IDAsIHQgPSAwLCByID0gZS5sZW5ndGg7IHQgPCByOyB0KyspIG4gKz0gZVt0XS5sZW5ndGg7IGZvciAoaSA9IG5ldyBVaW50OEFycmF5KG4pLCBvID0gMCwgdCA9IDAsIHIgPSBlLmxlbmd0aDsgdCA8IHI7IHQrKykgYSA9IGVbdF0sIGkuc2V0KGEsIG8pLCBvICs9IGEubGVuZ3RoOyByZXR1cm4gaSB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0geyBhcnJheVNldDogZnVuY3Rpb24oZSwgdCwgciwgbiwgbykgeyBmb3IgKHZhciBhID0gMDsgYSA8IG47IGErKykgZVtvICsgYV0gPSB0W3IgKyBhXSB9LCBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbihlKSB7IHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGUpIH0gfTsKICAgICAgICAgICAgICAgICAgICAgICAgci5zZXRUeXBlZCA9IGZ1bmN0aW9uKGUpIHsgZSA/IChyLkJ1ZjggPSBVaW50OEFycmF5LCByLkJ1ZjE2ID0gVWludDE2QXJyYXksIHIuQnVmMzIgPSBJbnQzMkFycmF5LCByLmFzc2lnbihyLCBvKSkgOiAoci5CdWY4ID0gQXJyYXksIHIuQnVmMTYgPSBBcnJheSwgci5CdWYzMiA9IEFycmF5LCByLmFzc2lnbihyLCBhKSkgfSwgci5zZXRUeXBlZChuKSB9LCAidXRpbHMvc3RyaW5ncy5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgInVzZSBzdHJpY3QiOwoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbihlLCB0KSB7IGlmICh0IDwgNjU1MzcgJiYgKGUuc3ViYXJyYXkgJiYgaSB8fCAhZS5zdWJhcnJheSAmJiBhKSkgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgby5zaHJpbmtCdWYoZSwgdCkpOyBmb3IgKHZhciByID0gIiIsIG4gPSAwOyBuIDwgdDsgbisrKSByICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZVtuXSk7IHJldHVybiByIH0gdmFyIG8gPSBlKCIuL2NvbW1vbiIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9ICEwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9ICEwOyB0cnkgeyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIFswXSkgfSBjYXRjaCAoZSkgeyBhID0gITEgfSB0cnkgeyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KDEpKSB9IGNhdGNoIChlKSB7IGkgPSAhMSB9IGZvciAodmFyIHMgPSBuZXcgby5CdWY4KDI1NiksIGQgPSAwOyBkIDwgMjU2OyBkKyspIHNbZF0gPSBkID49IDI1MiA/IDYgOiBkID49IDI0OCA/IDUgOiBkID49IDI0MCA/IDQgOiBkID49IDIyNCA/IDMgOiBkID49IDE5MiA/IDIgOiAxOwogICAgICAgICAgICAgICAgICAgICAgICBzWzI1NF0gPSBzWzI1NF0gPSAxLCByLnN0cmluZzJidWYgPSBmdW5jdGlvbihlKSB7IHZhciB0LCByLCBuLCBhLCBpLCBzID0gZS5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IDA7IGZvciAoYSA9IDA7IGEgPCBzOyBhKyspIHIgPSBlLmNoYXJDb2RlQXQoYSksIDU1Mjk2ID09PSAoNjQ1MTIgJiByKSAmJiBhICsgMSA8IHMgJiYgKG4gPSBlLmNoYXJDb2RlQXQoYSArIDEpLCA1NjMyMCA9PT0gKDY0NTEyICYgbikgJiYgKHIgPSA2NTUzNiArIChyIC0gNTUyOTYgPDwgMTApICsgKG4gLSA1NjMyMCksIGErKykpLCBkICs9IHIgPCAxMjggPyAxIDogciA8IDIwNDggPyAyIDogciA8IDY1NTM2ID8gMyA6IDQ7IGZvciAodCA9IG5ldyBvLkJ1ZjgoZCksIGkgPSAwLCBhID0gMDsgaSA8IGQ7IGErKykgciA9IGUuY2hhckNvZGVBdChhKSwgNTUyOTYgPT09ICg2NDUxMiAmIHIpICYmIGEgKyAxIDwgcyAmJiAobiA9IGUuY2hhckNvZGVBdChhICsgMSksIDU2MzIwID09PSAoNjQ1MTIgJiBuKSAmJiAociA9IDY1NTM2ICsgKHIgLSA1NTI5NiA8PCAxMCkgKyAobiAtIDU2MzIwKSwgYSsrKSksIHIgPCAxMjggPyB0W2krK10gPSByIDogciA8IDIwNDggPyAodFtpKytdID0gMTkyIHwgciA+Pj4gNiwgdFtpKytdID0gMTI4IHwgNjMgJiByKSA6IHIgPCA2NTUzNiA/ICh0W2krK10gPSAyMjQgfCByID4+PiAxMiwgdFtpKytdID0gMTI4IHwgciA+Pj4gNiAmIDYzLCB0W2krK10gPSAxMjggfCA2MyAmIHIpIDogKHRbaSsrXSA9IDI0MCB8IHIgPj4+IDE4LCB0W2krK10gPSAxMjggfCByID4+PiAxMiAmIDYzLCB0W2krK10gPSAxMjggfCByID4+PiA2ICYgNjMsIHRbaSsrXSA9IDEyOCB8IDYzICYgcik7IHJldHVybiB0IH0sIHIuYnVmMmJpbnN0cmluZyA9IGZ1bmN0aW9uKGUpIHsgcmV0dXJuIG4oZSwgZS5sZW5ndGgpIH0sIHIuYmluc3RyaW5nMmJ1ZiA9IGZ1bmN0aW9uKGUpIHsgZm9yICh2YXIgdCA9IG5ldyBvLkJ1ZjgoZS5sZW5ndGgpLCByID0gMCwgbiA9IHQubGVuZ3RoOyByIDwgbjsgcisrKSB0W3JdID0gZS5jaGFyQ29kZUF0KHIpOyByZXR1cm4gdCB9LCByLmJ1ZjJzdHJpbmcgPSBmdW5jdGlvbihlLCB0KSB7IHZhciByLCBvLCBhLCBpLCBkID0gdCB8fCBlLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gbmV3IEFycmF5KDIgKiBkKTsgZm9yIChvID0gMCwgciA9IDA7IHIgPCBkOykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSA9IGVbcisrXSwgYSA8IDEyOCkgbFtvKytdID0gYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpID0gc1thXSwgaSA+IDQpIGxbbysrXSA9IDY1NTMzLCByICs9IGkgLSAxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7IGZvciAoYSAmPSAyID09PSBpID8gMzEgOiAzID09PSBpID8gMTUgOiA3OyBpID4gMSAmJiByIDwgZDspIGEgPSBhIDw8IDYgfCA2MyAmIGVbcisrXSwgaS0tOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPiAxID8gbFtvKytdID0gNjU1MzMgOiBhIDwgNjU1MzYgPyBsW28rK10gPSBhIDogKGEgLT0gNjU1MzYsIGxbbysrXSA9IDU1Mjk2IHwgYSA+PiAxMCAmIDEwMjMsIGxbbysrXSA9IDU2MzIwIHwgMTAyMyAmIGEpIH0gcmV0dXJuIG4obCwgbykgfSwgci51dGY4Ym9yZGVyID0gZnVuY3Rpb24oZSwgdCkgeyB2YXIgcjsgZm9yICh0ID0gdCB8fCBlLmxlbmd0aCwgdCA+IGUubGVuZ3RoICYmICh0ID0gZS5sZW5ndGgpLCByID0gdCAtIDE7IHIgPj0gMCAmJiAxMjggPT09ICgxOTIgJiBlW3JdKTspIHItLTsgcmV0dXJuIHIgPCAwID8gdCA6IDAgPT09IHIgPyB0IDogciArIHNbZVtyXV0gPiB0ID8gciA6IHQgfSB9LCAiemxpYi9pbmZsYXRlLmpzIjogZnVuY3Rpb24oZSwgdCwgcikgeyAidXNlIHN0cmljdCI7CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBuKGUpIHsgcmV0dXJuIChlID4+PiAyNCAmIDI1NSkgKyAoZSA+Pj4gOCAmIDY1MjgwKSArICgoNjUyODAgJiBlKSA8PCA4KSArICgoMjU1ICYgZSkgPDwgMjQpIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG8oKSB7IHRoaXMubW9kZSA9IDAsIHRoaXMubGFzdCA9ICExLCB0aGlzLndyYXAgPSAwLCB0aGlzLmhhdmVkaWN0ID0gITEsIHRoaXMuZmxhZ3MgPSAwLCB0aGlzLmRtYXggPSAwLCB0aGlzLmNoZWNrID0gMCwgdGhpcy50b3RhbCA9IDAsIHRoaXMuaGVhZCA9IG51bGwsIHRoaXMud2JpdHMgPSAwLCB0aGlzLndzaXplID0gMCwgdGhpcy53aGF2ZSA9IDAsIHRoaXMud25leHQgPSAwLCB0aGlzLndpbmRvdyA9IG51bGwsIHRoaXMuaG9sZCA9IDAsIHRoaXMuYml0cyA9IDAsIHRoaXMubGVuZ3RoID0gMCwgdGhpcy5vZmZzZXQgPSAwLCB0aGlzLmV4dHJhID0gMCwgdGhpcy5sZW5jb2RlID0gbnVsbCwgdGhpcy5kaXN0Y29kZSA9IG51bGwsIHRoaXMubGVuYml0cyA9IDAsIHRoaXMuZGlzdGJpdHMgPSAwLCB0aGlzLm5jb2RlID0gMCwgdGhpcy5ubGVuID0gMCwgdGhpcy5uZGlzdCA9IDAsIHRoaXMuaGF2ZSA9IDAsIHRoaXMubmV4dCA9IG51bGwsIHRoaXMubGVucyA9IG5ldyB5LkJ1ZjE2KDMyMCksIHRoaXMud29yayA9IG5ldyB5LkJ1ZjE2KDI4OCksIHRoaXMubGVuZHluID0gbnVsbCwgdGhpcy5kaXN0ZHluID0gbnVsbCwgdGhpcy5zYW5lID0gMCwgdGhpcy5iYWNrID0gMCwgdGhpcy53YXMgPSAwIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGEoZSkgeyB2YXIgdDsgcmV0dXJuIGUgJiYgZS5zdGF0ZSA/ICh0ID0gZS5zdGF0ZSwgZS50b3RhbF9pbiA9IGUudG90YWxfb3V0ID0gdC50b3RhbCA9IDAsIGUubXNnID0gIiIsIHQud3JhcCAmJiAoZS5hZGxlciA9IDEgJiB0LndyYXApLCB0Lm1vZGUgPSBJLCB0Lmxhc3QgPSAwLCB0LmhhdmVkaWN0ID0gMCwgdC5kbWF4ID0gMzI3NjgsIHQuaGVhZCA9IG51bGwsIHQuaG9sZCA9IDAsIHQuYml0cyA9IDAsIHQubGVuY29kZSA9IHQubGVuZHluID0gbmV3IHkuQnVmMzIod2UpLCB0LmRpc3Rjb2RlID0gdC5kaXN0ZHluID0gbmV3IHkuQnVmMzIobWUpLCB0LnNhbmUgPSAxLCB0LmJhY2sgPSAtMSwgTykgOiBSIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGkoZSkgeyB2YXIgdDsgcmV0dXJuIGUgJiYgZS5zdGF0ZSA/ICh0ID0gZS5zdGF0ZSwgdC53c2l6ZSA9IDAsIHQud2hhdmUgPSAwLCB0LnduZXh0ID0gMCwgYShlKSkgOiBSIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHMoZSwgdCkgeyB2YXIgciwgbjsgcmV0dXJuIGUgJiYgZS5zdGF0ZSA/IChuID0gZS5zdGF0ZSwgdCA8IDAgPyAociA9IDAsIHQgPSAtdCkgOiAociA9ICh0ID4+IDQpICsgMSwgdCA8IDQ4ICYmICh0ICY9IDE1KSksIHQgJiYgKHQgPCA4IHx8IHQgPiAxNSkgPyBSIDogKG51bGwgIT09IG4ud2luZG93ICYmIG4ud2JpdHMgIT09IHQgJiYgKG4ud2luZG93ID0gbnVsbCksIG4ud3JhcCA9IHIsIG4ud2JpdHMgPSB0LCBpKGUpKSkgOiBSIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGQoZSwgdCkgeyB2YXIgciwgbjsgcmV0dXJuIGUgPyAobiA9IG5ldyBvLCBlLnN0YXRlID0gbiwgbi53aW5kb3cgPSBudWxsLCByID0gcyhlLCB0KSwgciAhPT0gTyAmJiAoZS5zdGF0ZSA9IG51bGwpLCByKSA6IFIgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbChlKSB7IHJldHVybiBkKGUsIHllKSB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB1KGUpIHsgaWYgKGdlKSB7IHZhciB0OyBmb3IgKG0gPSBuZXcgeS5CdWYzMig1MTIpLCBiID0gbmV3IHkuQnVmMzIoMzIpLCB0ID0gMDsgdCA8IDE0NDspIGUubGVuc1t0KytdID0gODsgZm9yICg7IHQgPCAyNTY7KSBlLmxlbnNbdCsrXSA9IDk7IGZvciAoOyB0IDwgMjgwOykgZS5sZW5zW3QrK10gPSA3OyBmb3IgKDsgdCA8IDI4ODspIGUubGVuc1t0KytdID0gODsgZm9yIChVKEUsIGUubGVucywgMCwgMjg4LCBtLCAwLCBlLndvcmssIHsgYml0czogOSB9KSwgdCA9IDA7IHQgPCAzMjspIGUubGVuc1t0KytdID0gNTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVKGssIGUubGVucywgMCwgMzIsIGIsIDAsIGUud29yaywgeyBiaXRzOiA1IH0pLCBnZSA9ICExIH0gZS5sZW5jb2RlID0gbSwgZS5sZW5iaXRzID0gOSwgZS5kaXN0Y29kZSA9IGIsIGUuZGlzdGJpdHMgPSA1IH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGYoZSwgdCwgciwgbikgeyB2YXIgbywgYSA9IGUuc3RhdGU7IHJldHVybiBudWxsID09PSBhLndpbmRvdyAmJiAoYS53c2l6ZSA9IDEgPDwgYS53Yml0cywgYS53bmV4dCA9IDAsIGEud2hhdmUgPSAwLCBhLndpbmRvdyA9IG5ldyB5LkJ1ZjgoYS53c2l6ZSkpLCBuID49IGEud3NpemUgPyAoeS5hcnJheVNldChhLndpbmRvdywgdCwgciAtIGEud3NpemUsIGEud3NpemUsIDApLCBhLnduZXh0ID0gMCwgYS53aGF2ZSA9IGEud3NpemUpIDogKG8gPSBhLndzaXplIC0gYS53bmV4dCwgbyA+IG4gJiYgKG8gPSBuKSwgeS5hcnJheVNldChhLndpbmRvdywgdCwgciAtIG4sIG8sIGEud25leHQpLCBuIC09IG8sIG4gPyAoeS5hcnJheVNldChhLndpbmRvdywgdCwgciAtIG4sIG4sIDApLCBhLnduZXh0ID0gbiwgYS53aGF2ZSA9IGEud3NpemUpIDogKGEud25leHQgKz0gbywgYS53bmV4dCA9PT0gYS53c2l6ZSAmJiAoYS53bmV4dCA9IDApLCBhLndoYXZlIDwgYS53c2l6ZSAmJiAoYS53aGF2ZSArPSBvKSkpLCAwIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGMoZSwgdCkgeyB2YXIgciwgbywgYSwgaSwgcywgZCwgbCwgYywgaCwgcCwgdywgbSwgYiwgd2UsIG1lLCBiZSwgeWUsIGdlLCB2ZSwgQWUsIFVlLCB4ZSwgRWUsIGtlLCBCZSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGUgPSBuZXcgeS5CdWY4KDQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdlID0gWzE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdOyBpZiAoIWUgfHwgIWUuc3RhdGUgfHwgIWUub3V0cHV0IHx8ICFlLmlucHV0ICYmIDAgIT09IGUuYXZhaWxfaW4pIHJldHVybiBSOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGUuc3RhdGUsIHIubW9kZSA9PT0gaiAmJiAoci5tb2RlID0gWCksIHMgPSBlLm5leHRfb3V0LCBhID0gZS5vdXRwdXQsIGwgPSBlLmF2YWlsX291dCwgaSA9IGUubmV4dF9pbiwgbyA9IGUuaW5wdXQsIGQgPSBlLmF2YWlsX2luLCBjID0gci5ob2xkLCBoID0gci5iaXRzLCBwID0gZCwgdyA9IGwsIHhlID0gTzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGU6IGZvciAoOzspIHN3aXRjaCAoci5tb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBJOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gci53cmFwKSB7IHIubW9kZSA9IFg7IGJyZWFrIH0gZm9yICg7IGggPCAxNjspIHsgaWYgKDAgPT09IGQpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLS0sIGMgKz0gb1tpKytdIDw8IGgsIGggKz0gOCB9IGlmICgyICYgci53cmFwICYmIDM1NjE1ID09PSBjKSB7IHIuY2hlY2sgPSAwLCBMZVswXSA9IDI1NSAmIGMsIExlWzFdID0gYyA+Pj4gOCAmIDI1NSwgci5jaGVjayA9IHYoci5jaGVjaywgTGUsIDIsIDApLCBjID0gMCwgaCA9IDAsIHIubW9kZSA9IFA7IGJyZWFrIH0gaWYgKHIuZmxhZ3MgPSAwLCByLmhlYWQgJiYgKHIuaGVhZC5kb25lID0gITEpLCAhKDEgJiByLndyYXApIHx8ICgoKDI1NSAmIGMpIDw8IDgpICsgKGMgPj4gOCkpICUgMzEpIHsgZS5tc2cgPSAiaW5jb3JyZWN0IGhlYWRlciBjaGVjayIsIHIubW9kZSA9IGNlOyBicmVhayB9IGlmICgoMTUgJiBjKSAhPT0gVCkgeyBlLm1zZyA9ICJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCIsIHIubW9kZSA9IGNlOyBicmVhayB9IGlmIChjID4+Pj0gNCwgaCAtPSA0LCBVZSA9ICgxNSAmIGMpICsgOCwgMCA9PT0gci53Yml0cykgci53Yml0cyA9IFVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChVZSA+IHIud2JpdHMpIHsgZS5tc2cgPSAiaW52YWxpZCB3aW5kb3cgc2l6ZSIsIHIubW9kZSA9IGNlOyBicmVhayB9IHIuZG1heCA9IDEgPDwgVWUsIGUuYWRsZXIgPSByLmNoZWNrID0gMSwgci5tb2RlID0gNTEyICYgYyA/IEcgOiBqLCBjID0gMCwgaCA9IDA7IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGggPCAxNjspIHsgaWYgKDAgPT09IGQpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLS0sIGMgKz0gb1tpKytdIDw8IGgsIGggKz0gOCB9IGlmIChyLmZsYWdzID0gYywgKDI1NSAmIHIuZmxhZ3MpICE9PSBUKSB7IGUubXNnID0gInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kIiwgci5tb2RlID0gY2U7IGJyZWFrIH0gaWYgKDU3MzQ0ICYgci5mbGFncykgeyBlLm1zZyA9ICJ1bmtub3duIGhlYWRlciBmbGFncyBzZXQiLCByLm1vZGUgPSBjZTsgYnJlYWsgfSByLmhlYWQgJiYgKHIuaGVhZC50ZXh0ID0gYyA+PiA4ICYgMSksIDUxMiAmIHIuZmxhZ3MgJiYgKExlWzBdID0gMjU1ICYgYywgTGVbMV0gPSBjID4+PiA4ICYgMjU1LCByLmNoZWNrID0gdihyLmNoZWNrLCBMZSwgMiwgMCkpLCBjID0gMCwgaCA9IDAsIHIubW9kZSA9IEQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaCA8IDMyOykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQtLSwgYyArPSBvW2krK10gPDwgaCwgaCArPSA4IH0gci5oZWFkICYmIChyLmhlYWQudGltZSA9IGMpLCA1MTIgJiByLmZsYWdzICYmIChMZVswXSA9IDI1NSAmIGMsIExlWzFdID0gYyA+Pj4gOCAmIDI1NSwgTGVbMl0gPSBjID4+PiAxNiAmIDI1NSwgTGVbM10gPSBjID4+PiAyNCAmIDI1NSwgci5jaGVjayA9IHYoci5jaGVjaywgTGUsIDQsIDApKSwgYyA9IDAsIGggPSAwLCByLm1vZGUgPSBGOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGggPCAxNjspIHsgaWYgKDAgPT09IGQpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLS0sIGMgKz0gb1tpKytdIDw8IGgsIGggKz0gOCB9IHIuaGVhZCAmJiAoci5oZWFkLnhmbGFncyA9IDI1NSAmIGMsIHIuaGVhZC5vcyA9IGMgPj4gOCksIDUxMiAmIHIuZmxhZ3MgJiYgKExlWzBdID0gMjU1ICYgYywgTGVbMV0gPSBjID4+PiA4ICYgMjU1LCByLmNoZWNrID0gdihyLmNoZWNrLCBMZSwgMiwgMCkpLCBjID0gMCwgaCA9IDAsIHIubW9kZSA9IHE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMTAyNCAmIHIuZmxhZ3MpIHsgZm9yICg7IGggPCAxNjspIHsgaWYgKDAgPT09IGQpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC0tLCBjICs9IG9baSsrXSA8PCBoLCBoICs9IDggfSByLmxlbmd0aCA9IGMsIHIuaGVhZCAmJiAoci5oZWFkLmV4dHJhX2xlbiA9IGMpLCA1MTIgJiByLmZsYWdzICYmIChMZVswXSA9IDI1NSAmIGMsIExlWzFdID0gYyA+Pj4gOCAmIDI1NSwgci5jaGVjayA9IHYoci5jaGVjaywgTGUsIDIsIDApKSwgYyA9IDAsIGggPSAwIH0gZWxzZSByLmhlYWQgJiYgKHIuaGVhZC5leHRyYSA9IG51bGwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLm1vZGUgPSBWOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEwMjQgJiByLmZsYWdzICYmIChtID0gci5sZW5ndGgsIG0gPiBkICYmIChtID0gZCksIG0gJiYgKHIuaGVhZCAmJiAoVWUgPSByLmhlYWQuZXh0cmFfbGVuIC0gci5sZW5ndGgsIHIuaGVhZC5leHRyYSB8fCAoci5oZWFkLmV4dHJhID0gbmV3IEFycmF5KHIuaGVhZC5leHRyYV9sZW4pKSwgeS5hcnJheVNldChyLmhlYWQuZXh0cmEsIG8sIGksIG0sIFVlKSksIDUxMiAmIHIuZmxhZ3MgJiYgKHIuY2hlY2sgPSB2KHIuY2hlY2ssIG8sIG0sIGkpKSwgZCAtPSBtLCBpICs9IG0sIHIubGVuZ3RoIC09IG0pLCByLmxlbmd0aCkpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIubGVuZ3RoID0gMCwgci5tb2RlID0gWjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFo6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgyMDQ4ICYgci5mbGFncykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gVWUgPSBvW2kgKyBtKytdLCByLmhlYWQgJiYgVWUgJiYgci5sZW5ndGggPCA2NTUzNiAmJiAoci5oZWFkLm5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShVZSkpOyB3aGlsZSAoVWUgJiYgbSA8IGQpOyBpZiAoNTEyICYgci5mbGFncyAmJiAoci5jaGVjayA9IHYoci5jaGVjaywgbywgbSwgaSkpLCBkIC09IG0sIGkgKz0gbSwgVWUpIGJyZWFrIGUgfSBlbHNlIHIuaGVhZCAmJiAoci5oZWFkLm5hbWUgPSBudWxsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5sZW5ndGggPSAwLCByLm1vZGUgPSBZOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgWToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQwOTYgJiByLmZsYWdzKSB7IGlmICgwID09PSBkKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyBVZSA9IG9baSArIG0rK10sIHIuaGVhZCAmJiBVZSAmJiByLmxlbmd0aCA8IDY1NTM2ICYmIChyLmhlYWQuY29tbWVudCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFVlKSk7IHdoaWxlIChVZSAmJiBtIDwgZCk7IGlmICg1MTIgJiByLmZsYWdzICYmIChyLmNoZWNrID0gdihyLmNoZWNrLCBvLCBtLCBpKSksIGQgLT0gbSwgaSArPSBtLCBVZSkgYnJlYWsgZSB9IGVsc2Ugci5oZWFkICYmIChyLmhlYWQuY29tbWVudCA9IG51bGwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLm1vZGUgPSB6OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgejoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDUxMiAmIHIuZmxhZ3MpIHsgZm9yICg7IGggPCAxNjspIHsgaWYgKDAgPT09IGQpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC0tLCBjICs9IG9baSsrXSA8PCBoLCBoICs9IDggfSBpZiAoYyAhPT0gKDY1NTM1ICYgci5jaGVjaykpIHsgZS5tc2cgPSAiaGVhZGVyIGNyYyBtaXNtYXRjaCIsIHIubW9kZSA9IGNlOyBicmVhayB9IGMgPSAwLCBoID0gMCB9IHIuaGVhZCAmJiAoci5oZWFkLmhjcmMgPSByLmZsYWdzID4+IDkgJiAxLCByLmhlYWQuZG9uZSA9ICEwKSwgZS5hZGxlciA9IHIuY2hlY2sgPSAwLCByLm1vZGUgPSBqOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBoIDwgMzI7KSB7IGlmICgwID09PSBkKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC0tLCBjICs9IG9baSsrXSA8PCBoLCBoICs9IDggfSBlLmFkbGVyID0gci5jaGVjayA9IG4oYyksIGMgPSAwLCBoID0gMCwgci5tb2RlID0gSjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEo6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSByLmhhdmVkaWN0KSByZXR1cm4gZS5uZXh0X291dCA9IHMsIGUuYXZhaWxfb3V0ID0gbCwgZS5uZXh0X2luID0gaSwgZS5hdmFpbF9pbiA9IGQsIHIuaG9sZCA9IGMsIHIuYml0cyA9IGgsIE47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuYWRsZXIgPSByLmNoZWNrID0gMSwgci5tb2RlID0gajsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGo6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ID09PSBMIHx8IHQgPT09IFcpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBYOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoci5sYXN0KSB7IGMgPj4+PSA3ICYgaCwgaCAtPSA3ICYgaCwgci5tb2RlID0gbGU7IGJyZWFrIH0gZm9yICg7IGggPCAzOykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQtLSwgYyArPSBvW2krK10gPDwgaCwgaCArPSA4IH0gc3dpdGNoIChyLmxhc3QgPSAxICYgYywgYyA+Pj49IDEsIGggLT0gMSwgMyAmIGMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLm1vZGUgPSBLOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodShyKSwgci5tb2RlID0gcmUsIHQgPT09IFcpIHsgYyA+Pj49IDIsIGggLT0gMjsgYnJlYWsgZSB9IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIubW9kZSA9ICQ7IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubXNnID0gImludmFsaWQgYmxvY2sgdHlwZSIsIHIubW9kZSA9IGNlIH0gYyA+Pj49IDIsIGggLT0gMjsgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBLOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGMgPj4+PSA3ICYgaCwgaCAtPSA3ICYgaDsgaCA8IDMyOykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQtLSwgYyArPSBvW2krK10gPDwgaCwgaCArPSA4IH0gaWYgKCg2NTUzNSAmIGMpICE9PSAoYyA+Pj4gMTYgXiA2NTUzNSkpIHsgZS5tc2cgPSAiaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3RocyIsIHIubW9kZSA9IGNlOyBicmVhayB9IGlmIChyLmxlbmd0aCA9IDY1NTM1ICYgYywgYyA9IDAsIGggPSAwLCByLm1vZGUgPSBRLCB0ID09PSBXKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5tb2RlID0gXzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF86CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtID0gci5sZW5ndGgpIHsgaWYgKG0gPiBkICYmIChtID0gZCksIG0gPiBsICYmIChtID0gbCksIDAgPT09IG0pIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5LmFycmF5U2V0KGEsIG8sIGksIG0sIHMpLCBkIC09IG0sIGkgKz0gbSwgbCAtPSBtLCBzICs9IG0sIHIubGVuZ3RoIC09IG07IGJyZWFrIH0gci5tb2RlID0gajsgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaCA8IDE0OykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQtLSwgYyArPSBvW2krK10gPDwgaCwgaCArPSA4IH0gaWYgKHIubmxlbiA9ICgzMSAmIGMpICsgMjU3LCBjID4+Pj0gNSwgaCAtPSA1LCByLm5kaXN0ID0gKDMxICYgYykgKyAxLCBjID4+Pj0gNSwgaCAtPSA1LCByLm5jb2RlID0gKDE1ICYgYykgKyA0LCBjID4+Pj0gNCwgaCAtPSA0LCByLm5sZW4gPiAyODYgfHwgci5uZGlzdCA+IDMwKSB7IGUubXNnID0gInRvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzIiwgci5tb2RlID0gY2U7IGJyZWFrIH0gci5oYXZlID0gMCwgci5tb2RlID0gZWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBlZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IHIuaGF2ZSA8IHIubmNvZGU7KSB7IGZvciAoOyBoIDwgMzspIHsgaWYgKDAgPT09IGQpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC0tLCBjICs9IG9baSsrXSA8PCBoLCBoICs9IDggfSByLmxlbnNbV2Vbci5oYXZlKytdXSA9IDcgJiBjLCBjID4+Pj0gMywgaCAtPSAzIH0gZm9yICg7IHIuaGF2ZSA8IDE5Oykgci5sZW5zW1dlW3IuaGF2ZSsrXV0gPSAwOyBpZiAoci5sZW5jb2RlID0gci5sZW5keW4sIHIubGVuYml0cyA9IDcsIEVlID0geyBiaXRzOiByLmxlbmJpdHMgfSwgeGUgPSBVKHgsIHIubGVucywgMCwgMTksIHIubGVuY29kZSwgMCwgci53b3JrLCBFZSksIHIubGVuYml0cyA9IEVlLmJpdHMsIHhlKSB7IGUubXNnID0gImludmFsaWQgY29kZSBsZW5ndGhzIHNldCIsIHIubW9kZSA9IGNlOyBicmVhayB9IHIuaGF2ZSA9IDAsIHIubW9kZSA9IHRlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgdGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyByLmhhdmUgPCByLm5sZW4gKyByLm5kaXN0OykgeyBmb3IgKDsgQmUgPSByLmxlbmNvZGVbYyAmICgxIDw8IHIubGVuYml0cykgLSAxXSwgbWUgPSBCZSA+Pj4gMjQsIGJlID0gQmUgPj4+IDE2ICYgMjU1LCB5ZSA9IDY1NTM1ICYgQmUsICEobWUgPD0gaCk7KSB7IGlmICgwID09PSBkKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQtLSwgYyArPSBvW2krK10gPDwgaCwgaCArPSA4IH0gaWYgKHllIDwgMTYpIGMgPj4+PSBtZSwgaCAtPSBtZSwgci5sZW5zW3IuaGF2ZSsrXSA9IHllOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7IGlmICgxNiA9PT0geWUpIHsgZm9yIChrZSA9IG1lICsgMjsgaCA8IGtlOykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQtLSwgYyArPSBvW2krK10gPDwgaCwgaCArPSA4IH0gaWYgKGMgPj4+PSBtZSwgaCAtPSBtZSwgMCA9PT0gci5oYXZlKSB7IGUubXNnID0gImludmFsaWQgYml0IGxlbmd0aCByZXBlYXQiLCByLm1vZGUgPSBjZTsgYnJlYWsgfSBVZSA9IHIubGVuc1tyLmhhdmUgLSAxXSwgbSA9IDMgKyAoMyAmIGMpLCBjID4+Pj0gMiwgaCAtPSAyIH0gZWxzZSBpZiAoMTcgPT09IHllKSB7IGZvciAoa2UgPSBtZSArIDM7IGggPCBrZTspIHsgaWYgKDAgPT09IGQpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLS0sIGMgKz0gb1tpKytdIDw8IGgsIGggKz0gOCB9IGMgPj4+PSBtZSwgaCAtPSBtZSwgVWUgPSAwLCBtID0gMyArICg3ICYgYyksIGMgPj4+PSAzLCBoIC09IDMgfSBlbHNlIHsgZm9yIChrZSA9IG1lICsgNzsgaCA8IGtlOykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQtLSwgYyArPSBvW2krK10gPDwgaCwgaCArPSA4IH0gYyA+Pj49IG1lLCBoIC09IG1lLCBVZSA9IDAsIG0gPSAxMSArICgxMjcgJiBjKSwgYyA+Pj49IDcsIGggLT0gNyB9IGlmIChyLmhhdmUgKyBtID4gci5ubGVuICsgci5uZGlzdCkgeyBlLm1zZyA9ICJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0Iiwgci5tb2RlID0gY2U7IGJyZWFrIH0gZm9yICg7IG0tLTspIHIubGVuc1tyLmhhdmUrK10gPSBVZSB9IH0gaWYgKHIubW9kZSA9PT0gY2UpIGJyZWFrOyBpZiAoMCA9PT0gci5sZW5zWzI1Nl0pIHsgZS5tc2cgPSAiaW52YWxpZCBjb2RlIC0tIG1pc3NpbmcgZW5kLW9mLWJsb2NrIiwgci5tb2RlID0gY2U7IGJyZWFrIH0gaWYgKHIubGVuYml0cyA9IDksIEVlID0geyBiaXRzOiByLmxlbmJpdHMgfSwgeGUgPSBVKEUsIHIubGVucywgMCwgci5ubGVuLCByLmxlbmNvZGUsIDAsIHIud29yaywgRWUpLCByLmxlbmJpdHMgPSBFZS5iaXRzLCB4ZSkgeyBlLm1zZyA9ICJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RocyBzZXQiLCByLm1vZGUgPSBjZTsgYnJlYWsgfSBpZiAoci5kaXN0Yml0cyA9IDYsIHIuZGlzdGNvZGUgPSByLmRpc3RkeW4sIEVlID0geyBiaXRzOiByLmRpc3RiaXRzIH0sIHhlID0gVShrLCByLmxlbnMsIHIubmxlbiwgci5uZGlzdCwgci5kaXN0Y29kZSwgMCwgci53b3JrLCBFZSksIHIuZGlzdGJpdHMgPSBFZS5iaXRzLCB4ZSkgeyBlLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlcyBzZXQiLCByLm1vZGUgPSBjZTsgYnJlYWsgfSBpZiAoci5tb2RlID0gcmUsIHQgPT09IFcpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSByZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5tb2RlID0gbmU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBuZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgPj0gNiAmJiBsID49IDI1OCkgeyBlLm5leHRfb3V0ID0gcywgZS5hdmFpbF9vdXQgPSBsLCBlLm5leHRfaW4gPSBpLCBlLmF2YWlsX2luID0gZCwgci5ob2xkID0gYywgci5iaXRzID0gaCwgQShlLCB3KSwgcyA9IGUubmV4dF9vdXQsIGEgPSBlLm91dHB1dCwgbCA9IGUuYXZhaWxfb3V0LCBpID0gZS5uZXh0X2luLCBvID0gZS5pbnB1dCwgZCA9IGUuYXZhaWxfaW4sIGMgPSByLmhvbGQsIGggPSByLmJpdHMsIHIubW9kZSA9PT0gaiAmJiAoci5iYWNrID0gLTEpOyBicmVhayB9IGZvciAoci5iYWNrID0gMDsgQmUgPSByLmxlbmNvZGVbYyAmICgxIDw8IHIubGVuYml0cykgLSAxXSwgbWUgPSBCZSA+Pj4gMjQsIGJlID0gQmUgPj4+IDE2ICYgMjU1LCB5ZSA9IDY1NTM1ICYgQmUsICEobWUgPD0gaCk7KSB7IGlmICgwID09PSBkKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC0tLCBjICs9IG9baSsrXSA8PCBoLCBoICs9IDggfSBpZiAoYmUgJiYgMCA9PT0gKDI0MCAmIGJlKSkgeyBmb3IgKGdlID0gbWUsIHZlID0gYmUsIEFlID0geWU7IEJlID0gci5sZW5jb2RlW0FlICsgKChjICYgKDEgPDwgZ2UgKyB2ZSkgLSAxKSA+PiBnZSldLCBtZSA9IEJlID4+PiAyNCwgYmUgPSBCZSA+Pj4gMTYgJiAyNTUsIHllID0gNjU1MzUgJiBCZSwgIShnZSArIG1lIDw9IGgpOykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLS0sIGMgKz0gb1tpKytdIDw8IGgsIGggKz0gOCB9IGMgPj4+PSBnZSwgaCAtPSBnZSwgci5iYWNrICs9IGdlIH0gaWYgKGMgPj4+PSBtZSwgaCAtPSBtZSwgci5iYWNrICs9IG1lLCByLmxlbmd0aCA9IHllLCAwID09PSBiZSkgeyByLm1vZGUgPSBkZTsgYnJlYWsgfSBpZiAoMzIgJiBiZSkgeyByLmJhY2sgPSAtMSwgci5tb2RlID0gajsgYnJlYWsgfSBpZiAoNjQgJiBiZSkgeyBlLm1zZyA9ICJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUiLCByLm1vZGUgPSBjZTsgYnJlYWsgfSByLmV4dHJhID0gMTUgJiBiZSwgci5tb2RlID0gb2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBvZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIuZXh0cmEpIHsgZm9yIChrZSA9IHIuZXh0cmE7IGggPCBrZTspIHsgaWYgKDAgPT09IGQpIGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC0tLCBjICs9IG9baSsrXSA8PCBoLCBoICs9IDggfSByLmxlbmd0aCArPSBjICYgKDEgPDwgci5leHRyYSkgLSAxLCBjID4+Pj0gci5leHRyYSwgaCAtPSByLmV4dHJhLCByLmJhY2sgKz0gci5leHRyYSB9IHIud2FzID0gci5sZW5ndGgsIHIubW9kZSA9IGFlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBCZSA9IHIuZGlzdGNvZGVbYyAmICgxIDw8IHIuZGlzdGJpdHMpIC0gMV0sIG1lID0gQmUgPj4+IDI0LCBiZSA9IEJlID4+PiAxNiAmIDI1NSwgeWUgPSA2NTUzNSAmIEJlLCAhKG1lIDw9IGgpOykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQtLSwgYyArPSBvW2krK10gPDwgaCwgaCArPSA4IH0gaWYgKDAgPT09ICgyNDAgJiBiZSkpIHsgZm9yIChnZSA9IG1lLCB2ZSA9IGJlLCBBZSA9IHllOyBCZSA9IHIuZGlzdGNvZGVbQWUgKyAoKGMgJiAoMSA8PCBnZSArIHZlKSAtIDEpID4+IGdlKV0sIG1lID0gQmUgPj4+IDI0LCBiZSA9IEJlID4+PiAxNiAmIDI1NSwgeWUgPSA2NTUzNSAmIEJlLCAhKGdlICsgbWUgPD0gaCk7KSB7IGlmICgwID09PSBkKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQtLSwgYyArPSBvW2krK10gPDwgaCwgaCArPSA4IH0gYyA+Pj49IGdlLCBoIC09IGdlLCByLmJhY2sgKz0gZ2UgfSBpZiAoYyA+Pj49IG1lLCBoIC09IG1lLCByLmJhY2sgKz0gbWUsIDY0ICYgYmUpIHsgZS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSBjb2RlIiwgci5tb2RlID0gY2U7IGJyZWFrIH0gci5vZmZzZXQgPSB5ZSwgci5leHRyYSA9IDE1ICYgYmUsIHIubW9kZSA9IGllOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgaWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyLmV4dHJhKSB7IGZvciAoa2UgPSByLmV4dHJhOyBoIDwga2U7KSB7IGlmICgwID09PSBkKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQtLSwgYyArPSBvW2krK10gPDwgaCwgaCArPSA4IH0gci5vZmZzZXQgKz0gYyAmICgxIDw8IHIuZXh0cmEpIC0gMSwgYyA+Pj49IHIuZXh0cmEsIGggLT0gci5leHRyYSwgci5iYWNrICs9IHIuZXh0cmEgfSBpZiAoci5vZmZzZXQgPiByLmRtYXgpIHsgZS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2siLCByLm1vZGUgPSBjZTsgYnJlYWsgfSByLm1vZGUgPSBzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbCkgYnJlYWsgZTsgaWYgKG0gPSB3IC0gbCwgci5vZmZzZXQgPiBtKSB7IGlmIChtID0gci5vZmZzZXQgLSBtLCBtID4gci53aGF2ZSAmJiByLnNhbmUpIHsgZS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2siLCByLm1vZGUgPSBjZTsgYnJlYWsgfSBtID4gci53bmV4dCA/IChtIC09IHIud25leHQsIGIgPSByLndzaXplIC0gbSkgOiBiID0gci53bmV4dCAtIG0sIG0gPiByLmxlbmd0aCAmJiAobSA9IHIubGVuZ3RoKSwgd2UgPSByLndpbmRvdyB9IGVsc2Ugd2UgPSBhLCBiID0gcyAtIHIub2Zmc2V0LCBtID0gci5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPiBsICYmIChtID0gbCksIGwgLT0gbSwgci5sZW5ndGggLT0gbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gYVtzKytdID0gd2VbYisrXTsgd2hpbGUgKC0tbSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgPT09IHIubGVuZ3RoICYmIChyLm1vZGUgPSBuZSk7IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBsKSBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW3MrK10gPSByLmxlbmd0aCwgbC0tLCByLm1vZGUgPSBuZTsgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBsZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIud3JhcCkgeyBmb3IgKDsgaCA8IDMyOykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLS0sIGMgfD0gb1tpKytdIDw8IGgsIGggKz0gOCB9IGlmICh3IC09IGwsIGUudG90YWxfb3V0ICs9IHcsIHIudG90YWwgKz0gdywgdyAmJiAoZS5hZGxlciA9IHIuY2hlY2sgPSByLmZsYWdzID8gdihyLmNoZWNrLCBhLCB3LCBzIC0gdykgOiBnKHIuY2hlY2ssIGEsIHcsIHMgLSB3KSksIHcgPSBsLCAoci5mbGFncyA/IGMgOiBuKGMpKSAhPT0gci5jaGVjaykgeyBlLm1zZyA9ICJpbmNvcnJlY3QgZGF0YSBjaGVjayIsIHIubW9kZSA9IGNlOyBicmVhayB9IGMgPSAwLCBoID0gMCB9IHIubW9kZSA9IHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgdWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyLndyYXAgJiYgci5mbGFncykgeyBmb3IgKDsgaCA8IDMyOykgeyBpZiAoMCA9PT0gZCkgYnJlYWsgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLS0sIGMgKz0gb1tpKytdIDw8IGgsIGggKz0gOCB9IGlmIChjICE9PSAoNDI5NDk2NzI5NSAmIHIudG90YWwpKSB7IGUubXNnID0gImluY29ycmVjdCBsZW5ndGggY2hlY2siLCByLm1vZGUgPSBjZTsgYnJlYWsgfSBjID0gMCwgaCA9IDAgfSByLm1vZGUgPSBmZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGZlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ZSA9IE07IGJyZWFrIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBjZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeGUgPSBDOyBicmVhayBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgaGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBIOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgcGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUubmV4dF9vdXQgPSBzLCBlLmF2YWlsX291dCA9IGwsIGUubmV4dF9pbiA9IGksIGUuYXZhaWxfaW4gPSBkLCByLmhvbGQgPSBjLCByLmJpdHMgPSBoLCAoci53c2l6ZSB8fCB3ICE9PSBlLmF2YWlsX291dCAmJiByLm1vZGUgPCBjZSAmJiAoci5tb2RlIDwgbGUgfHwgdCAhPT0gQikpICYmIGYoZSwgZS5vdXRwdXQsIGUubmV4dF9vdXQsIHcgLSBlLmF2YWlsX291dCkgPyAoci5tb2RlID0gaGUsIEgpIDogKHAgLT0gZS5hdmFpbF9pbiwgdyAtPSBlLmF2YWlsX291dCwgZS50b3RhbF9pbiArPSBwLCBlLnRvdGFsX291dCArPSB3LCByLnRvdGFsICs9IHcsIHIud3JhcCAmJiB3ICYmIChlLmFkbGVyID0gci5jaGVjayA9IHIuZmxhZ3MgPyB2KHIuY2hlY2ssIGEsIHcsIGUubmV4dF9vdXQgLSB3KSA6IGcoci5jaGVjaywgYSwgdywgZS5uZXh0X291dCAtIHcpKSwgZS5kYXRhX3R5cGUgPSByLmJpdHMgKyAoci5sYXN0ID8gNjQgOiAwKSArIChyLm1vZGUgPT09IGogPyAxMjggOiAwKSArIChyLm1vZGUgPT09IHJlIHx8IHIubW9kZSA9PT0gUSA/IDI1NiA6IDApLCAoMCA9PT0gcCAmJiAwID09PSB3IHx8IHQgPT09IEIpICYmIHhlID09PSBPICYmICh4ZSA9IFMpLCB4ZSkgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaChlKSB7IGlmICghZSB8fCAhZS5zdGF0ZSkgcmV0dXJuIFI7IHZhciB0ID0gZS5zdGF0ZTsgcmV0dXJuIHQud2luZG93ICYmICh0LndpbmRvdyA9IG51bGwpLCBlLnN0YXRlID0gbnVsbCwgTyB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwKGUsIHQpIHsgdmFyIHI7IHJldHVybiBlICYmIGUuc3RhdGUgPyAociA9IGUuc3RhdGUsIDAgPT09ICgyICYgci53cmFwKSA/IFIgOiAoci5oZWFkID0gdCwgdC5kb25lID0gITEsIE8pKSA6IFIgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdyhlLCB0KSB7IHZhciByLCBuLCBvLCBhID0gdC5sZW5ndGg7IHJldHVybiBlICYmIGUuc3RhdGUgPyAociA9IGUuc3RhdGUsIDAgIT09IHIud3JhcCAmJiByLm1vZGUgIT09IEogPyBSIDogci5tb2RlID09PSBKICYmIChuID0gMSwgbiA9IGcobiwgdCwgYSwgMCksIG4gIT09IHIuY2hlY2spID8gQyA6IChvID0gZihlLCB0LCBhLCBhKSkgPyAoci5tb2RlID0gaGUsIEgpIDogKHIuaGF2ZWRpY3QgPSAxLCBPKSkgOiBSIH0gdmFyIG0sIGIsIHkgPSBlKCIuLi91dGlscy9jb21tb24iKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBlKCIuL2FkbGVyMzIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBlKCIuL2NyYzMyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBID0gZSgiLi9pbmZmYXN0IiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVID0gZSgiLi9pbmZ0cmVlcyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFID0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQiA9IDQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMID0gNSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFcgPSA2LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgTyA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNID0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE4gPSAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgUiA9IC0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQyA9IC0zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgSCA9IC00LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgUyA9IC01LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgVCA9IDgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJID0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFAgPSAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgRCA9IDMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGID0gNCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSA1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgViA9IDYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBaID0gNywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFkgPSA4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeiA9IDksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHID0gMTAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKID0gMTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gMTIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBYID0gMTMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBLID0gMTQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBRID0gMTUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfID0gMTYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkID0gMTcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZSA9IDE4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGUgPSAxOSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlID0gMjAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZSA9IDIxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2UgPSAyMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFlID0gMjMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZSA9IDI0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2UgPSAyNSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlID0gMjYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZSA9IDI3LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdWUgPSAyOCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlID0gMjksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZSA9IDMwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGUgPSAzMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlID0gMzIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZSA9IDg1MiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lID0gNTkyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgPSAxNSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllID0gYmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZSA9ICEwOwogICAgICAgICAgICAgICAgICAgICAgICByLmluZmxhdGVSZXNldCA9IGksIHIuaW5mbGF0ZVJlc2V0MiA9IHMsIHIuaW5mbGF0ZVJlc2V0S2VlcCA9IGEsIHIuaW5mbGF0ZUluaXQgPSBsLCByLmluZmxhdGVJbml0MiA9IGQsIHIuaW5mbGF0ZSA9IGMsIHIuaW5mbGF0ZUVuZCA9IGgsIHIuaW5mbGF0ZUdldEhlYWRlciA9IHAsIHIuaW5mbGF0ZVNldERpY3Rpb25hcnkgPSB3LCByLmluZmxhdGVJbmZvID0gInBha28gaW5mbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCkiIH0sICJ6bGliL2NvbnN0YW50cy5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgInVzZSBzdHJpY3QiOwogICAgICAgICAgICAgICAgICAgICAgICB0LmV4cG9ydHMgPSB7IFpfTk9fRkxVU0g6IDAsIFpfUEFSVElBTF9GTFVTSDogMSwgWl9TWU5DX0ZMVVNIOiAyLCBaX0ZVTExfRkxVU0g6IDMsIFpfRklOSVNIOiA0LCBaX0JMT0NLOiA1LCBaX1RSRUVTOiA2LCBaX09LOiAwLCBaX1NUUkVBTV9FTkQ6IDEsIFpfTkVFRF9ESUNUOiAyLCBaX0VSUk5POiAtMSwgWl9TVFJFQU1fRVJST1I6IC0yLCBaX0RBVEFfRVJST1I6IC0zLCBaX0JVRl9FUlJPUjogLTUsIFpfTk9fQ09NUFJFU1NJT046IDAsIFpfQkVTVF9TUEVFRDogMSwgWl9CRVNUX0NPTVBSRVNTSU9OOiA5LCBaX0RFRkFVTFRfQ09NUFJFU1NJT046IC0xLCBaX0ZJTFRFUkVEOiAxLCBaX0hVRkZNQU5fT05MWTogMiwgWl9STEU6IDMsIFpfRklYRUQ6IDQsIFpfREVGQVVMVF9TVFJBVEVHWTogMCwgWl9CSU5BUlk6IDAsIFpfVEVYVDogMSwgWl9VTktOT1dOOiAyLCBaX0RFRkxBVEVEOiA4IH0gfSwgInpsaWIvbWVzc2FnZXMuanMiOiBmdW5jdGlvbihlLCB0LCByKSB7ICJ1c2Ugc3RyaWN0IjsKICAgICAgICAgICAgICAgICAgICAgICAgdC5leHBvcnRzID0geyAyOiAibmVlZCBkaWN0aW9uYXJ5IiwgMTogInN0cmVhbSBlbmQiLCAwOiAiIiwgIi0xIjogImZpbGUgZXJyb3IiLCAiLTIiOiAic3RyZWFtIGVycm9yIiwgIi0zIjogImRhdGEgZXJyb3IiLCAiLTQiOiAiaW5zdWZmaWNpZW50IG1lbW9yeSIsICItNSI6ICJidWZmZXIgZXJyb3IiLCAiLTYiOiAiaW5jb21wYXRpYmxlIHZlcnNpb24iIH0gfSwgInpsaWIvenN0cmVhbS5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgInVzZSBzdHJpY3QiOwoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbigpIHsgdGhpcy5pbnB1dCA9IG51bGwsIHRoaXMubmV4dF9pbiA9IDAsIHRoaXMuYXZhaWxfaW4gPSAwLCB0aGlzLnRvdGFsX2luID0gMCwgdGhpcy5vdXRwdXQgPSBudWxsLCB0aGlzLm5leHRfb3V0ID0gMCwgdGhpcy5hdmFpbF9vdXQgPSAwLCB0aGlzLnRvdGFsX291dCA9IDAsIHRoaXMubXNnID0gIiIsIHRoaXMuc3RhdGUgPSBudWxsLCB0aGlzLmRhdGFfdHlwZSA9IDIsIHRoaXMuYWRsZXIgPSAwIH0gdC5leHBvcnRzID0gbiB9LCAiemxpYi9nemhlYWRlci5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgInVzZSBzdHJpY3QiOwoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbigpIHsgdGhpcy50ZXh0ID0gMCwgdGhpcy50aW1lID0gMCwgdGhpcy54ZmxhZ3MgPSAwLCB0aGlzLm9zID0gMCwgdGhpcy5leHRyYSA9IG51bGwsIHRoaXMuZXh0cmFfbGVuID0gMCwgdGhpcy5uYW1lID0gIiIsIHRoaXMuY29tbWVudCA9ICIiLCB0aGlzLmhjcmMgPSAwLCB0aGlzLmRvbmUgPSAhMSB9IHQuZXhwb3J0cyA9IG4gfSwgInpsaWIvYWRsZXIzMi5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgInVzZSBzdHJpY3QiOwoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbihlLCB0LCByLCBuKSB7IGZvciAodmFyIG8gPSA2NTUzNSAmIGUgfCAwLCBhID0gZSA+Pj4gMTYgJiA2NTUzNSB8IDAsIGkgPSAwOyAwICE9PSByOykgeyBpID0gciA+IDJlMyA/IDJlMyA6IHIsIHIgLT0gaTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyBvID0gbyArIHRbbisrXSB8IDAsIGEgPSBhICsgbyB8IDA7IHdoaWxlICgtLWkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gJT0gNjU1MjEsIGEgJT0gNjU1MjEgfSByZXR1cm4gbyB8IGEgPDwgMTYgfCAwIH0gdC5leHBvcnRzID0gbiB9LCAiemxpYi9jcmMzMi5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgInVzZSBzdHJpY3QiOwoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbigpIHsgZm9yICh2YXIgZSwgdCA9IFtdLCByID0gMDsgciA8IDI1NjsgcisrKSB7IGUgPSByOyBmb3IgKHZhciBuID0gMDsgbiA8IDg7IG4rKykgZSA9IDEgJiBlID8gMzk4ODI5MjM4NCBeIGUgPj4+IDEgOiBlID4+PiAxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRbcl0gPSBlIH0gcmV0dXJuIHQgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbyhlLCB0LCByLCBuKSB7IHZhciBvID0gYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gbiArIHI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlIF49IC0xOyBmb3IgKHZhciBzID0gbjsgcyA8IGk7IHMrKykgZSA9IGUgPj4+IDggXiBvWzI1NSAmIChlIF4gdFtzXSldOyByZXR1cm4gZSBeIC0xIH0gdmFyIGEgPSBuKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHQuZXhwb3J0cyA9IG8gfSwgInpsaWIvaW5mZmFzdC5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgInVzZSBzdHJpY3QiOyB2YXIgbiA9IDMwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IDEyOwogICAgICAgICAgICAgICAgICAgICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihlLCB0KSB7IHZhciByLCBhLCBpLCBzLCBkLCBsLCB1LCBmLCBjLCBoLCBwLCB3LCBtLCBiLCB5LCBnLCB2LCBBLCBVLCB4LCBFLCBrLCBCLCBMLCBXOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGUuc3RhdGUsIGEgPSBlLm5leHRfaW4sIEwgPSBlLmlucHV0LCBpID0gYSArIChlLmF2YWlsX2luIC0gNSksIHMgPSBlLm5leHRfb3V0LCBXID0gZS5vdXRwdXQsIGQgPSBzIC0gKHQgLSBlLmF2YWlsX291dCksIGwgPSBzICsgKGUuYXZhaWxfb3V0IC0gMjU3KSwgdSA9IHIuZG1heCwgZiA9IHIud3NpemUsIGMgPSByLndoYXZlLCBoID0gci53bmV4dCwgcCA9IHIud2luZG93LCB3ID0gci5ob2xkLCBtID0gci5iaXRzLCBiID0gci5sZW5jb2RlLCB5ID0gci5kaXN0Y29kZSwgZyA9ICgxIDw8IHIubGVuYml0cykgLSAxLCB2ID0gKDEgPDwgci5kaXN0Yml0cykgLSAxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZTogZG8geyBtIDwgMTUgJiYgKHcgKz0gTFthKytdIDw8IG0sIG0gKz0gOCwgdyArPSBMW2ErK10gPDwgbSwgbSArPSA4KSwgQSA9IGJbdyAmIGddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQ6IGZvciAoOzspIHsgaWYgKFUgPSBBID4+PiAyNCwgdyA+Pj49IFUsIG0gLT0gVSwgVSA9IEEgPj4+IDE2ICYgMjU1LCAwID09PSBVKSBXW3MrK10gPSA2NTUzNSAmIEE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgeyBpZiAoISgxNiAmIFUpKSB7IGlmICgwID09PSAoNjQgJiBVKSkgeyBBID0gYlsoNjU1MzUgJiBBKSArICh3ICYgKDEgPDwgVSkgLSAxKV07IGNvbnRpbnVlIHQgfSBpZiAoMzIgJiBVKSB7IHIubW9kZSA9IG87IGJyZWFrIGUgfSBlLm1zZyA9ICJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUiLCByLm1vZGUgPSBuOyBicmVhayBlIH0geCA9IDY1NTM1ICYgQSwgVSAmPSAxNSwgVSAmJiAobSA8IFUgJiYgKHcgKz0gTFthKytdIDw8IG0sIG0gKz0gOCksIHggKz0gdyAmICgxIDw8IFUpIC0gMSwgdyA+Pj49IFUsIG0gLT0gVSksIG0gPCAxNSAmJiAodyArPSBMW2ErK10gPDwgbSwgbSArPSA4LCB3ICs9IExbYSsrXSA8PCBtLCBtICs9IDgpLCBBID0geVt3ICYgdl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByOiBmb3IgKDs7KSB7IGlmIChVID0gQSA+Pj4gMjQsIHcgPj4+PSBVLCBtIC09IFUsIFUgPSBBID4+PiAxNiAmIDI1NSwgISgxNiAmIFUpKSB7IGlmICgwID09PSAoNjQgJiBVKSkgeyBBID0geVsoNjU1MzUgJiBBKSArICh3ICYgKDEgPDwgVSkgLSAxKV07IGNvbnRpbnVlIHIgfSBlLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlIGNvZGUiLCByLm1vZGUgPSBuOyBicmVhayBlIH0gaWYgKEUgPSA2NTUzNSAmIEEsIFUgJj0gMTUsIG0gPCBVICYmICh3ICs9IExbYSsrXSA8PCBtLCBtICs9IDgsIG0gPCBVICYmICh3ICs9IExbYSsrXSA8PCBtLCBtICs9IDgpKSwgRSArPSB3ICYgKDEgPDwgVSkgLSAxLCBFID4gdSkgeyBlLm1zZyA9ICJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayIsIHIubW9kZSA9IG47IGJyZWFrIGUgfSBpZiAodyA+Pj49IFUsIG0gLT0gVSwgVSA9IHMgLSBkLCBFID4gVSkgeyBpZiAoVSA9IEUgLSBVLCBVID4gYyAmJiByLnNhbmUpIHsgZS5tc2cgPSAiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2siLCByLm1vZGUgPSBuOyBicmVhayBlIH0gaWYgKGsgPSAwLCBCID0gcCwgMCA9PT0gaCkgeyBpZiAoayArPSBmIC0gVSwgVSA8IHgpIHsgeCAtPSBVOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIFdbcysrXSA9IHBbaysrXTsgd2hpbGUgKC0tVSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IHMgLSBFLCBCID0gVyB9IH0gZWxzZSBpZiAoaCA8IFUpIHsgaWYgKGsgKz0gZiArIGggLSBVLCBVIC09IGgsIFUgPCB4KSB7IHggLT0gVTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyBXW3MrK10gPSBwW2srK107IHdoaWxlICgtLVUpOyBpZiAoayA9IDAsIGggPCB4KSB7IFUgPSBoLCB4IC09IFU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIFdbcysrXSA9IHBbaysrXTsgd2hpbGUgKC0tVSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBzIC0gRSwgQiA9IFcgfSB9IH0gZWxzZSBpZiAoayArPSBoIC0gVSwgVSA8IHgpIHsgeCAtPSBVOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gV1tzKytdID0gcFtrKytdOyB3aGlsZSAoLS1VKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBzIC0gRSwgQiA9IFcgfSBmb3IgKDsgeCA+IDI7KSBXW3MrK10gPSBCW2srK10sIFdbcysrXSA9IEJbaysrXSwgV1tzKytdID0gQltrKytdLCB4IC09IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggJiYgKFdbcysrXSA9IEJbaysrXSwgeCA+IDEgJiYgKFdbcysrXSA9IEJbaysrXSkpIH0gZWxzZSB7IGsgPSBzIC0gRTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gV1tzKytdID0gV1trKytdLCBXW3MrK10gPSBXW2srK10sIFdbcysrXSA9IFdbaysrXSwgeCAtPSAzOyB3aGlsZSAoeCA+IDIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICYmIChXW3MrK10gPSBXW2srK10sIHggPiAxICYmIChXW3MrK10gPSBXW2srK10pKSB9IGJyZWFrIH0gfSBicmVhayB9IH0gd2hpbGUgKGEgPCBpICYmIHMgPCBsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBtID4+IDMsIGEgLT0geCwgbSAtPSB4IDw8IDMsIHcgJj0gKDEgPDwgbSkgLSAxLCBlLm5leHRfaW4gPSBhLCBlLm5leHRfb3V0ID0gcywgZS5hdmFpbF9pbiA9IGEgPCBpID8gNSArIChpIC0gYSkgOiA1IC0gKGEgLSBpKSwgZS5hdmFpbF9vdXQgPSBzIDwgbCA/IDI1NyArIChsIC0gcykgOiAyNTcgLSAocyAtIGwpLCByLmhvbGQgPSB3LCByLmJpdHMgPSBtIH0gfSwgInpsaWIvaW5mdHJlZXMuanMiOiBmdW5jdGlvbihlLCB0LCByKSB7ICJ1c2Ugc3RyaWN0IjsgdmFyIG4gPSBlKCIuLi91dGlscy9jb21tb24iKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSAxNSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSA4NTIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gNTkyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IFszLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEzLCAxNSwgMTcsIDE5LCAyMywgMjcsIDMxLCAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gWzE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxNywgMTcsIDE4LCAxOCwgMTgsIDE4LCAxOSwgMTksIDE5LCAxOSwgMjAsIDIwLCAyMCwgMjAsIDIxLCAyMSwgMjEsIDIxLCAxNiwgNzIsIDc4XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBbMSwgMiwgMywgNCwgNSwgNywgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLCAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcsIDAsIDBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IFsxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxOCwgMTgsIDE5LCAxOSwgMjAsIDIwLCAyMSwgMjEsIDIyLCAyMiwgMjMsIDIzLCAyNCwgMjQsIDI1LCAyNSwgMjYsIDI2LCAyNywgMjcsIDI4LCAyOCwgMjksIDI5LCA2NCwgNjRdOwogICAgICAgICAgICAgICAgICAgICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihlLCB0LCByLCBwLCB3LCBtLCBiLCB5KSB7IHZhciBnLCB2LCBBLCBVLCB4LCBFLCBrLCBCLCBMLCBXID0geS5iaXRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE8gPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE0gPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE4gPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFIgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEMgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEggPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFMgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFQgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFAgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEQgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEYgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBuZXcgbi5CdWYxNihvICsgMSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgViA9IG5ldyBuLkJ1ZjE2KG8gKyAxKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBaID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZID0gMDsgZm9yIChPID0gMDsgTyA8PSBvOyBPKyspIHFbT10gPSAwOyBmb3IgKE0gPSAwOyBNIDwgcDsgTSsrKSBxW3RbciArIE1dXSsrOyBmb3IgKEMgPSBXLCBSID0gbzsgUiA+PSAxICYmIDAgPT09IHFbUl07IFItLSk7IGlmIChDID4gUiAmJiAoQyA9IFIpLCAwID09PSBSKSByZXR1cm4gd1ttKytdID0gMjA5NzE1MjAsIHdbbSsrXSA9IDIwOTcxNTIwLCB5LmJpdHMgPSAxLCAwOyBmb3IgKE4gPSAxOyBOIDwgUiAmJiAwID09PSBxW05dOyBOKyspOyBmb3IgKEMgPCBOICYmIChDID0gTiksIFQgPSAxLCBPID0gMTsgTyA8PSBvOyBPKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFQgPDw9IDEsIFQgLT0gcVtPXSwgVCA8IDApIHJldHVybiAtMTsgaWYgKFQgPiAwICYmIChlID09PSBzIHx8IDEgIT09IFIpKSByZXR1cm4gLTE7IGZvciAoVlsxXSA9IDAsIE8gPSAxOyBPIDwgbzsgTysrKSBWW08gKyAxXSA9IFZbT10gKyBxW09dOyBmb3IgKE0gPSAwOyBNIDwgcDsgTSsrKSAwICE9PSB0W3IgKyBNXSAmJiAoYltWW3RbciArIE1dXSsrXSA9IE0pOyBpZiAoZSA9PT0gcyA/IChEID0gWiA9IGIsIEUgPSAxOSkgOiBlID09PSBkID8gKEQgPSB1LCBGIC09IDI1NywgWiA9IGYsIFkgLT0gMjU3LCBFID0gMjU2KSA6IChEID0gYywgWiA9IGgsIEUgPSAtMSksIFAgPSAwLCBNID0gMCwgTyA9IE4sIHggPSBtLCBIID0gQywgUyA9IDAsIEEgPSAtMSwgSSA9IDEgPDwgQywgVSA9IEkgLSAxLCBlID09PSBkICYmIEkgPiBhIHx8IGUgPT09IGwgJiYgSSA+IGkpIHJldHVybiAxOyBmb3IgKDs7KSB7IGsgPSBPIC0gUywgYltNXSA8IEUgPyAoQiA9IDAsIEwgPSBiW01dKSA6IGJbTV0gPiBFID8gKEIgPSBaW1kgKyBiW01dXSwgTCA9IERbRiArIGJbTV1dKSA6IChCID0gOTYsIEwgPSAwKSwgZyA9IDEgPDwgTyAtIFMsIHYgPSAxIDw8IEgsIE4gPSB2OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHYgLT0gZywgd1t4ICsgKFAgPj4gUykgKyB2XSA9IGsgPDwgMjQgfCBCIDw8IDE2IHwgTCB8IDA7IHdoaWxlICgwICE9PSB2KTsgZm9yIChnID0gMSA8PCBPIC0gMTsgUCAmIGc7KSBnID4+PSAxOyBpZiAoMCAhPT0gZyA/IChQICY9IGcgLSAxLCBQICs9IGcpIDogUCA9IDAsIE0rKywgMCA9PT0gLS1xW09dKSB7IGlmIChPID09PSBSKSBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTyA9IHRbciArIGJbTV1dIH0gaWYgKE8gPiBDICYmIChQICYgVSkgIT09IEEpIHsgZm9yICgwID09PSBTICYmIChTID0gQyksIHggKz0gTiwgSCA9IE8gLSBTLCBUID0gMSA8PCBIOyBIICsgUyA8IFIgJiYgKFQgLT0gcVtIICsgU10sICEoVCA8PSAwKSk7KSBIKyssIFQgPDw9IDE7IGlmIChJICs9IDEgPDwgSCwgZSA9PT0gZCAmJiBJID4gYSB8fCBlID09PSBsICYmIEkgPiBpKSByZXR1cm4gMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSA9IFAgJiBVLCB3W0FdID0gQyA8PCAyNCB8IEggPDwgMTYgfCB4IC0gbSB8IDAgfSB9IHJldHVybiAwICE9PSBQICYmICh3W3ggKyBQXSA9IE8gLSBTIDw8IDI0IHwgNjQgPDwgMTYgfCAwKSwgeS5iaXRzID0gQywgMCB9IH0gfTsgZm9yICh2YXIgciBpbiB0KSB0W3JdLmZvbGRlciA9IHIuc3Vic3RyaW5nKDAsIHIubGFzdEluZGV4T2YoIi8iKSArIDEpOyB2YXIgbiA9IGZ1bmN0aW9uKGUpIHsgdmFyIHIgPSBbXTsgcmV0dXJuIGUgPSBlLnNwbGl0KCIvIikuZXZlcnkoZnVuY3Rpb24oZSkgeyByZXR1cm4gIi4uIiA9PSBlID8gci5wb3AoKSA6ICIuIiA9PSBlIHx8ICIiID09IGUgfHwgci5wdXNoKGUpIH0pID8gci5qb2luKCIvIikgOiBudWxsLCBlID8gdFtlXSB8fCB0W2UgKyAiLmpzIl0gfHwgdFtlICsgIi9pbmRleC5qcyJdIDogbnVsbCB9LAogICAgICAgICAgICAgICAgICAgIG8gPSBmdW5jdGlvbihlLCB0KSB7IHJldHVybiBlID8gbihlLmZvbGRlciArICJub2RlX21vZHVsZXMvIiArIHQpIHx8IG8oZS5wYXJlbnQsIHQpIDogbnVsbCB9LAogICAgICAgICAgICAgICAgICAgIGEgPSBmdW5jdGlvbihlLCB0KSB7IHZhciByID0gdC5tYXRjaCgvXlwvLykgPyBudWxsIDogZSA/IHQubWF0Y2goL15cLlwuP1wvLykgPyBuKGUuZm9sZGVyICsgdCkgOiBvKGUsIHQpIDogbih0KTsgaWYgKCFyKSB0aHJvdyAibW9kdWxlIG5vdCBmb3VuZDogIiArIHQ7IHJldHVybiByLmV4cG9ydHMgfHwgKHIucGFyZW50ID0gZSwgcihhLmJpbmQobnVsbCwgciksIHIsIHIuZXhwb3J0cyA9IHt9KSksIHIuZXhwb3J0cyB9OyByZXR1cm4gYShudWxsLCBlKSB9LCBkZWNvbXByZXNzOiBmdW5jdGlvbihlKSB7IHRoaXMuZXhwb3J0cyB8fCAodGhpcy5leHBvcnRzID0gdGhpcy5yZXF1aXJlKCJpbmZsYXRlLmpzIikpOyB0cnkgeyByZXR1cm4gdGhpcy5leHBvcnRzLmluZmxhdGUoZSkgfSBjYXRjaCAoZSkge30gfSwgaGFzVW5pdHlNYXJrZXI6IGZ1bmN0aW9uKGUpIHsgdmFyIHQgPSAxMCwKICAgICAgICAgICAgICAgICAgICByID0gIlVuaXR5V2ViIENvbXByZXNzZWQgQ29udGVudCAoZ3ppcCkiOyBpZiAodCA+IGUubGVuZ3RoIHx8IDMxICE9IGVbMF0gfHwgMTM5ICE9IGVbMV0pIHJldHVybiAhMTsgdmFyIG4gPSBlWzNdOyBpZiAoNCAmIG4pIHsgaWYgKHQgKyAyID4gZS5sZW5ndGgpIHJldHVybiAhMTsgaWYgKHQgKz0gMiArIGVbdF0gKyAoZVt0ICsgMV0gPDwgOCksIHQgPiBlLmxlbmd0aCkgcmV0dXJuICExIH0gaWYgKDggJiBuKSB7IGZvciAoOyB0IDwgZS5sZW5ndGggJiYgZVt0XTspIHQrKzsgaWYgKHQgKyAxID4gZS5sZW5ndGgpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgICAgICB0KysgfSByZXR1cm4gMTYgJiBuICYmIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZS5zdWJhcnJheSh0LCB0ICsgci5sZW5ndGggKyAxKSkgPT0gciArICJcMCIgfSB9LAogICAgICAgIGJyb3RsaTogewogICAgICAgICAgICByZXF1aXJlOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHsKICAgICAgICAgICAgICAgICAgICAiZGVjb21wcmVzcy5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgdC5leHBvcnRzID0gZSgiLi9kZWMvZGVjb2RlIikuQnJvdGxpRGVjb21wcmVzc0J1ZmZlciB9LAogICAgICAgICAgICAgICAgICAgICJkZWMvYml0X3JlYWRlci5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbihlKSB7IHRoaXMuYnVmXyA9IG5ldyBVaW50OEFycmF5KGEpLCB0aGlzLmlucHV0XyA9IGUsIHRoaXMucmVzZXQoKSB9IGNvbnN0IG8gPSA0MDk2LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IDgyMjQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gODE5MSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBuZXcgVWludDMyQXJyYXkoWzAsIDEsIDMsIDcsIDE1LCAzMSwgNjMsIDEyNywgMjU1LCA1MTEsIDEwMjMsIDIwNDcsIDQwOTUsIDgxOTEsIDE2MzgzLCAzMjc2NywgNjU1MzUsIDEzMTA3MSwgMjYyMTQzLCA1MjQyODcsIDEwNDg1NzUsIDIwOTcxNTEsIDQxOTQzMDMsIDgzODg2MDcsIDE2Nzc3MjE1XSk7CiAgICAgICAgICAgICAgICAgICAgICAgIG4uUkVBRF9TSVpFID0gbywgbi5JQlVGX01BU0sgPSBpLCBuLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkgeyB0aGlzLmJ1Zl9wdHJfID0gMCwgdGhpcy52YWxfID0gMCwgdGhpcy5wb3NfID0gMCwgdGhpcy5iaXRfcG9zXyA9IDAsIHRoaXMuYml0X2VuZF9wb3NfID0gMCwgdGhpcy5lb3NfID0gMCwgdGhpcy5yZWFkTW9yZUlucHV0KCk7IGZvciAodmFyIGUgPSAwOyBlIDwgNDsgZSsrKSB0aGlzLnZhbF8gfD0gdGhpcy5idWZfW3RoaXMucG9zX10gPDwgOCAqIGUsICsrdGhpcy5wb3NfOyByZXR1cm4gdGhpcy5iaXRfZW5kX3Bvc18gPiAwIH0sIG4ucHJvdG90eXBlLnJlYWRNb3JlSW5wdXQgPSBmdW5jdGlvbigpIHsgaWYgKCEodGhpcy5iaXRfZW5kX3Bvc18gPiAyNTYpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVvc18pIHsgaWYgKHRoaXMuYml0X3Bvc18gPiB0aGlzLmJpdF9lbmRfcG9zXykgdGhyb3cgbmV3IEVycm9yKCJVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCAiICsgdGhpcy5iaXRfcG9zXyArICIgIiArIHRoaXMuYml0X2VuZF9wb3NfKSB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsgdmFyIGUgPSB0aGlzLmJ1Zl9wdHJfLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gdGhpcy5pbnB1dF8ucmVhZCh0aGlzLmJ1Zl8sIGUsIG8pOyBpZiAodCA8IDApIHRocm93IG5ldyBFcnJvcigiVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQiKTsgaWYgKHQgPCBvKSB7IHRoaXMuZW9zXyA9IDE7IGZvciAodmFyIHIgPSAwOyByIDwgMzI7IHIrKykgdGhpcy5idWZfW2UgKyB0ICsgcl0gPSAwIH0gaWYgKDAgPT09IGUpIHsgZm9yICh2YXIgciA9IDA7IHIgPCAzMjsgcisrKSB0aGlzLmJ1Zl9bODE5MiArIHJdID0gdGhpcy5idWZfW3JdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1Zl9wdHJfID0gbyB9IGVsc2UgdGhpcy5idWZfcHRyXyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iaXRfZW5kX3Bvc18gKz0gdCA8PCAzIH0gfSwgbi5wcm90b3R5cGUuZmlsbEJpdFdpbmRvdyA9IGZ1bmN0aW9uKCkgeyBmb3IgKDsgdGhpcy5iaXRfcG9zXyA+PSA4OykgdGhpcy52YWxfID4+Pj0gOCwgdGhpcy52YWxfIHw9IHRoaXMuYnVmX1t0aGlzLnBvc18gJiBpXSA8PCAyNCwgKyt0aGlzLnBvc18sIHRoaXMuYml0X3Bvc18gPSB0aGlzLmJpdF9wb3NfIC0gOCA+Pj4gMCwgdGhpcy5iaXRfZW5kX3Bvc18gPSB0aGlzLmJpdF9lbmRfcG9zXyAtIDggPj4+IDAgfSwgbi5wcm90b3R5cGUucmVhZEJpdHMgPSBmdW5jdGlvbihlKSB7IDMyIC0gdGhpcy5iaXRfcG9zXyA8IGUgJiYgdGhpcy5maWxsQml0V2luZG93KCk7IHZhciB0ID0gdGhpcy52YWxfID4+PiB0aGlzLmJpdF9wb3NfICYgc1tlXTsgcmV0dXJuIHRoaXMuYml0X3Bvc18gKz0gZSwgdCB9LCB0LmV4cG9ydHMgPSBuIH0sCiAgICAgICAgICAgICAgICAgICAgImRlYy9jb250ZXh0LmpzIjogZnVuY3Rpb24oZSwgdCwgcikgewogICAgICAgICAgICAgICAgICAgICAgICByLmxvb2t1cCA9IG5ldyBVaW50OEFycmF5KFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCA0LCA0LCAwLCAwLCA0LCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCA4LCAxMiwgMTYsIDEyLCAxMiwgMjAsIDEyLCAxNiwgMjQsIDI4LCAxMiwgMTIsIDMyLCAxMiwgMzYsIDEyLCA0NCwgNDQsIDQ0LCA0NCwgNDQsIDQ0LCA0NCwgNDQsIDQ0LCA0NCwgMzIsIDMyLCAyNCwgNDAsIDI4LCAxMiwgMTIsIDQ4LCA1MiwgNTIsIDUyLCA0OCwgNTIsIDUyLCA1MiwgNDgsIDUyLCA1MiwgNTIsIDUyLCA1MiwgNDgsIDUyLCA1MiwgNTIsIDUyLCA1MiwgNDgsIDUyLCA1MiwgNTIsIDUyLCA1MiwgMjQsIDEyLCAyOCwgMTIsIDEyLCAxMiwgNTYsIDYwLCA2MCwgNjAsIDU2LCA2MCwgNjAsIDYwLCA1NiwgNjAsIDYwLCA2MCwgNjAsIDYwLCA1NiwgNjAsIDYwLCA2MCwgNjAsIDYwLCA1NiwgNjAsIDYwLCA2MCwgNjAsIDYwLCAyNCwgMTIsIDI4LCAxMiwgMCwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMSwgMSwgMSwgMSwgMSwgMSwgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMSwgMSwgMSwgMSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgMywgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNCwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNSwgNiwgNiwgNiwgNiwgNiwgNiwgNiwgNiwgNiwgNiwgNiwgNiwgNiwgNiwgNiwgNywgMCwgOCwgOCwgOCwgOCwgOCwgOCwgOCwgOCwgOCwgOCwgOCwgOCwgOCwgOCwgOCwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA1NiwgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCA1NCwgNTUsIDU2LCA1NywgNTgsIDU5LCA2MCwgNjEsIDYyLCA2MywgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCA1NCwgNTUsIDU2LCA1NywgNTgsIDU5LCA2MCwgNjEsIDYyLCA2MywgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCA1NCwgNTUsIDU2LCA1NywgNTgsIDU5LCA2MCwgNjEsIDYyLCA2MywgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCA1NCwgNTUsIDU2LCA1NywgNTgsIDU5LCA2MCwgNjEsIDYyLCA2MywgMCwgMCwgMCwgMCwgMSwgMSwgMSwgMSwgMiwgMiwgMiwgMiwgMywgMywgMywgMywgNCwgNCwgNCwgNCwgNSwgNSwgNSwgNSwgNiwgNiwgNiwgNiwgNywgNywgNywgNywgOCwgOCwgOCwgOCwgOSwgOSwgOSwgOSwgMTAsIDEwLCAxMCwgMTAsIDExLCAxMSwgMTEsIDExLCAxMiwgMTIsIDEyLCAxMiwgMTMsIDEzLCAxMywgMTMsIDE0LCAxNCwgMTQsIDE0LCAxNSwgMTUsIDE1LCAxNSwgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTcsIDE3LCAxOCwgMTgsIDE4LCAxOCwgMTksIDE5LCAxOSwgMTksIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMjIsIDIyLCAyMiwgMjIsIDIzLCAyMywgMjMsIDIzLCAyNCwgMjQsIDI0LCAyNCwgMjUsIDI1LCAyNSwgMjUsIDI2LCAyNiwgMjYsIDI2LCAyNywgMjcsIDI3LCAyNywgMjgsIDI4LCAyOCwgMjgsIDI5LCAyOSwgMjksIDI5LCAzMCwgMzAsIDMwLCAzMCwgMzEsIDMxLCAzMSwgMzEsIDMyLCAzMiwgMzIsIDMyLCAzMywgMzMsIDMzLCAzMywgMzQsIDM0LCAzNCwgMzQsIDM1LCAzNSwgMzUsIDM1LCAzNiwgMzYsIDM2LCAzNiwgMzcsIDM3LCAzNywgMzcsIDM4LCAzOCwgMzgsIDM4LCAzOSwgMzksIDM5LCAzOSwgNDAsIDQwLCA0MCwgNDAsIDQxLCA0MSwgNDEsIDQxLCA0MiwgNDIsIDQyLCA0MiwgNDMsIDQzLCA0MywgNDMsIDQ0LCA0NCwgNDQsIDQ0LCA0NSwgNDUsIDQ1LCA0NSwgNDYsIDQ2LCA0NiwgNDYsIDQ3LCA0NywgNDcsIDQ3LCA0OCwgNDgsIDQ4LCA0OCwgNDksIDQ5LCA0OSwgNDksIDUwLCA1MCwgNTAsIDUwLCA1MSwgNTEsIDUxLCA1MSwgNTIsIDUyLCA1MiwgNTIsIDUzLCA1MywgNTMsIDUzLCA1NCwgNTQsIDU0LCA1NCwgNTUsIDU1LCA1NSwgNTUsIDU2LCA1NiwgNTYsIDU2LCA1NywgNTcsIDU3LCA1NywgNTgsIDU4LCA1OCwgNTgsIDU5LCA1OSwgNTksIDU5LCA2MCwgNjAsIDYwLCA2MCwgNjEsIDYxLCA2MSwgNjEsIDYyLCA2MiwgNjIsIDYyLCA2MywgNjMsIDYzLCA2MywgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgci5sb29rdXBPZmZzZXRzID0gbmV3IFVpbnQxNkFycmF5KFsxMDI0LCAxNTM2LCAxMjgwLCAxNTM2LCAwLCAyNTYsIDc2OCwgNTEyXSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJkZWMvZGVjb2RlLmpzIjogZnVuY3Rpb24oZSwgdCwgcikgewogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBuKGUpIHsgdmFyIHQ7IHJldHVybiAwID09PSBlLnJlYWRCaXRzKDEpID8gMTYgOiAodCA9IGUucmVhZEJpdHMoMyksIHQgPiAwID8gMTcgKyB0IDogKHQgPSBlLnJlYWRCaXRzKDMpLCB0ID4gMCA/IDggKyB0IDogMTcpKSB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvKGUpIHsgaWYgKGUucmVhZEJpdHMoMSkpIHsgdmFyIHQgPSBlLnJlYWRCaXRzKDMpOyByZXR1cm4gMCA9PT0gdCA/IDEgOiBlLnJlYWRCaXRzKHQpICsgKDEgPDwgdCkgfSByZXR1cm4gMCB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhKCkgeyB0aGlzLm1ldGFfYmxvY2tfbGVuZ3RoID0gMCwgdGhpcy5pbnB1dF9lbmQgPSAwLCB0aGlzLmlzX3VuY29tcHJlc3NlZCA9IDAsIHRoaXMuaXNfbWV0YWRhdGEgPSAhMSB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpKGUpIHsgdmFyIHQsIHIsIG4sIG8gPSBuZXcgYTsgaWYgKG8uaW5wdXRfZW5kID0gZS5yZWFkQml0cygxKSwgby5pbnB1dF9lbmQgJiYgZS5yZWFkQml0cygxKSkgcmV0dXJuIG87IGlmICh0ID0gZS5yZWFkQml0cygyKSArIDQsIDcgPT09IHQpIHsgaWYgKG8uaXNfbWV0YWRhdGEgPSAhMCwgMCAhPT0gZS5yZWFkQml0cygxKSkgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIHJlc2VydmVkIGJpdCIpOyBpZiAociA9IGUucmVhZEJpdHMoMiksIDAgPT09IHIpIHJldHVybiBvOyBmb3IgKG4gPSAwOyBuIDwgcjsgbisrKSB7IHZhciBpID0gZS5yZWFkQml0cyg4KTsgaWYgKG4gKyAxID09PSByICYmIHIgPiAxICYmIDAgPT09IGkpIHRocm93IG5ldyBFcnJvcigiSW52YWxpZCBzaXplIGJ5dGUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5tZXRhX2Jsb2NrX2xlbmd0aCB8PSBpIDw8IDggKiBuIH0gfSBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChuID0gMDsgbiA8IHQ7ICsrbikgeyB2YXIgcyA9IGUucmVhZEJpdHMoNCk7IGlmIChuICsgMSA9PT0gdCAmJiB0ID4gNCAmJiAwID09PSBzKSB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgc2l6ZSBuaWJibGUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5tZXRhX2Jsb2NrX2xlbmd0aCB8PSBzIDw8IDQgKiBuIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiArK28ubWV0YV9ibG9ja19sZW5ndGgsIG8uaW5wdXRfZW5kIHx8IG8uaXNfbWV0YWRhdGEgfHwgKG8uaXNfdW5jb21wcmVzc2VkID0gZS5yZWFkQml0cygxKSksIG8gfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcyhlLCB0LCByKSB7IHZhciBuOyByZXR1cm4gci5maWxsQml0V2luZG93KCksIHQgKz0gci52YWxfID4+PiByLmJpdF9wb3NfICYgRCwgbiA9IGVbdF0uYml0cyAtIFAsIG4gPiAwICYmIChyLmJpdF9wb3NfICs9IFAsIHQgKz0gZVt0XS52YWx1ZSwgdCArPSByLnZhbF8gPj4+IHIuYml0X3Bvc18gJiAoMSA8PCBuKSAtIDEpLCByLmJpdF9wb3NfICs9IGVbdF0uYml0cywgZVt0XS52YWx1ZSB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkKGUsIHQsIHIsIG4pIHsgZm9yICh2YXIgbyA9IDAsIGEgPSBOLCBpID0gMCwgcyA9IDAsIGQgPSAzMjc2OCwgbCA9IFtdLCB1ID0gMDsgdSA8IDMyOyB1KyspIGwucHVzaChuZXcgQigwLCAwKSk7IGZvciAoTChsLCAwLCA1LCBlLCBxKTsgbyA8IHQgJiYgZCA+IDA7KSB7IHZhciBmLCBjID0gMDsgaWYgKG4ucmVhZE1vcmVJbnB1dCgpLCBuLmZpbGxCaXRXaW5kb3coKSwgYyArPSBuLnZhbF8gPj4+IG4uYml0X3Bvc18gJiAzMSwgbi5iaXRfcG9zXyArPSBsW2NdLmJpdHMsIGYgPSAyNTUgJiBsW2NdLnZhbHVlLCBmIDwgUikgaSA9IDAsIHJbbysrXSA9IGYsIDAgIT09IGYgJiYgKGEgPSBmLCBkIC09IDMyNzY4ID4+IGYpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgeyB2YXIgaCwgcCwgdyA9IGYgLSAxNCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSAwOyBpZiAoZiA9PT0gUiAmJiAobSA9IGEpLCBzICE9PSBtICYmIChpID0gMCwgcyA9IG0pLCBoID0gaSwgaSA+IDAgJiYgKGkgLT0gMiwgaSA8PD0gdyksIGkgKz0gbi5yZWFkQml0cyh3KSArIDMsIHAgPSBpIC0gaCwgbyArIHAgPiB0KSB0aHJvdyBuZXcgRXJyb3IoIltSZWFkSHVmZm1hbkNvZGVMZW5ndGhzXSBzeW1ib2wgKyByZXBlYXRfZGVsdGEgPiBudW1fc3ltYm9scyIpOyBmb3IgKHZhciBiID0gMDsgYiA8IHA7IGIrKykgcltvICsgYl0gPSBzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvICs9IHAsIDAgIT09IHMgJiYgKGQgLT0gcCA8PCAxNSAtIHMpIH0gfSBpZiAoMCAhPT0gZCkgdGhyb3cgbmV3IEVycm9yKCJbUmVhZEh1ZmZtYW5Db2RlTGVuZ3Roc10gc3BhY2UgPSAiICsgZCk7IGZvciAoOyBvIDwgdDsgbysrKSByW29dID0gMCB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBsKGUsIHQsIHIsIG4pIHsgdmFyIG8sIGEgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBuZXcgVWludDhBcnJheShlKTsgaWYgKG4ucmVhZE1vcmVJbnB1dCgpLCBvID0gbi5yZWFkQml0cygyKSwgMSA9PT0gbykgeyBmb3IgKHZhciBzLCBsID0gZSAtIDEsIHUgPSAwLCBmID0gbmV3IEludDMyQXJyYXkoNCksIGMgPSBuLnJlYWRCaXRzKDIpICsgMTsgbDspIGwgPj49IDEsICsrdTsgZm9yIChzID0gMDsgcyA8IGM7ICsrcykgZltzXSA9IG4ucmVhZEJpdHModSkgJSBlLCBpW2Zbc11dID0gMjsgc3dpdGNoIChpW2ZbMF1dID0gMSwgYykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZbMF0gPT09IGZbMV0gfHwgZlswXSA9PT0gZlsyXSB8fCBmWzFdID09PSBmWzJdKSB0aHJvdyBuZXcgRXJyb3IoIltSZWFkSHVmZm1hbkNvZGVdIGludmFsaWQgc3ltYm9scyIpOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZbMF0gPT09IGZbMV0pIHRocm93IG5ldyBFcnJvcigiW1JlYWRIdWZmbWFuQ29kZV0gaW52YWxpZCBzeW1ib2xzIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpW2ZbMV1dID0gMTsgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmWzBdID09PSBmWzFdIHx8IGZbMF0gPT09IGZbMl0gfHwgZlswXSA9PT0gZlszXSB8fCBmWzFdID09PSBmWzJdIHx8IGZbMV0gPT09IGZbM10gfHwgZlsyXSA9PT0gZlszXSkgdGhyb3cgbmV3IEVycm9yKCJbUmVhZEh1ZmZtYW5Db2RlXSBpbnZhbGlkIHN5bWJvbHMiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ucmVhZEJpdHMoMSkgPyAoaVtmWzJdXSA9IDMsIGlbZlszXV0gPSAzKSA6IGlbZlswXV0gPSAyIH0gfSBlbHNlIHsgdmFyIHMsIGggPSBuZXcgVWludDhBcnJheShxKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IDMyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IFtuZXcgQigyLCAwKSwgbmV3IEIoMiwgNCksIG5ldyBCKDIsIDMpLCBuZXcgQigzLCAyKSwgbmV3IEIoMiwgMCksIG5ldyBCKDIsIDQpLCBuZXcgQigyLCAzKSwgbmV3IEIoNCwgMSksIG5ldyBCKDIsIDApLCBuZXcgQigyLCA0KSwgbmV3IEIoMiwgMyksIG5ldyBCKDMsIDIpLCBuZXcgQigyLCAwKSwgbmV3IEIoMiwgNCksIG5ldyBCKDIsIDMpLCBuZXcgQig0LCA1KV07IGZvciAocyA9IG87IHMgPCBxICYmIHAgPiAwOyArK3MpIHsgdmFyIGIsIHkgPSBWW3NdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uZmlsbEJpdFdpbmRvdygpLCBnICs9IG4udmFsXyA+Pj4gbi5iaXRfcG9zXyAmIDE1LCBuLmJpdF9wb3NfICs9IG1bZ10uYml0cywgYiA9IG1bZ10udmFsdWUsIGhbeV0gPSBiLCAwICE9PSBiICYmIChwIC09IDMyID4+IGIsICsrdykgfSBpZiAoMSAhPT0gdyAmJiAwICE9PSBwKSB0aHJvdyBuZXcgRXJyb3IoIltSZWFkSHVmZm1hbkNvZGVdIGludmFsaWQgbnVtX2NvZGVzIG9yIHNwYWNlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZChoLCBlLCBpLCBuKSB9IGlmIChhID0gTCh0LCByLCBQLCBpLCBlKSwgMCA9PT0gYSkgdGhyb3cgbmV3IEVycm9yKCJbUmVhZEh1ZmZtYW5Db2RlXSBCdWlsZEh1ZmZtYW5UYWJsZSBmYWlsZWQ6ICIpOyByZXR1cm4gYSB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB1KGUsIHQsIHIpIHsgdmFyIG4sIG87IHJldHVybiBuID0gcyhlLCB0LCByKSwgbyA9IE8ua0Jsb2NrTGVuZ3RoUHJlZml4Q29kZVtuXS5uYml0cywgTy5rQmxvY2tMZW5ndGhQcmVmaXhDb2RlW25dLm9mZnNldCArIHIucmVhZEJpdHMobykgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZihlLCB0LCByKSB7IHZhciBuOyByZXR1cm4gZSA8IFogPyAociArPSBZW2VdLCByICY9IDMsIG4gPSB0W3JdICsgeltlXSkgOiBuID0gZSAtIFogKyAxLCBuIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGMoZSwgdCkgeyBmb3IgKHZhciByID0gZVt0XSwgbiA9IHQ7IG47IC0tbikgZVtuXSA9IGVbbiAtIDFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZVswXSA9IHIgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaChlLCB0KSB7IHZhciByLCBuID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTsgZm9yIChyID0gMDsgciA8IDI1NjsgKytyKSBuW3JdID0gcjsgZm9yIChyID0gMDsgciA8IHQ7ICsrcikgeyB2YXIgbyA9IGVbcl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZVtyXSA9IG5bb10sIG8gJiYgYyhuLCBvKSB9IH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHAoZSwgdCkgeyB0aGlzLmFscGhhYmV0X3NpemUgPSBlLCB0aGlzLm51bV9odHJlZXMgPSB0LCB0aGlzLmNvZGVzID0gbmV3IEFycmF5KHQgKyB0ICogR1tlICsgMzEgPj4+IDVdKSwgdGhpcy5odHJlZXMgPSBuZXcgVWludDMyQXJyYXkodCkgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdyhlLCB0KSB7IHZhciByLCBuLCBhLCBpID0geyBudW1faHRyZWVzOiBudWxsLCBjb250ZXh0X21hcDogbnVsbCB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZWFkTW9yZUlucHV0KCk7IHZhciB1ID0gaS5udW1faHRyZWVzID0gbyh0KSArIDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGkuY29udGV4dF9tYXAgPSBuZXcgVWludDhBcnJheShlKTsgaWYgKHUgPD0gMSkgcmV0dXJuIGk7IGZvciAociA9IHQucmVhZEJpdHMoMSksIHIgJiYgKGQgPSB0LnJlYWRCaXRzKDQpICsgMSksIG4gPSBbXSwgYSA9IDA7IGEgPCBGOyBhKyspIG5bYV0gPSBuZXcgQigwLCAwKTsgZm9yIChsKHUgKyBkLCBuLCAwLCB0KSwgYSA9IDA7IGEgPCBlOykgeyB2YXIgYzsgaWYgKHQucmVhZE1vcmVJbnB1dCgpLCBjID0gcyhuLCAwLCB0KSwgMCA9PT0gYykgZlthXSA9IDAsICsrYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjIDw9IGQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHAgPSAxICsgKDEgPDwgYykgKyB0LnJlYWRCaXRzKGMpOyAtLXA7KSB7IGlmIChhID49IGUpIHRocm93IG5ldyBFcnJvcigiW0RlY29kZUNvbnRleHRNYXBdIGkgPj0gY29udGV4dF9tYXBfc2l6ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZlthXSA9IDAsICsrYSB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBmW2FdID0gYyAtIGQsICsrYSB9IHJldHVybiB0LnJlYWRCaXRzKDEpICYmIGgoZiwgZSksIGkgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbShlLCB0LCByLCBuLCBvLCBhLCBpKSB7IHZhciBkLCBsID0gMiAqIHIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHModCwgciAqIEYsIGkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IDAgPT09IGYgPyBvW2wgKyAoMSAmIGFbdV0pXSA6IDEgPT09IGYgPyBvW2wgKyAoYVt1XSAtIDEgJiAxKV0gKyAxIDogZiAtIDIsIGQgPj0gZSAmJiAoZCAtPSBlKSwgbltyXSA9IGQsIG9bbCArICgxICYgYVt1XSldID0gZCwgKythW3VdIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGIoZSwgdCwgciwgbiwgbywgYSkgeyB2YXIgaSwgcyA9IG8gKyAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSByICYgbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gYS5wb3NfICYgRS5JQlVGX01BU0s7IGlmICh0IDwgOCB8fCBhLmJpdF9wb3NfICsgKHQgPDwgMykgPCBhLmJpdF9lbmRfcG9zXykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgdC0tID4gMDspIGEucmVhZE1vcmVJbnB1dCgpLCBuW2QrK10gPSBhLnJlYWRCaXRzKDgpLCBkID09PSBzICYmIChlLndyaXRlKG4sIHMpLCBkID0gMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsgaWYgKGEuYml0X2VuZF9wb3NfIDwgMzIpIHRocm93IG5ldyBFcnJvcigiW0NvcHlVbmNvbXByZXNzZWRCbG9ja1RvT3V0cHV0XSBici5iaXRfZW5kX3Bvc18gPCAzMiIpOyBmb3IgKDsgYS5iaXRfcG9zXyA8IDMyOykgbltkXSA9IGEudmFsXyA+Pj4gYS5iaXRfcG9zXywgYS5iaXRfcG9zXyArPSA4LCArK2QsIC0tdDsgaWYgKGkgPSBhLmJpdF9lbmRfcG9zXyAtIGEuYml0X3Bvc18gPj4gMywgbCArIGkgPiBFLklCVUZfTUFTSykgeyBmb3IgKHZhciB1ID0gRS5JQlVGX01BU0sgKyAxIC0gbCwgZiA9IDA7IGYgPCB1OyBmKyspIG5bZCArIGZdID0gYS5idWZfW2wgKyBmXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAtPSB1LCBkICs9IHUsIHQgLT0gdSwgbCA9IDAgfSBmb3IgKHZhciBmID0gMDsgZiA8IGk7IGYrKykgbltkICsgZl0gPSBhLmJ1Zl9bbCArIGZdOyBpZiAoZCArPSBpLCB0IC09IGksIGQgPj0gcykgeyBlLndyaXRlKG4sIHMpLCBkIC09IHM7IGZvciAodmFyIGYgPSAwOyBmIDwgZDsgZisrKSBuW2ZdID0gbltzICsgZl0gfSBmb3IgKDsgZCArIHQgPj0gczspIHsgaWYgKGkgPSBzIC0gZCwgYS5pbnB1dF8ucmVhZChuLCBkLCBpKSA8IGkpIHRocm93IG5ldyBFcnJvcigiW0NvcHlVbmNvbXByZXNzZWRCbG9ja1RvT3V0cHV0XSBub3QgZW5vdWdoIGJ5dGVzIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUud3JpdGUobiwgcyksIHQgLT0gaSwgZCA9IDAgfSBpZiAoYS5pbnB1dF8ucmVhZChuLCBkLCB0KSA8IHQpIHRocm93IG5ldyBFcnJvcigiW0NvcHlVbmNvbXByZXNzZWRCbG9ja1RvT3V0cHV0XSBub3QgZW5vdWdoIGJ5dGVzIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5yZXNldCgpIH0gfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24geShlKSB7IHZhciB0ID0gZS5iaXRfcG9zXyArIDcgJiAtOCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gZS5yZWFkQml0cyh0IC0gZS5iaXRfcG9zXyk7IHJldHVybiAwID09IHIgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZyhlKSB7IHZhciB0ID0gbmV3IFUoZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG5ldyBFKHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbihyKTsgdmFyIG8gPSBpKHIpOyByZXR1cm4gby5tZXRhX2Jsb2NrX2xlbmd0aCB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB2KGUsIHQpIHsgdmFyIHIgPSBuZXcgVShlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT0gdCAmJiAodCA9IGcoZSkpOyB2YXIgbiA9IG5ldyBVaW50OEFycmF5KHQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBuZXcgeChuKTsgcmV0dXJuIEEociwgbyksIG8ucG9zIDwgby5idWZmZXIubGVuZ3RoICYmIChvLmJ1ZmZlciA9IG8uYnVmZmVyLnN1YmFycmF5KDAsIG8ucG9zKSksIG8uYnVmZmVyIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEEoZSwgdCkgeyB2YXIgciwgYSwgZCwgYywgaCwgZywgdiwgQSwgVSwgeCA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTCA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTiA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUiA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUCA9IFsxNiwgMTUsIDExLCA0XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZID0gW25ldyBwKDAsIDApLCBuZXcgcCgwLCAwKSwgbmV3IHAoMCwgMCldOyBjb25zdCB6ID0gMTI4ICsgRS5SRUFEX1NJWkU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVID0gbmV3IEUoZSksIE4gPSBuKFUpLCBhID0gKDEgPDwgTikgLSAxNiwgZCA9IDEgPDwgTiwgYyA9IGQgLSAxLCBoID0gbmV3IFVpbnQ4QXJyYXkoZCArIHogKyBrLm1heERpY3Rpb25hcnlXb3JkTGVuZ3RoKSwgZyA9IGQsIHYgPSBbXSwgQSA9IFtdOyBmb3IgKHZhciBHID0gMDsgRyA8IDMyNDA7IEcrKykgdltHXSA9IG5ldyBCKDAsIDApLCBBW0ddID0gbmV3IEIoMCwgMCk7IGZvciAoOyAhTDspIHsgdmFyIEosIGosIFgsIEssIFEsIF8sICQsIGVlLCB0ZSwgcmUgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZSA9IFsxIDw8IDI4LCAxIDw8IDI4LCAxIDw8IDI4XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2UgPSBbMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFlID0gWzEsIDEsIDFdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZSA9IFswLCAxLCAwLCAxLCAwLCAxXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2UgPSBbMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGUgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ZSA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2UgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2UgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWUgPSAwOyBmb3IgKHIgPSAwOyByIDwgMzsgKytyKSBZW3JdLmNvZGVzID0gbnVsbCwgWVtyXS5odHJlZXMgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFUucmVhZE1vcmVJbnB1dCgpOyB2YXIgZ2UgPSBpKFUpOyBpZiAocmUgPSBnZS5tZXRhX2Jsb2NrX2xlbmd0aCwgeCArIHJlID4gdC5idWZmZXIubGVuZ3RoKSB7IHZhciB2ZSA9IG5ldyBVaW50OEFycmF5KHggKyByZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlLnNldCh0LmJ1ZmZlciksIHQuYnVmZmVyID0gdmUgfSBpZiAoTCA9IGdlLmlucHV0X2VuZCwgSiA9IGdlLmlzX3VuY29tcHJlc3NlZCwgZ2UuaXNfbWV0YWRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoeShVKTsgcmUgPiAwOyAtLXJlKSBVLnJlYWRNb3JlSW5wdXQoKSwgVS5yZWFkQml0cyg4KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgwICE9PSByZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEopIFUuYml0X3Bvc18gPSBVLmJpdF9wb3NfICsgNyAmIC04LCBiKHQsIHJlLCB4LCBoLCBjLCBVKSwgeCArPSByZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7IGZvciAociA9IDA7IHIgPCAzOyArK3IpIGFlW3JdID0gbyhVKSArIDEsIGFlW3JdID49IDIgJiYgKGwoYWVbcl0gKyAyLCB2LCByICogRiwgVSksIGwoUywgQSwgciAqIEYsIFUpLCBuZVtyXSA9IHUoQSwgciAqIEYsIFUpLCBzZVtyXSA9IDEpOyBmb3IgKFUucmVhZE1vcmVJbnB1dCgpLCBqID0gVS5yZWFkQml0cygyKSwgWCA9IFogKyAoVS5yZWFkQml0cyg0KSA8PCBqKSwgSyA9ICgxIDw8IGopIC0gMSwgUSA9IFggKyAoNDggPDwgaiksIGxlID0gbmV3IFVpbnQ4QXJyYXkoYWVbMF0pLCByID0gMDsgciA8IGFlWzBdOyArK3IpIFUucmVhZE1vcmVJbnB1dCgpLCBsZVtyXSA9IFUucmVhZEJpdHMoMikgPDwgMTsgdmFyIEFlID0gdyhhZVswXSA8PCBULCBVKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gPSBBZS5udW1faHRyZWVzLCBkZSA9IEFlLmNvbnRleHRfbWFwOyB2YXIgVWUgPSB3KGFlWzJdIDw8IEksIFUpOyBmb3IgKCQgPSBVZS5udW1faHRyZWVzLCB1ZSA9IFVlLmNvbnRleHRfbWFwLCBZWzBdID0gbmV3IHAoQywgXyksIFlbMV0gPSBuZXcgcChILCBhZVsxXSksIFlbMl0gPSBuZXcgcChRLCAkKSwgciA9IDA7IHIgPCAzOyArK3IpIFlbcl0uZGVjb2RlKFUpOyBmb3IgKGNlID0gMCwgd2UgPSAwLCBlZSA9IGxlW29lWzBdXSwgYmUgPSBXLmxvb2t1cE9mZnNldHNbZWVdLCB5ZSA9IFcubG9va3VwT2Zmc2V0c1tlZSArIDFdLCB0ZSA9IFlbMV0uaHRyZWVzWzBdOyByZSA+IDA7KSB7IHZhciB4ZSwgRWUsIGtlLCBCZSwgTGUsIFdlLCBPZSwgTWUsIE5lLCBSZSwgQ2U7IGZvciAoVS5yZWFkTW9yZUlucHV0KCksIDAgPT09IG5lWzFdICYmIChtKGFlWzFdLCB2LCAxLCBvZSwgaWUsIHNlLCBVKSwgbmVbMV0gPSB1KEEsIEYsIFUpLCB0ZSA9IFlbMV0uaHRyZWVzW29lWzFdXSksIC0tbmVbMV0sIHhlID0gcyhZWzFdLmNvZGVzLCB0ZSwgVSksIEVlID0geGUgPj4gNiwgRWUgPj0gMiA/IChFZSAtPSAyLCBPZSA9IC0xKSA6IE9lID0gMCwga2UgPSBPLmtJbnNlcnRSYW5nZUx1dFtFZV0gKyAoeGUgPj4gMyAmIDcpLCBCZSA9IE8ua0NvcHlSYW5nZUx1dFtFZV0gKyAoNyAmIHhlKSwgTGUgPSBPLmtJbnNlcnRMZW5ndGhQcmVmaXhDb2RlW2tlXS5vZmZzZXQgKyBVLnJlYWRCaXRzKE8ua0luc2VydExlbmd0aFByZWZpeENvZGVba2VdLm5iaXRzKSwgV2UgPSBPLmtDb3B5TGVuZ3RoUHJlZml4Q29kZVtCZV0ub2Zmc2V0ICsgVS5yZWFkQml0cyhPLmtDb3B5TGVuZ3RoUHJlZml4Q29kZVtCZV0ubmJpdHMpLCBxID0gaFt4IC0gMSAmIGNdLCBWID0gaFt4IC0gMiAmIGNdLCBSZSA9IDA7IFJlIDwgTGU7ICsrUmUpIFUucmVhZE1vcmVJbnB1dCgpLCAwID09PSBuZVswXSAmJiAobShhZVswXSwgdiwgMCwgb2UsIGllLCBzZSwgVSksIG5lWzBdID0gdShBLCAwLCBVKSwgZmUgPSBvZVswXSA8PCBULCBjZSA9IGZlLCBlZSA9IGxlW29lWzBdXSwgYmUgPSBXLmxvb2t1cE9mZnNldHNbZWVdLCB5ZSA9IFcubG9va3VwT2Zmc2V0c1tlZSArIDFdKSwgTmUgPSBXLmxvb2t1cFtiZSArIHFdIHwgVy5sb29rdXBbeWUgKyBWXSwgaGUgPSBkZVtjZSArIE5lXSwgLS1uZVswXSwgViA9IHEsIHEgPSBzKFlbMF0uY29kZXMsIFlbMF0uaHRyZWVzW2hlXSwgVSksIGhbeCAmIGNdID0gcSwgKHggJiBjKSA9PT0gYyAmJiB0LndyaXRlKGgsIGQpLCArK3g7IGlmIChyZSAtPSBMZSwgcmUgPD0gMCkgYnJlYWs7IGlmIChPZSA8IDApIHsgdmFyIE5lOyBpZiAoVS5yZWFkTW9yZUlucHV0KCksIDAgPT09IG5lWzJdICYmIChtKGFlWzJdLCB2LCAyLCBvZSwgaWUsIHNlLCBVKSwgbmVbMl0gPSB1KEEsIDIxNjAsIFUpLCBwZSA9IG9lWzJdIDw8IEksIHdlID0gcGUpLCAtLW5lWzJdLCBOZSA9IDI1NSAmIChXZSA+IDQgPyAzIDogV2UgLSAyKSwgbWUgPSB1ZVt3ZSArIE5lXSwgT2UgPSBzKFlbMl0uY29kZXMsIFlbMl0uaHRyZWVzW21lXSwgVSksIE9lID49IFgpIHsgdmFyIEhlLCBTZSwgVGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPZSAtPSBYLCBTZSA9IE9lICYgSywgT2UgPj49IGosIEhlID0gKE9lID4+IDEpICsgMSwgVGUgPSAoMiArICgxICYgT2UpIDw8IEhlKSAtIDQsIE9lID0gWCArIChUZSArIFUucmVhZEJpdHMoSGUpIDw8IGopICsgU2UgfSB9IGlmIChNZSA9IGYoT2UsIFAsIEQpLCBNZSA8IDApIHRocm93IG5ldyBFcnJvcigiW0Jyb3RsaURlY29tcHJlc3NdIGludmFsaWQgZGlzdGFuY2UiKTsgaWYgKFIgPSB4IDwgYSAmJiBSICE9PSBhID8geCA6IGEsIENlID0geCAmIGMsIE1lID4gUikgeyBpZiAoIShXZSA+PSBrLm1pbkRpY3Rpb25hcnlXb3JkTGVuZ3RoICYmIFdlIDw9IGsubWF4RGljdGlvbmFyeVdvcmRMZW5ndGgpKSB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgYmFja3dhcmQgcmVmZXJlbmNlLiBwb3M6ICIgKyB4ICsgIiBkaXN0YW5jZTogIiArIE1lICsgIiBsZW46ICIgKyBXZSArICIgYnl0ZXMgbGVmdDogIiArIHJlKTsgdmFyIFRlID0gay5vZmZzZXRzQnlMZW5ndGhbV2VdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWUgPSBNZSAtIFIgLSAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGUgPSBrLnNpemVCaXRzQnlMZW5ndGhbV2VdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGUgPSAoMSA8PCBQZSkgLSAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmUgPSBJZSAmIERlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcWUgPSBJZSA+PiBQZTsgaWYgKFRlICs9IEZlICogV2UsICEocWUgPCBNLmtOdW1UcmFuc2Zvcm1zKSkgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIGJhY2t3YXJkIHJlZmVyZW5jZS4gcG9zOiAiICsgeCArICIgZGlzdGFuY2U6ICIgKyBNZSArICIgbGVuOiAiICsgV2UgKyAiIGJ5dGVzIGxlZnQ6ICIgKyByZSk7IHZhciBWZSA9IE0udHJhbnNmb3JtRGljdGlvbmFyeVdvcmQoaCwgQ2UsIFRlLCBXZSwgcWUpOyBpZiAoQ2UgKz0gVmUsIHggKz0gVmUsIHJlIC09IFZlLCBDZSA+PSBnKSB7IHQud3JpdGUoaCwgZCk7IGZvciAodmFyIFplID0gMDsgWmUgPCBDZSAtIGc7IFplKyspIGhbWmVdID0gaFtnICsgWmVdIH0gfSBlbHNlIHsgaWYgKE9lID4gMCAmJiAoUFszICYgRF0gPSBNZSwgKytEKSwgV2UgPiByZSkgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIGJhY2t3YXJkIHJlZmVyZW5jZS4gcG9zOiAiICsgeCArICIgZGlzdGFuY2U6ICIgKyBNZSArICIgbGVuOiAiICsgV2UgKyAiIGJ5dGVzIGxlZnQ6ICIgKyByZSk7IGZvciAoUmUgPSAwOyBSZSA8IFdlOyArK1JlKSBoW3ggJiBjXSA9IGhbeCAtIE1lICYgY10sICh4ICYgYykgPT09IGMgJiYgdC53cml0ZShoLCBkKSwgKyt4LCAtLXJlIH0gcSA9IGhbeCAtIDEgJiBjXSwgViA9IGhbeCAtIDIgJiBjXSB9IHggJj0gMTA3Mzc0MTgyMyB9IH0gdC53cml0ZShoLCB4ICYgYykgfSB2YXIgVSA9IGUoIi4vc3RyZWFtcyIpLkJyb3RsaUlucHV0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGUoIi4vc3RyZWFtcyIpLkJyb3RsaU91dHB1dCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUgPSBlKCIuL2JpdF9yZWFkZXIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBlKCIuL2RpY3Rpb25hcnkiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEIgPSBlKCIuL2h1ZmZtYW4iKS5IdWZmbWFuQ29kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwgPSBlKCIuL2h1ZmZtYW4iKS5Ccm90bGlCdWlsZEh1ZmZtYW5UYWJsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFcgPSBlKCIuL2NvbnRleHQiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE8gPSBlKCIuL3ByZWZpeCIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgTSA9IGUoIi4vdHJhbnNmb3JtIik7IGNvbnN0IE4gPSA4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgUiA9IDE2LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQyA9IDI1NiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEggPSA3MDQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTID0gMjYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUID0gNiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkgPSAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgUCA9IDgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEID0gMjU1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgRiA9IDEwODAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxID0gMTgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWID0gbmV3IFVpbnQ4QXJyYXkoWzEsIDIsIDMsIDQsIDAsIDUsIDE3LCA2LCAxNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWiA9IDE2LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWSA9IG5ldyBVaW50OEFycmF5KFszLCAyLCAxLCAwLCAzLCAzLCAzLCAzLCAzLCAzLCAyLCAyLCAyLCAyLCAyLCAyXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6ID0gbmV3IEludDhBcnJheShbMCwgMCwgMCwgMCwgLTEsIDEsIC0yLCAyLCAtMywgMywgLTEsIDEsIC0yLCAyLCAtMywgM10pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgRyA9IG5ldyBVaW50MTZBcnJheShbMjU2LCA0MDIsIDQzNiwgNDY4LCA1MDAsIDUzNCwgNTY2LCA1OTgsIDYzMCwgNjYyLCA2OTQsIDcyNiwgNzU4LCA3OTAsIDgyMiwgODU0LCA4ODYsIDkyMCwgOTUyLCA5ODQsIDEwMTYsIDEwNDgsIDEwODBdKTsKICAgICAgICAgICAgICAgICAgICAgICAgcC5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24oZSkgeyB2YXIgdCwgciwgbiA9IDA7IGZvciAodCA9IDA7IHQgPCB0aGlzLm51bV9odHJlZXM7ICsrdCkgdGhpcy5odHJlZXNbdF0gPSBuLCByID0gbCh0aGlzLmFscGhhYmV0X3NpemUsIHRoaXMuY29kZXMsIG4sIGUpLCBuICs9IHIgfSwgci5Ccm90bGlEZWNvbXByZXNzZWRTaXplID0gZywgci5Ccm90bGlEZWNvbXByZXNzQnVmZmVyID0gdiwgci5Ccm90bGlEZWNvbXByZXNzID0gQSwgay5pbml0KCkgfSwKICAgICAgICAgICAgICAgICAgICAiZGVjL2RpY3Rpb25hcnkuanMiOiBmdW5jdGlvbihlLCB0LCByKSB7IHZhciBuID0gZSgiLi9kaWN0aW9uYXJ5LWJyb3dzZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgci5pbml0ID0gZnVuY3Rpb24oKSB7IHIuZGljdGlvbmFyeSA9IG4uaW5pdCgpIH0sIHIub2Zmc2V0c0J5TGVuZ3RoID0gbmV3IFVpbnQzMkFycmF5KFswLCAwLCAwLCAwLCAwLCA0MDk2LCA5MjE2LCAyMTUwNCwgMzU4NDAsIDQ0MDMyLCA1MzI0OCwgNjM0ODgsIDc0NzUyLCA4NzA0MCwgOTM2OTYsIDEwMDg2NCwgMTA0NzA0LCAxMDY3NTIsIDEwODkyOCwgMTEzNTM2LCAxMTU5NjgsIDExODUyOCwgMTE5ODcyLCAxMjEyODAsIDEyMjAxNl0pLCByLnNpemVCaXRzQnlMZW5ndGggPSBuZXcgVWludDhBcnJheShbMCwgMCwgMCwgMCwgMTAsIDEwLCAxMSwgMTEsIDEwLCAxMCwgMTAsIDEwLCAxMCwgOSwgOSwgOCwgNywgNywgOCwgNywgNywgNiwgNiwgNSwgNV0pLCByLm1pbkRpY3Rpb25hcnlXb3JkTGVuZ3RoID0gNCwgci5tYXhEaWN0aW9uYXJ5V29yZExlbmd0aCA9IDI0IH0sCiAgICAgICAgICAgICAgICAgICAgImRlYy9kaWN0aW9uYXJ5LmJpbi5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdC5leHBvcnRzID0gIlc1L2ZjUUxuNWdLZjJYVWJBaVExWFVMWCtUWno2QURUb0RzZ3FrNnFWZmVDMGU0bTZPTzJ3Y1ExSjc2WkJWUlYxZlJrRXNkdS8vNjJ6UXNGRVpXU1RDbk1oY3NRS2xTMnFPaHVWWVlNR0NrVjBmWFdFb01GYkVTWHJLRVo5d2RVRXN5dzlnNGJKbEV0MVk2b1ZNeE1SVEVWYkNJd1p6Snpib0s1ajhtNFlIMDJxZ1hZaHYxVitQTTQzNXNMVnh5SEppaGFKUkVFaFpHcUwwM3R4R0ZRTG03NmNhR08vb3Z4S3Z6Q2J5LzN2TVR0WC80NTlmMGlnaTdXdXRuS2lNUTZ3T0RTb1JoLzhMeDFWM1E5OU12S3R3QjZiSGRFUllSWTBoU3RKb01qTmVUc05YN2JuK1k3ZTRFUTNiZjh4QmM3TDBCc3lmRlBLNDNkR1NYcEw2Y2xZQy9JMzI4aDU0L1ZZclE1aTA2NDhGZ2JHdGw4MzdzdkozNUwzTW90LytuUGxOcFdnS3gxZ0dYUVlxWDZuK2JiWjd3dXlDSEtjVW9rMTJYanF1YjdOWFpHenFCeDBTRCt1emlOZjg3dDd2ZTQyanhTS1FvVzNueXhWcldJR2xGU2hoQ0t4anBaWjVNZUduYTArbEJraytrYU44RjlxRkJBRmdFb2d5TUJkY1gvVDFXL1duTU9pLzd5Y1dVUWxvRUJLR2VDNDhNa2l3cUprSk8rMTJlUWlPRkhNbWNrNnEvSWpXVzNSWmxhbnkyM1RCbStjTnIvODQvb2k1R0dtR0JaV3JaNmorenlrVm96ejVmVC9RSC9EYTZXVGJaWVlQeW5WTk83a3h6dU5OMmt4S0tXY2hlNVd2ZWl0UEtBZWNCOFljQUh6Lyt6WExqY0x6a2REU2t0TklEd1pFOUo5WCt0dG80M29KeTY1d0FwTTNtRHpZdEN3WDlsTStONVZSM2tYWW8wWjN0MFR0WGZnQkZnN2dVOG9OMERnbDdmWmxVYmhObGwrMHV1b2hSVktqckVkOGVnclNuZHk1L1RnZDJncWpBNENBVnVDN0VTVW1MM0Rab0duZmhRVjh1d25waThFR3ZBVlZzb3dOUnhQdWRjazcrb3FBVURrd1pvcFdxRm5XMXJpc3MwdDF6NmlDSVNWS3JlWUdOdlFjWHYrMUw5K2piUDhjZC9kUFVpcUJzbzJxKzdaeUZCdkVOQ2trVnI0NGl5UGJ0T29Pb0NlY1dzaXVxTVNNTDVsdit2TjVNelVyK0RuaDczRzdRMVluUllKVllYSFJKYU5BT0J5aWFLNkN1c2dGZEJQRTQwcjBydnFYVjd0a3NLTzJEckhZWEJUdjhQNXlzcXhFeDhWRFhVRERxa1BINk5OT1YvYTJXSDh6bGtYUkVMU2E4UCtoZU55SkJCUDdQZ3NHMUV0V3ROZWY2L2krbGNheXpRd1FDc2R1aWRwYktmaFdVRGdBRW15aEd1L3pWVGFjSTZSUzB6VEFCck9ZdWVlbW5WYTE5dTlmVDIzTi9UYTZSdlRwb2Y1RFd5Z3FyZUNxckRBZ000TElEMSsxVC90YVU2eVRGVkxxWE92Ky9NdVFPRm5hRjh2TE1LRDd0S1dEb0JkQUxneEYzM3pRY2NDY2RIeDhmS0lWZFc2OU83cUh0WHBlR3I5amJicEZBK3FSTVdyNWhwMHM2N0ZQYzdIQWlMVjBnMC9wZVpsVzdoSlBZRWhaeWhwU3dhaG5mOTMvdFpnZnFaV1hGZG1kWEJ6cXhHSExyUUt4b0FZNmZSb0JoZ0NSUG1tR3VlWVo1SmV4VFZES1VJWHprRy9mcXAvMFUzaEFnUWRKOXp1bXV0SzZucVdiYXF2bTFwZ3UwM0lZUitHKzhzMGpEQkJ6OGNBcFpGU0JldVdhc3lxbzJPTURLQVpDb3pTK0dXU3ZML0hzRTlySHhvb2UxN1Uzcy9sVEUrVlpBazRqM2RwNnVJR2FDMEpNaXFSNUNVc2FiUHlNMGRPWURSN0VhN2lwNFVTWmx5YTM4WWZQdHZyWC90QmxoSGlsajU1bloxbmZOMjRBT0FpOUJWdHovTWJuOEFFREpDcUpnc1ZVYTZuUW5TeHYyRnM3bC9ObEN6cGZZRWptUHJOeWliLyt0MGVpMmVFTWp2TmhMa0hDWmxjaTRXaEJlN2VQWlRtellxbFk5KzFweHRTNEdCKzVsTTFCSFQ5dFMyNzBFV1VEWUZxMUkweVkvZk5pQWs0Yms5eUJnbWVmL2YyazZBbFlRWkhzTkZuVzh3QlF4Q2Q2OGlXdjcvMzViWGZ6M0pabWZHbGlnV0FLUmpJczNJcHp4UTI3dkFnbEhTaU96Q1l6SjlMOUExQ2RpeUZ2eVI2NnVjQTRqS2lmdTVlaHdFUjI2eVY3SGpLcW41TWZvem83Q294eHQ4TFdXUFQ0N0JlTXhYOHAwUGpiN2habis2Ync3ejNMdys3NjUzajVzSThDTHU1a1RocE1sajFtNGMyY2gzakdjUDFGc1QxM3Z1SzNxamVjS1RaazJrSGNPWlk0MFVYK3FkYXhzdFpxc3FRcWdYeitRR0Y5OVpKTHFyM1ZZdTRhZWNsMUFiNUdtcVM4ay9HVjViOTV6eFE1ZDRFZlhVSjZrVFMvQ1hGL2FpcUtET1QxVDdKejV6MFB3RFVjd3I5Y2xMTjFPSkdDaUtmcXZhaCtoM1h6ckJPaUxPVzh3dm44Z1c2cUU4dlB4aStFZnYrVUg1NVQ3UFFGVk1oNmNaMXBaUWx6SnBLWjdQN3VXdndQR0o2RFRsUjZ3YnlqM0l2Mkh5ZWZuUm8vZHY3ZE54K3FhYTBOMzhpQnNSKytVaWw3V2Q0YWZ3RE5zcnpEQUs0Zlhad3ZFWS9qZEt1SUtYbGZyUWQyQzM5ZFc3bnRuUmJJcDlPdEd5OXBQQm4vVjJBU29pLzJVSlpmUyt4dUdMSDhibkx1UGx6ZFROUzZ6ZHlrOER0L2g2c2ZPVzVteXhoMWYremYzelozTVgvbU85Y1FQcDVwT3g5NjdaQTYvcHFIdmNsTmZuVUZGK3JxK1ZkN2FsS3I2S1dQY0lEaHBuNnYySzZObFV1NkxyS284Yi9wWXBVL0dhemZ2dHdobjd0RU9VdVhodDVyVUpkU2Y2c0xqWWYwVlRZRGd3SjgxeWFxS1RVWWVqL3RiSGNrU1JiL0haaWN3R0pxaDFtQUhCL0l1TnM5ZGM5eXV2RjNENVhvY20zZWxXRmRxNW9FeTcwZFlGaXQ3OXlhTGlOalBqNVVVY1ZtWlVWaFFFaFc1VjJaNkNtNEhWSC9SOHFsYW1SWXdCaWxldWgwN0NiRWNlM1RYYTJKbVhXQmYrb3p0MzE5cHNib29iZVpoVm53aE1aek9lUUp6aHBURGJQNzFUdjhIdVp4eFVJLyttYTNYVzZERkREczQrcW1wRVJ3SEdCZDJlZHh3VUtsT0RSZFVXWi9nMEdPZXpyYnpPWmF1Rk1haTRRVTZHVkhWNmFQTkJpQm5kSFNzVjRJenB2VWlpWXlnNk95eXJMNERqNXEvTHczTjVrQXdmdEVWbDlyTmQ3Sms1UERpajJoVEg2d0lYbnN5WGtLZVB4Ym1IWWdDOEE2YW41Rm9iL0tINUd0QzBsNGVGc28rVnB4ZWR0SkhkSHBObStCdnk0Qzc5eVZPa3Jac0xyUTNPSENlQjBSYStrQklSbGRVR2xEQ0VtcTJSd1huZnloNkR6K2FsazZlZnRJMm42c2FzdFJyR3did3N6QmVEUlMvRmEvS3dSSmtDelRzTHIvSkNzNWhPUEUvTVBMWWRaMUYxZnY3RCtWbXlzWDZOcE9DOGFVOUY0UXM2SHZEeVV5OVB2RkdES1ovUDUxMDFUWUhGbDhwamo2d20vcXlTNzVldFpoaGZnMFVFTDRPWW1IazZtNmRPMTkyQXpvSXlQU1Y5UWVkREE0TWwyM3JSYnF4TVBNeGY3RkpuRGM1RlRFbFZTL1B5cWdlUHptd1ZaMjZOV2hSRFErb2FUN2x5N2VsbDRzM0R5cFMxczBnK3RPcjdYSHJya1pqOSt4L21KQnR0ckx4OThsRklhUlp6SHo0YUM3cjUyL0pRNFZqSGFoWTIvWVZYWm4vUUMyenRRYi9zWTN1Umx5YzV2UVM4bkxQR1QvbjI3NDk1aThIUEExNTJ6N0ZoNWFGcHluMUdQSktIdVBMOEl3OTREdVczS2prVVJBV1pYbjRFUXk4OXhpS0VITjFtay90a000Z1lEQnh3Tm9ZdlJmRTZMRnFzeFdKdFByREdic25MTWFwM0thM01Vb3l0VzBjdmllb3pPbWRFUm1oY3F6RyszSG1adjJ5WmVpSWVRVEtHZFJUNEhITnhla20xdFkrL24wNnJHbUZsZXFMc2NTRVJ6Y3RUS002RzlQMFBjMVJtVnZyYXNjSXhhTzFDUUNpWVBFMTViRDdjM3hTZVc3Z1h4WWpneGNyVWxjYkl2TzByK1lwbGh4MGtUdDNxYWZET21GeU1qZ0d4WHU3M3JkZE1IcFYxd011YnlBR2NmL3Y1ZExyNVA3MlRhOWxCRitmek1Kck15Y3d2Kzl2blUzQU5JbDFjSDl0Zlc3YWY4dTAvSEcwdlY0N2pORlh6RlR0YWhhMXh2emUvczhLTXRDWXVjWGMxbnpmZC9NUXlkVVhuL2I3MlJCdDV3Ty8zalJjTUg5QmRoQy95Y3RLQkl2ZVJZUHJOcERXcUJzTzhWTW1QK1d2UmFPY0E0elJNUjFQdlNvTzkyclM3cFlFditmWmZFZlRNekVkTSs2WDV0TGx5eEV4aHFMUmttczVFdUxvdkxmeDY2ZGU1ZkwyL3lYMDJINTJGUFZ3YWhyUHFtTi9FMG9WWG5zQ0toYmkveVJ4WDgzblJiVUtXaHpZY2VYT250ZnVYbjUxTnN6SjZNTzczcFFmNVBsNGluM2VjNEpVOGhGN3BwVjM0K21tOXIxTFkwZWUvaTFPMXdwZDgremZMenRFMGNxQnhnZ2lCaTVCdTk1djlsM3I5ci9VNWh3ZUxuK1RiZnhvd3JXRHFkSmF1S2Q4K3EvZEg4c2JQa2M5dHR1eU85NGY3L1hLL25IWDQ2TVBGTEViNXFRbE5QdmhKNTAvNTl0OWZ0M0xYdTd1VmFXYU8yYkRyRENuUlN6WnlXdkZLeE8xK3ZUOE13d3VuUjNiWDBDa2ZQanFiNEs5TzE5dG41WDUwUHZtWXBFd0h0aVc5V3R6dVYvczc2QjF6dkxMTmtWaU5kOHlTeElsLzNvcmZxUDkwVHlUR2FmNy9yeDhqUXplSEpYZG1oL042WUR2YnZtVEJ3Q2R4ZkVRMU5jTDZ3Tk1kU0lYTnE3YjFFVXpSeTEvQXhzeWs1cDIyR01HMWIrR3hGZ2JIRXJaaDkyd3V2Y28wQXVPTFhjdDlodncybncvTHFJY0RSUm1KbW1aemNnVWE3SnBNL1dWL1M5SVVmYkY1NlRMMm9yenF3ZWJkUkQ4bklZTko0MUQvaHozN0ZvMTFwMlkyMXd6UGNuNzEzcVZHaHF0ZXZTdFlmR0g0bjY5T0VKdFB2YmJMWVd2c2NEcWMzSGdudTE2Nit0QXlMbnhyWDBZNXpvWWpWKysxc0k3dDVrTXIwMktULyt1d3RrYytyWkxPZi9xbi9zM25ZQ2YxM0RnOC9zQjJkaUpnakdxalErVExoeGJ6eXVlMk9iN1g2LzlsVXdXN2ErbGJ6bkh6T1l5OExLVzFDL3VSUGJRWTNLVy8wZ085TFh1bkhMdlBMOTdhZmJhOWJGdGM5aG16N0dBdHRqVllsQ3ZRQWlPd0FrL2dDNStoa0xFczZ0cjNBWkt4TEp0T0V3azJkTHhUWVdzSUIvai9Ub1d0SVd6bzkwNkZyU0c4aWFxcXFxcXFpSWlJaUFnek16TXpOeitBeUsrMDEvemk4bjhTK1kxTWpvUmFRODBXVS9HOE1CbE8rNTNWUFhBTnJXbTR3ekdVVlpVampCSlpWZGhwY2ZranNtY1dhTytVRWxkWGkxZSt6cStIT3NDcGtuWXNodWg4cE9MSVNKdW43VE4wRUlHVzJ4VG5sT0ltZWVjbm9HVzRyYXhlMkcxVDNIRXZmWVVZTWhHK2dBRk9Bd2g1bks4bVpod0pNbU43cjIyNFFWc05Gdlo4N1owcWF0dmtua2x5UERLM0h5NDVQZ1ZLWGppNTJXZW40ZDRQbEZWVllHbk5hcCtmU3BGYks5MHJZbmhVYzZuOTFRM0FZOUUwdEpPRnJjZlp0bS80OTFYYmNHL2pzVmlVUFBYNzZxbWV1aXorcVkxSGs3LzFWUE00MDV6V1Z1b2hlTFVpbXBXWWRWekNtVWRLSGViTWR6Z3JZcmI4bUwyZWVMU25SV0hkb25mWmE4UnNPVTlGMzd3KzU5MWw1RkxZSGlPcVdlSHRFL2xXckJIY1JLcDN1aHRyOHlYbThMVS81bXMrTk02WktzcXU5MGNGWjRvNTgrazRyZHJ0Qjk3TkFERmJ3bUVHN2xYcXZpcmhPVE9xVTE0eHVVRjJteUlqVVJjUEhyUE9RNGxtTTNQZU1nN2JVdWswbm5aaTY3YlhzVTZIOGxocUlvOFRhT3JFYWZDTzFBUks5UGpDMFFPb3EyQnhtTWRnWUI5Ry9sSWI5KytmcU5KMnM3QkhHRnlCTm1aQVI4SjNLQ28wMTJpa2FTUDhCQ3JmNlZJMFg1eGRuYmhISU8rQjVyYk95QjU0elhremZPYnlKNGVjd3hmcUJKTUxGYzdtNTlyTmN3N2hvSG5GWjBiMDB6ZWUrZ1RxdmptNjFQYjR4bjBrY0RYNGp2SE0wckJYWnlwRzNEQ0tuRC9XYWEvWnRIbXRGUGdPNWVFVHgrazdSclZnM2FTd20yWW9OWG5DczNYUFFEaE5uK0ZpYTZJbE9PdUlHNlZKSDdUUDZhdmEyNmVoS0hRYTJUNE4wdGNaOWRQQ0dvM1pkbk5sdHNIUWJlWXQ1dlBuSmV6Vi9jQWVOeXBkbWwxdkNISThNODFuU1JQNVFpMittSTh2L3N4aVpydTkxODduUnRwM2YvNDJOZW1jT05hKzRlVkMzUENaemM4OGFaaDg1MUNxU3NzaGU3MHVQeGVOL2RtWXdsd2IzdHJ3TXJOMUdxOGpibkFwY1ZEeC95RFBlWXM1LzdyNjJ0c1E2bExnK0RpRlhURWh6UjlkSHF2MGlUNHRnajgyNVcrSDNYaVJVTlVaVDJrUjlSaTArbHArVU0zaVF0Uzh1T0UyM0x5NEtZdHZxSDEzamdoVW50SlJBZXd1ek5MRFhwOFJ4ZGNhQTNjTVk2VE8ySWVTRlJYZXplV0lqQ3F5aHNVZE1ZdUNnWVRaU0twQnlwZTF6UmZxOEZzaHZmQlBjNkJBUVdsNy9ReElEcDNWR28xSjN2bjQyT0VzM3F6bndzK1lMUlhieW15QjE5YTlYQng2bi9vd2N5eGxFWXlGV0NpK2tHOUYrRXlELzR5bjgwK2FnYVo5UDdheTJEbnk5OWFLMm85MUZrZkVPWThoQnd5Zmk1dXd4Mnk1U2FIbUcrb3EvemwxRlgvOGlyT2Y4WTN2QWNYLzZ1TFA2QTZudk1PMjRlZFNHUGpRYzgyN1J3MmF0WCt6MmJLcTBDbVc5bU90WW5yNS9BZkRhMVpmUGFYbkt0bFdib3J1cDdRWXgrT3IydVdiK04zTi8vMit5RGNYTXFJSmRmNTV4bDcvdnNqNFdvUFBseEx4dFZya0o0dy90VGUzbUxkQVRPT1l3eGNxNTJ3NVd4ejVNYlBkVnM1TzgvbGhmRTdkUGowYklpUFEzUVYwaXFtNG0zWVg4aFJmYzZqUTNmV2VwZXZNcVVESmQ4Nlo0dndNNDBDV0hubitXcGhzR0hmaWVGMDJEM3RtWnZwV0Qra0JwTkNGY0xuWmhjbW1yaHBHenpiZEErc1ExYXIxOE9KRDg3SU9LT0ZvUk56bmFIUE5IVWZVTmh2WTFpVSt1aHZFdnBLSGFVbjNxSzNleFZWeVg0am9pcHAzdW03Rm1ZSldtQStXYklEc2hScGJWUng1L25xc3RDZ3k4N0ZHYmZWQjh5REdDcVMrMnFDc25Sd25TQU42emd6eGZkQjJuQlQvdlo0LzZ1eGI2b0g4YjRWQlJ4aUlCOTN3TGE0N2hHM3cyU0wvMloyN3lPWEpGd1pwU0phQll5dmFqQTd2UlJZTktxbGpYS3B0L0NGRC90U01yMThES0tid0IweGdnQmVQYXRsMW5raTB5dnFXNXpjaGx5Wm1KME9UeEozRCtmc1lKcy9teFlONStMZTVvYWd0Y2wrWXNWdnk4a1NqSTJZR3ZHanZtcGtSUzlXMmR0WHFXblZ1eFVoVVJtMWxLdG91L2hkRXExOVZCcDlPakd2SEVRU21ycHVmMlIyNG1YR2hlaWw4S2VpQU5ZOGZXMVZFUlVmQkltYjY0ajEyY2FCWm1SVmlaSGJlVk1qQ3JQRGc5QTkwSVhydG5zWUN1WnRSUTBQeXJLRGpCTk9zUGZLc2cxcEEwMmdIbFZyME9YaUZodHA2bkpxWFZ6Y2JmTTBLbnpDM2dnT0VOUEU5VkJkbUhLTjZMWWFpamI0d1h4Sm41QTBGU0RGNWoraDFvb1p4ODg1SnQzWkt6TzVuN1o1V2ZORU90eXlQcVFFbm43V0x2NUZpczNQZGdNc2hqRjFGUnlkYk55ZUJieUtJMW9OMVRSVnJWSzdrZ3NiL3pqWDRORFBJUk1jdFZlYXhWQjM4VmgxeDVLYmVKYlUxMzhBTTVLem1adTN1bnkwRXJ5Z3hpSkY3R1ZYVXJQekZ4cmx4MXVGZEFhWkZETjljdkliNzRxRDl0ekJNbzdMN1dJRVlLK3NsYTFEVk1IcEYwRjdiMytZNlMremp2TGVETUNwYXBtSm8xd2VCV3V4S0Yzck9vY2loMWd1bjRCb0poMWtXblYvSm1pcTZ1T2hLM1ZmS3hFSEVrYWZqTGdLM291amFQelk2U1hnOHBoaEw0VE5SMXh2SmQxV2EwYVlGZlBVTUxyTkJEQ2g0QXVHUlRidEtNYzZaMVVkajhldlkvWnBDdU1BVWVmZG82OURaVW5nb3FFMVA5QTNQSmZPZjdXaXhDRWorWTZ0N2ZZZUhiYnhVQW9GVjNNODljQ0tmbWEzZmMxK2pLUmU3TUZXRWJRcUVmeXpPMngvd3JPMlZZSDdpWWRROUJrUHlJOC8za1hCcExhQ3BVN2VDMFl2L2FtL3RFRHU3SFpwcWcwRXZIbzBuZi9SL2dSelVXeTMzL0hYTUpRZXUxR3lsS21Pa1h6bENmR0ZydUFjUFBoYUdxWk90dTE5enNKMVNPMkp6NFp0dGg1Y0JYNm1SUXdXbUR3cnlHOUZVTWxaek5ja01kSytJb01KdjFyT1duQmFtUzJ3MktIaWFQTVBMQzE1aENabTRLVHBvWnlqNEUyVHFDL1A2cjcvRWhuRE1oS2ljWloxWnd4dUM3RFB6REdzNTNxOGdYYUk5a0ZUSysyTFRxN2Jod3NUYnJNVjhSc2Z1YTVsTVMwRndiVGl0VVZuVmExeVRiNUlYNTFtbVluVWNQOXdQcjhKaTF0aVlKZUpWOUdaVHJRaEY3dnZkVTJPVFU0Mm9nSjlGRHdobXljSTJMSWcrKzAzQzZzY1loVXlVdU1WNXRrdzZrR1VvTCttak5DMzgrd01kV05sam42dEdQcFJFUzd2ZXFyU241VFJ1ditkaDZKVkwvaURIVTFkYjRjOVdLMysrT3JIM1BxemlGOTE2VU1VS244RzY3bk42MEdmV2lIclhZaFVHM3lWV215WWFrNTlOSGo4dDFzbUc0VURpV3oyclBITnJLbk40Wm8xTEJicjIvZUY5WVowbjBibHgybkc0WCtFS0Z4dlMzVzI4SkVTRCtGV2s2MVZDRDN6L1VSR0hpSmwrKzdUZEJ3a0NqNnRHT0gzcURiMFFxY09GOUt6cGowSFViL0t5RlczWWhqMlZNS0pxR1psZUZCSDd2cXZmN1dxTEMzWE11SFY4cThhNHNURnV4VXRrRC82SklCdkthVmp2OTZuZGdydUtaMWsvQkh6cWYySzlmTGs3SEdYQU55TERkMXZ4a0svaTA1NXBuemwrenc2ekxud1hsVllWdGZtYWNKZ0VwUlAxaGJHZ3JZUFZONnYybEcraWRRTkdtd2NLWHUvOHhFai9QNnFlL3NCMldtd05wNnBwOGphSVNNa3dkbGVGWFlLNTVOSFdMVFRidXRTVXFqQmZER1dvL1lnOTE4cVErOEJSWlNBSFpiZnVOWnoyTzBzb3YxVWU0Q1dsVmczckZoTTNLbGpqOWtzR2QvTlVoazRuSCthNVVOMisxaTgrTk0zdlJOcDd1UTZzcWV4U0N1a0VWbFZacmlITnFGaTVyTG05VE1XYTRxbTNpZEpxcHBRQUNvbDJsNFZTdXZXTGZ0YTRKY1h5M2JST1BOYlhPZ2RPaEc0N0xDMEN3Vy9kTWxTeDRKZjE3YUVVM3lBMXg5cCtZYzBqdXBYZ2NNdVlOa3U2NGlZT2tHVG9WRHVKdmxiRUtsSnFzbWlIYnZOcklWWkVIK3lGZEY4RGJsZVo2aU5pV3dNcXZ0TXAvbVNwd3g1S3hSclQ5cDNNQVBUSEd0TWJmdmRGaHlqOXZoYUtjbjNBdDhMYzE2QWkrdkJjU3AxenRYaTdyQ0paeC9xbDdUWGNjbHE2UTc2VWVLV0R5OWJvUzBXSElqVXVXaFBHOExCbVc1eTJyaHVUcE01dnNMdCtIT0xoMVlmMERxWGE5dHNmQytrYUt0Mmh0QTBhaS9MMmk3UktvTmpFd3p0a21SVTBHZmdXMVR4VXZQRmhnMFY3RGRmV0prNWdmcmNjcFl2K01BOU0wZGtHVExFQ2VZd1VpeFJ6alJGZG1qRzd6ZFpJbDNYS0I5WWxpTktJMzFsZmE3aTJKRzVDOFNzK3JIZTBEN1o2OTYvVjNERUFPV0huUTl5TmFoTVVsNWtFTldTNnBIS0twMkQxQmFTcnJIZEUxdzJxTnhJenRwWGdVSXJGMGJtMTVZTUw0YjZWMWsrR3BOeXNUYWhLTVZyclM4NWxUVm85T0dKOTZJNDdlQXk1cllXcFJmL21JemVvWVUxREthUUNUVVZ3cmhIZXlOb0RxSGVsK2xMeHI5V0t6aFNZdzd2clI2K1Y1cTBwZmkyazNMMXpxa3ViWTZycmQ5Wkx2U3VXTmYwdXFua1krRnBUdkZ6U1c5RnAwYjlsOEpBN1RIVjllQ2kvUFkvU0NaSVVZeDNCVTJhbGo3Q20zVlY2ZVlwaW9zNGI2V3VOT0pkWVhVSzN6VHFqNUNWRzJGcVlNNFo3Q3VJVTBxTzA1WFIwZDcxRkhNMFloWm1KbVRSZkxsWEV1bU44MkJHdHpkWDBTMTl0MWUrYlVpZUs4elJtcXBhNFFjNVRTamlmbWFRc1kyRVRMamhJMzZnTVIxKzdxcGpkWFhIaWNlVWVrZkJhdWNIU2hBT2lGWG12M3NObUdReVU1aVZnbm9vY3VvblFYRVBURndzbEh0UzhSK0E0N1N0STl3ajBpU3J0Ymk1ck15c2N6RmlJbXNRK2JkRkNsbkZqanBYWHdNeTZPN3Fmak9yOEZiMGE3T0RJdGlzam5uM0VRTzE2K3lwZDFjd3lhQVc1WXp4ejVRa25mTU83NjQzZlhXL0k5eTNVMnhIMjdPYXBxcjU2Wi90RXpnbGo2SWJUNkhFSGpvcGlYcWVSYmU1bVFRdnh0Y2JET1Z2ZXJOMFpnTWR6cVJZUmphWHRNUmQ1NlE0Y1pTbWRQdlpKZFNyaEoxRDl6TlhQcUFFcVBJYXZQZGZ1YnQ1b2tlMmttdjBkenRJc3pTdjJWWXVveWYxVXVvcGJzWWIrdVg5aDZXcHdqcGd0WjZmTk5hd05KNHE4TzNDRm9TYmlvQWFPU1pNeDJHWWFQWUIrckViNnFqUWlOUkZRNzZUdndORlZLRCtCaEg5VmhjS0dzWHptTUk3QnB0VS9DTldvbE03WXpST3ZwRkFudHNpV0pwNmVSMmQzR2FyY1lTaFZZU1VxaG1ZT1dqNUU5Nk5LMld2bVlOVGVZN1pzNFJVRWR2OWg5UVQ0RXNlS3Q2THpMcnFFT3MzaHhBWTFNYU5XcFNhNnpaeDhGM1lPVmVDWU1TODhXK0NZSER1V2U0eW9jNllLK2RqRHVFT3JCUjVsdmgwcitROXVNODhscmp4OXg5QXRncFFWTkU4ciszTzZHdnc1OUQra0JGL1VNWHlobGlZVXRQam12WEdZNkRrM3gra0VPVytHdGRNVkM0RVpUcW9TL2ptUjBQMExTNzVET2MvdzJ2bnJpOTdNNFNkYlo4cWVVN2dnOERWYkVSa1U1Z2VhTVFPM21ZclNZeUFuZ2VVUXFyTjBDMC92c0ZtY2dXTlhOZWlkc1RBajcvNE1uY0pSMGNhYUJVcGJMSzF5QkNCTlJqRXY2S3Z1VlNkcFBuRU1KZHNSUnRxSitVOHROMWdYQTRlUEhjNlpUMGV2aUk3M1VPSkYwZkVaOFlhbmVBUXFRZEdwaE52d000bklxUG5YeFYweEEwZm5DVCtvQWhKdXl3L3E4ak8weThDalN0ZVpFeHdCcElONlN2TnA2QTVHL2FiaTZlZ2VORC8xR1RndWh1TmphVWJiblNiR2Q0TDg5MzdFem0zNEV5aTZuMW1hZU9CeGgzUEkwanpKRGY1bWgvQnNMRDdGMkdPS3ZsQS81Z3R2eEkzL2VWNHNMZktXNVd5K29pbytlcy91NlQ4VVUrbnNvZnk1N0ljYi9KbFpIUEZ0Q2dkL3grYnd0M1pUK3hYVHRUdFRyR0FiNFFlaEM2WDlHKzhZVCtvemNMeERzZENqc3VPcXdQRm5yZExZYUZjOTJVaTBtNGZyMzlsWW1sQ2FxVGl0N0c2Ty8za1dEa2d0WGpOSDRCaUVtLytqZWdRbmloT3RmZmZuMzNXeHNGamhmTWQ0OEhUK2Y2bzZYNjVqN1hSOFdMU0hNRmt4YnZPWXNyUnNGMWJvd0R1U1ExOE1reGs0cXoyem9HUEw1ZnU5aDJIcW10MWFzbDNRM1l1M3N6T2Mrc3BpQ21YNEFFVEJNM3BMb1RZU3Azc1Z4YWh5aEw4ZUM0bVBOOWsyeDNvMHhraWl4SXpNM0NaRnpmNW9SNG1lY1E1K2F4MndDYWgzL2NybW5Ib3FSMCtLTWFPUHhSaWYxb0VGUkZPTy9rVFBQbXR3dytOZk1YeEVLNmduNmlVMzJVNmZGcnVJejhRNFdnbGp0bmFDVlRCZ1d4N2RpVWRzaEM5WkVhNXlLcFJCQmVXMTJyL2lOYy8rRWdOcW1oc3dOQjhTQm9paEhYZURGN3JyV0RMY210M1Y4R1lZTjdwWFJ5NERaamo0REp1VUJMNWlDM0RRQWFvbzR2a2Z0cVZUWVJHTFMzbUhaN2dkbWRUVHFiZ05OL1BUZFRDT1RnWG9sYzg4TWhYQUVVTWRYMGl5MUpNdWs1d0xzZ2V1MFFVWWx6MlM0c2tUV3dKejZwT20vOGlocm1nR2ZGZ3JpK1pXVUsyZ0FQSGdiV2E4amFvY2RTdU00RkpZb0tpY1lYL1pTRU5rZzlRMVp6SmZ3U2NmVm5SMkRlZ09Hd0N2bW9nYVdKQ0xRZXB2OVdObFU2UWdzbU93SUNxdVUyOE1sazNkOVc1RTgxbFUvNUV6MExjWDZsd0tNV0RObHVOS2ZCRFV5L3BoSmdCY01uZmtoOWlSeHJkT3pnczA4SmRQQjg1THdvK0dVU2I0dDNuQyswYnlxTVp0TzJmUUo0VTJ6R0lyNDl0LzI4cW1tR3YyUmFuREQ3YTNGRWNkdHV0a1c4dHd3d2xVU3BiOFFhbG9kZGRiQmZOSEtEUTgyOEJkRTdPQmdGZGlLWW9oTGF3RllxcHliUW94QVRacmhlTGhkSTcrMFpsdTlRMW15UmNkMTVyOVVJbThLMkxHSnhxVGVnbnRxTlZNS25mMWE4elFpeVVSMXJ4b3FqaUZ4ZUh4cUZjWVVUSGZEdTdyaGJXbmc2cU94T3NJKzVBMXA5bVJ5RVBkVmtUbEUyNHZZNTRXN2JXYzZqTWdadk5YZGZDOS85cTc0MDhLRHNiZEw3VXR6N1FGU0RldHoycGljQXJ6cmRwTDhPYUNIQzlWMjZScm9lbXREWjV5Tk0vS0drV015VG1mbkluRXZ3dFNEMjNVY0ZjamhhRTNWS3prb2FFTUtHQmZ0NFhiSU82Zm9yVFkxbG1HUXdWbUtpY0JDaUFyRHpFKzFvSXhFMDhmV2V2aUlPRDVUem5xSCtPb0hhZHZvT1AyMGRyTVBlNUlyZzNYQlF6aVcyWER1SFl6anFRUTR3eVNzc2pYVXM1SCt0M0ZXWU1IcHBVbkJITXgvbllJVDVkN09takRiZ0Q5RjZuYTNtNGw3S2RrZVNPM2tURVBYYWZpV2lub2dhZzdiNTJ0YWlaaEwxVFN2QkZtRVphZkZxMkg4a2hRYVpYdWl0Q2V3VDVGQmdWdFBLMGo0eFVIUGZVejNRMjhlYWMxWjEzOURBUDIzZGdraTk0RUM4dmJEUFRRQzk3SFBQU1dqVU5HNXRXS01zYXhBRU1LQzA2NjVYdm8xTnRkMDd3Q0xOZjhRNTZtckVQVnBDeGxJTVZsUWxXUnhNM29BZnBnSWMrOEtDM3JFWFVvZzVnMDZ2dDd6Z1hZOGdySDdoaHdWU2FldXZDMDZZWVJBd3BieWsvVW56ajloTEVaTnMyb3hQUUI5eWMrR25MNnpUZ3E3ckkrK0tESndYMlNQOFNkNll6VHV3NWxWL2tVNmVReFJEMTJvbWZRQVc2Y2FUUjRMaWtZa0JCMUNNT3J2Z1JyL1ZZNzUrTlNCNDBDbmk2YkFEQXRhSyt2eXhWV3BmOU5lS0p4TjJLWVE4UTJ4UEIzSzFzN2Z1aHZXYnIyWHBnVzA0NFZENkRSczBxWG9xS2YxTkZzYUd2S0pjNDdsZVVWM3BwcFAvNVZUS0ZoYUd1b2w0RXNmamY1enlDeVVIbUh0aENoY1loNGhZTFFGK0FGV3N1cTR0MHdKeVdnZHdRVk9aaVYwZWZSSFBvSzUrRTF2ano5d1RKbVZrSVRDOW9Fc3RBc3laU2dFL2RiaWN3S3I4OVlVeEtaSStvd0QyMDVUbTVsbm5tRFJ1UC9Kbnp4WDNnTXRscmNYMFVlc1pkeHlRcVlRdUVXNFI1MXZtUTV4T1p0ZVVkOFNKcnVNbFRVemh0VncvTnE3ZVVCY3FOMi9IVm90Z2ZuZ2lmNjB5S0V0b1V4M1dZT1psVkp1Sk9oOHU1OWZ6U0RQRll0UWdxRFVBR3lHaFFPQXZLcm9YTWNPWVkwcWpuU3RKUi9HM2FQK0p0MXNMVmxHVjhQT3dyLzZPR3NxZXRueUYzVG1UcVpqRU5mblhoNTFveGU5cVZVdzJNNzhFekFKK0lNOGxaMU1CUFE5WldTVmM0SjNtV1NyTEtyTUhSZUE1cWRHb3owT0RSc2FBK3Z3eFhBMmNBTTRxbGZ6QkpBNjU4MW00aHp4SXRRdzVkeHJyQkwzWTZrQ2JVY0Z4bzFTOGp5VjQ0cS8vKzdBU05OdWRaNnhlYU5PU0lVZmZxTW40QTlsSWpGY3RZbjJncEVQQWIzZjdwM2lJQk44SDE0RlVHUTljdDJoUHNMK2NFc1RnVXJSNDd1SlZONG40d3Qvd2dmd3dIdU9uTGQ0eW9ia29meThKdnhTUVRBN3JNcERJYzYwOFNsWkZKZlpZY21iVDB0QUhwUEU4TXJ0UTQyc2lUVU5XeHF2V1pPbXZ1OWYwSlBvUW1nKzZsN3NaV3d5Zmk2UFhreEpud0JyYVVHME1ZRzR6WUhRejNpZ3kvWHNGa3g1dE5ReHc0M3F2STlkVTNmMERkaE9VbEhLam1pMVZBcjJLaXkwSFp3RDhWZUViaGgwT2lEZE1Zc3BvbFFzWWRTd2pDY2plb3dJWE5aVlVQbUwyd3dJa1lobVhLaEdvemRDSjRsUktic2Y0TkJoL1huUW9TOTJOSkVXT1ZPRnMyWWhOOGM1UVpGZUswcFJkQUc0MGhxdkxibW9TQTh4UW16T09FYzd3TGNtZTlKT3NqUENFZ3BDd1VzOUUyRG9oTUhSaFVleUdJTjZURnZyYm55OG5EdWlsc0RwenJINW1TNzZBUG9JRUptSXRTNjdzUUorbmZ3ZGR6bWpQeGNCRUJCQ3cwa1dEd2QwRVpDa05lT0Q3Tk5RaHRCbTdLSEw5bVJ4ajZVMXlXVTJwdXpsSUR0cFl4ZEg0WlBlWEJKa1RHQUpmVXIvb1RDei9peXBZNnVYYVIyVjFkb1B4SllscncyZ2hIMEQ1Z2JyaEZjSXh6WXdpNGEvNGhxVmRmMkRkeEJwNnZHWURqYXZ4TUFBb3krMSszYWlPNlMzVy9RQUtOVlhhZ0R0dnNOdHg3S3MrSEtnbzZVMjFCK1FTWmdJb2dWNUJ0K0JuWGlzZFZmeTlWeVhWKzJQNWZNdXZkcEFqTTFvL0s5WitYbkU0RU9DcnVlK2tjZFlIcUFRMC9ZL09tTmxRNk9JMzNqSC91RDFSYWxQYUhwSkFtMmF2MC94dHBxZFhWS05EcmM5RjJpem8yM1d1N2ZpcmdiVVJGRE5YOWVHR2VZQmhpeXB5WFpmdDJqM2hUdnpFNlBNV0tzb2QvL3JFSUxEa3pCWGZpN3hoMGVGa2ZiMy8xenpQSy9QSTVOazNGYlp5VGw0bXE1QmZCb1ZvcWlQSE80UTRRS1pBbHJRM01kTmZpM294SWp2c00za0FGdjNmZHVmdXJxWVIzUFN3WC9tcEd5L0dGSS9CMk1OUGlOZE9wcFdWYnMvZ2pGM1lIK1FBOWpNaGxBYmh2YXNBSHN0QjBJSmV3MDlpQWttWEhsMS9URWoranZIT3BPR3JQUlFYYlBBRE0rSWcyL09FY1VjcGdQVEl0TXRXNERkcWdmWVZJLys0aEFGV1lqVUdwT1AvVXdOdUI3K0JiS09jQUxiam9iZGd6ZUJRZmpnTlNwMkdPcHh6R0xqNzBWdnE1Y3cyQW9ZRU53S0xVdEpVWDhzR1JveDRkVmEvVE40eEt3YUtjbDlYYXdRUi91TnVzNzAwSGYxN3B5Tm5lenJVZ2FZOWU0TUFEaEVEQnBzSlQ2eTFnREpzMXE2d2x3R2h1VXpHUjdDOGtncGpQeUhXd3N2cmYzeW4xekpFSVJhNWVTeG9MQVpPQ1I5eGJ1enR4RlJKVzlabU1ZZkNGSjBldm05RjJmVm51amU5MlJjNFBsNkE4Ymx1TjhNWnl5SkdaMCtzTlNiLy9EdkFGeEMyQnFsRXNGd2NjV2VBbDZDeUJjUVYxYng0bVFNQlAxSnhxazFFVUFETkxlaWVTMmRVRmJRL2Mva3Z3SXRiWjd0eDBzdDE2dmlxZDUzV3NSbVBUS3YyQUQ4Q1VuaHRQV2c1YVVlZ05wc1lnYXNhdzIrRVZvb2VOS21yVzNNRnRqNzZiWUhKbTVLOWdwQVhaWHNFNVU4RE04WG1WT1NKMUYxV25MeTZuUXVwK2p4NTJiQWIrckNxNnk5V1hsMkIyb1pEaGZEa1c3SDNvWWZULzR4eDVWbmNCdXhNWFAybE5maFVWUWpTU3pTUmJ1WkZFNHZGYXdsenZlWHhhWUtWczhMcHZBYjhJUllGM1pIaVJubTBBRGVOUFdvY3d4U3pOc2VHN05yU0VWWm9IZEtXcWFHRUJ6MU44UHQ3a0ZicWgzTFltQWJtOWkxSUNoSXBMcE01QVM2bXI2T0FQSE13d3puVnk2MVlwQllYOHhaRE4vYStsdDduK3g1ajRiTk9WdGVaOGxqM2hwQUhTeDFWUjh2WkhlYzRBSE85WEZDZGpaOWVSa1NWNjVsak1tWlZ6YWVqMnFGbi9xdDFsdld6TlpFZkh4SzNxT0pySEw2Y3JyMENSek1veDVmMmU4QUxCQjRVR0ZaS0EzdE42RjZJWGQzMkdUSlhHUTdEVGk5ai9kTmNMRjlqQ2JEY1dHS3hvS1RZYmxJd2JMRFJlTDAwTFJjRFBNY1F1WExNaDVZemd0ZmprRksxRFAxaUR6ellZVlp6NU0va1dZUmxScGlnMWh0VlJqVkNrbm0raDFNNUxpRURYT3lIUkVodnpDR3BGWmpIUzBSc0syN28yYXZnZGlsckprYWxXcVBXM0Q5Z213VjM3SEttZk0zRjhZWmoyYXIrdkhGdmYzQjhDUm9INGtESElLOW1yQWcrb3dpRXdOampkOVYrRnNRS1lSOGN6SnJVa2Y3UW9pMllhVzZFVkRacDV6WWxxaVl0dVhPVEhrNGZBY1o3cUJiZExEaUpxMFdOVjFsMitIbnRrMW1NV3Z4clltYzhrSXg4RzNyVzM2SjZSYTRsTHJUT0NnaU9paG1vdytZbnpVVDE5amJWMkIzUldxU0h5eGtobWdzQnFNWVd2T2NVb20xakRRNDM2K2ZjYnUzeGYyYmJlcVUvY2ErQzRET0tFK2UzcXZtZU1xVzNBeGVqZnpCUkZWY3dWWVBxNEwwQVBTV1dvSnUrNVVZWDRxZzVVNllUaW9xUUdQRzlYcm51Wi9Ca3h1WXBlNkxpODcrMThFc2t5UVcvdUErdWsycnBIcHI2aHV0MlRsVmJLZ1drRnB4K0FaZmZ3ZWl3MitWaXR0a0V5Zi9pZmluUy8wSXRSTDJKcTN0UU9jeFBhV08yeHJHNjhHZEZvVXBaZ0ZYYVAyd1lWdFJjNnhZQ2ZJMUNhQnF5V3BnNGJ4OE9IQlF3c1Y0WFdNaWJaWjBMWWpXRXkySXhRMW1acmYxL1VOYllDSnBsV3Uzblo0V3BvZElHVkEwNWQrUldTUytFVDl0SDNSZkdHbU5JMWNJWTdldlpacTdvK2EwYmpqeWdwbVIzbVZmYWxrVC9TWkdUMjdROFFHYWx3R2xET1M5VkhDeUZBSUwwYTFRN0ppVzNzYXo5Z3FZOGxxS3luRnJQQ3p4a1U0U0lmTGM5VmZDSTVlZGdSaERYczBlZE85OTJuaFRLSHJpUkVQMU5KQzZTUk9NZ1EweE81a05OWk9oTU9JVDk5QVVFbGJ4cWVaRjhBM3hyZkRKc1d0RG5VZW5BSGRZV1N3QWJZakZxUVorRDVnaTNoTks4Q1N4VTlpNmY2Q2xMOUlHbGoxT1BNUUFzcjg0WUc2aWpzSnBDYUdXajc1YzN5T1pLQkI5bU5wUU5QVUtrSzBENndnTEg4TUdveVJ4VFg2WTA1UTRBbllOWE1ad1hNNGVpai85V3BzTS85Q29SbkZRWEdSNk1FYVkrRlh2WEVPM1JPMEphU3RrNk9YdUhWQVRISkUrMVcrVFUzYlNaMmtzTXRxak8wemZTSkNkQnY3eTJkOERNeDZUZlZtZTNxMFpwVEtNTXU0WUwvdDdjaVROdGREa3dQb2doM0Nuang3cWswOFNId2YrZGtzWjdNMnZDT2xmc0YwaFE2SjRlaFBDYUhUTnJNL3pCU09xRDgzZEJFQkNXL0YvTEVtZWgwbk9IZDdvVmwzL1FvLzlHVURra2JqN3l6KzljdnZ1K2REQXR4OE56Q0RUUDRpS2Radms5TVdpaXp2dElMTGVweXNmbFN2VExGQlozN1JMd2lyaXF5UnhZdi96cmdGZC85WFZIaC9PbXpCdkRYNG1pdE1SL2xVYXZzMlZ4NmNSOTRsekFrcGxtM0lSTnk0VEZmdTQ3dHVZczlFUVBJUFZ0YTRQNjR0VitzWjduM3VlZDNjZ0V4MllLK1FMNSt4bXM2b3NrOHFRYlR5dUtWR2RhWDlGUXFrNnFmRG5UNXlreGswVks3S1o2MmI2RE5EVWZRbHFHSHhTTUt2MVAwWE41QnFNZUtHMVA0V3A1UWZaRFVDRWxkcHBvWDBVNnNzMmpJa28yWHBVUktDSWhmYU9xTFBmU2hkdFMzN1pyVCtqRlJTSDJ4WVZWMXJtVC9NQnRSUWh4aU80TVEzaUFHbGFaaSs5UFdCRUlYT1ZudTlqTjFmOTIxbFdMWmt5OWJxYk0zSjJNQUFJOWptdUF4M2d5b0VVYTZQMml2czBFZU52L09SK0FYNnE1U1c2bDVIYW9GdVM2anI2eWc5bGltdStQMEtZS3pmTVhXY1FTZlRYenBPektFS3B3STNZR1hacFNTeTJMVGxNZ2ZtRkEzQ0Y2UjVjOXhXRXRSdUNnMlpQVVEyTmI2ZFJGVE5kNFRmR0hybkVXU0tIUHVSeWlKU0RBWitLWDBWeG1TSGpHUGJRVExWcHFpeGlhMnV5aFEzOTRnQk10N0MzWkFteG4vREpTK2wxZkJzQW8yRWlyL0Mwakc5Y3NkNCsvdHAxMnBQYy9CVkpHYUs5bWZ2cjdNL0NlenRybUNPNXFZMDZFZGk0eEFHdGlFaG5XQWJ6THkyVkV5YXpFMUo1blBtZ1U0UnBXNFNhMFRuT1Q2dzVsZ3QzL3RNcFJPaWdISG1leEJHQU1ZMG1kY0RiRHhXSXo0MU5nZEQ2b3hnSHNKUmdyNVJuVDZ3WkFrVE9jU3RVNE5NT1FOZW1TTzdneEdhaGRFc0MrTlJWR3hNVWhRbW1NMGxsV1JiYm1GR0h6RXFMTTRJdzBINzU3N0t5bytaZisyY1VGSU93OTNnRVkxNzF2UWFNMEhMd3BqcGRSUjZKejdWMGNrRTdYellKMFRtWTl6bkxkemt2YTB2TnJBR0dUNVNVWjV1YUhEa2NHdkkweVNwd2thc0VnWlBNc2VZY3U4NXc4SFBkU05pKzRUNkE4M2lBd0RieGdlRmNCMVpNMmlHWHpGY0VPVWxZVnJFY2thT3lvZGZ2YVlTUTdHdUI0SVNFMG5ZSmMxNVgvMWNpRFRQYlBDZ1lKSzU1VmtFb3I0THZ6TDlTMldEeTR4ais2Rk9xVnlUQUMyWk5vd2hlZWVTSTVoQS8wMmw4VVlrdjRuazlpYVZuK2tDVkVVc3RnazVIeXErZ0ptNlI5dkczcmh1TTkwNGhlL2hGbU5RYVVJQVRCMXkzdncrT214UDRYNVlpNkE1STVqSnVmSENqRjkrQUdOd25FbGxaalVjbzZYaHNPNVQ1K1IzeXh6NXlMVk9uQW4wenVTKzZ6ZGowblRKYkVaQ2JYSmR0cGZZWmZDZUNPcUpIb0UydlBQRlM2ZVJMaklKbEc2OVg5M25mUjBteFNGWHpwMVpjMGx0L1ZhZkRhSW1oVU10Ym5xV1ZiOU00bkdOUUxONjhCSFA3QVI4SWw5ZGtjeHptQnY4UENabHc5Z3VZMGx1cmJCc21OWWx3SlpzQS9CMTUvSGZrYmpid1BkZGFWZWNscy9lbG1ESE5XMnI0Y3JBeDQzZmVOa2ZSd3NhTnEveXlKMGQvcDVoWjZBWmFqejdEQmZVb2swWlU2MmdDeno3eDhlVmZKVEtBOElXbjQ1dklOTFNNMXErSEY5Q1Y5cUYzelA2TWwyMWtQUEwzQ1h6a3VZVWxuU3FUK0lqNHRJL29kNUt3SXMrdERhakRzNjRvd043dE9BZDZldWNHeitLZk8yNmlOY0JGcGJXQTU3MzJiQk5XTzRrSE5wcjlEOTU1TDYxYnZIQ0YvbXdTcno2ZVFhRGpmREVBTnFHTWtGYytOR3hwS1p6Q0Qyc2ovSnJIZCt6bFBROEl6N1ErMkpWSWlWQ3VDS29LL2hsQUVIenZrL1BpcTNtUkwxclQvZkVoOWhvVDVHSm1lWXN3ZzFvdGlLeWRpekovZlMyU2VLSFZ1NlozSkVIamlXOE5hVFFnUDV4ZEJsaThuQzU3WGlOOWhycXVCdTk5aG45enF3bzkyK1BNMkpYdHBlVlpTMFBkcVI1bUR5RHJlTU10RXdzK0Nwd2FSeXl6b1l0ZmN2dDlQSklXMGZKVk5OaS9GRnlSc2VhN3BlTHZKckwrNWI0R09YSjh0QXIrQVRrOWY4S21pSXNSaHFSeTB2Rnp3UlYzWjVkWjNRcUlVOEpRL3VRcGtKYmpNVU1GajJGOXNDRmVhQmpJNCtmTC9vTjMrTFFnakk0enVBZlErM0lQSVBGUUJjY2YwY2xKcHNmcG5CeEQ4NGF0d3R1cGtHcUt2ckg3Y0dObC9RY1djU2k2d2NWRE1MNmxqT2dZYm8rMkJPQVdOTmpsVUJQaXlpdFVBd2JuaEZ2TGJucXc0MmtSM1lwMmt2MmRNZURkY0dPWDVrVDRTNk00NEtIRUIvU3BDZmw3eGdzVXZzK0pOWTlHM08yWC82RkV0OUZ5QW41N2xyYml1K3RsODNzQ3ltU3ZxOWVaYmU5bWNoTDdNVGYvVGE3OGU4MHpTZjBoWVk1ZVVVNytmZjE0anY3WHk4cWp6Znp6enZhSm5ySWR2RmI1QkxXS2NXR3k1L3c3K3ZWMmN2SWZ3SHFkVEIrUnVKSzVvajltYnQwSHk5NEFtak1qandZTlpsTlM2dWl5eE5ud055dDNnZHJlTGI2NHAvMyswOG5Ya2I5MkxUa2tSZ0ZPd2sxb0dFVmxsY09qNWx2MWhmQVp5d0Rvd3MwOTQ0VTh2VUZ3K0EvbnVWcS9VQ3lnc3JtV0lCbkh5VTAxZDBYSlB3cmlFT3Z4L0lTSzZQazR5MncwZ21valpzN2xVOFR0YWtCQWRuZTR2L2FOeG1NcEs0VmNHTXA3c2kweXFzaW9sWFJ1T2kxWjFQN1NxRDNabXAwQ1djeUs0VWJtcDJTWGlYdUk1bkdMQ2llRkhLSE5SSWxjWTNQeXMyZHdNVFlDYXFseVdTSVR3cjJvR1h2eVUzaDFQZjhlUTN3MWJuRDdpbG9jVmpZRGtjWFIzT28xQlhnTUxUVWpOdzJ4TVZ3anRwOTlOaFNWYzVhSVdyRFFUNURIUEt0Q3RoZUJQNHpIY3c0ZHoyZVJkVE1hbWhsSGh0ZmdxSkpISTdOR0RVdzFYTDh2c1NlU0h5S3FEdHFvQW1yUXFzWXd2d2k3SFczb2pXeWhJYTVvejV4SlRhcTE0TkF6RkxqVkxSMTJyUk5VUTZ4b2hEbnJXRmI1Ykc5eWY4YUNEOGQ1cGhvYWNrY05KcCtEdzNEdWUzUk0rNVJpZDdFdUlnc253Z3BYMHJVV2gvbnFQdEJ5TWhNWlo2OU5wZ3ZSVEtaNjJWaVorUTdEcDVyNEswZDdFZkp1aXkwNkt1SVlhdVJoNUVjcmhkdDJRcFRTMWsxQXNjRUh2YXBOYlUzSEwxRjJURnlSMzNXeGI1TXZINWlac3JuM1NEY3N4bG5uc2hPOFBMd21kR04rcGFXblF1T1J0WkdYMzd1aEZUNjRTZXVQc3g4VU9va1k2T044NVdkUTFka2k1ekVyc0pHYXpjQk9kZFdKRUtxTlBpSnBzTUQxR3JWTHJWWStBT2RQV1FuZVR5eVAxaFJYL2xNTTRab2dHR09oWXVBZHI3Ri9ET2lBb2MrK2NuNXZsZjB6a01VSjQwWjFybGd2OUJlbFBxVk9weEtlT3B6S2RGOG1hSysxVnYyM01POWsvOCtxcExveHJJR0gyRURRbG5HbUg4Q0QzMUc4UXFseVFJY3BtUjVid21TVnc5L05zNklIZ3VsQ1JlaHZaLytWck02MEN1L3IzQW9udEZmcmxqZXc3NHNrWWUydXluN0pLUXRGUUJRUko5cnlHaWMvelFPc2JTNHNjVUJjdEE4Y1BUb1EzeDZaQlF1NkRQdTVtMWJuQ3RQOFRsbExZQTBVVFFOVnF6YTVuZmV3M01vcHkxR1BVd0c1anNsME9WWG5pUG1BY21McU81SEc4SHYzblNMZWNFOW9PalBEWGNzVHhvQ0J4WXl6QmRqNHdtbnlFVjRrdkZEdW5pcFM4U1NrdmRhTW5UQk45YnJIVVI4eGRtbUVBcC9QZHFrOXVleHRwMXQrSnJ0WHdwTi9NRzJ3L3FoUk1wU054UTF1aGcva0tPMzBlUS9GeUhVRGtXSFQ4VjZnR1JVNERoRE14WnU3eFhpajlVaTZqbHBXbVFDcUpnM0ZrT1RxM1dLbmVDUllaeEJYTU5BVkxRZ0hYU0NHU3FOZGplYlk5NG95SXBWak1ZZWhBaUZ4L3RxekJYRkhaYUw1UGVlRDc0clc1T3lzRm9VWFk4c2ViVVpsZUZUVWEvK3pCS1ZURkRvcFRSZVhOdVpxNDdRamtXbnhqaXJDb21tTzRML0dyRnRWVjIxRXBNeXc4d3lUaEw1WTU5ZDg4eHRseDFnMXR0U0lDRHdub2Y2bHQvNnpsaVB6Z1ZVTDhqV0JqQzBvMkQ2S2crak51VGhrQWxhREpzcS9BRzJhS0EvL0E3NmF2dzJLTnF0djIyM1ArV3EzU3RSREROS0ZGZ3RzRnVrWXQxR0ZEV29vRlZYaXRhTmhiM1JDeUppNGNNZU5qUk9pUEVEYjRrK0czK2hEOHRzZys1aGhtU2MvOHQySlRTd1lvQ3pBSTc1ZG9xOFFUSGUrRS9UdzBSUVNVRGxVKzZ1QmVOTjNoNmpKR1gvbUg4b2owaTNjYUNOc2p2VG5vaDczQnR5WnBzZmxITHE2QWZ3Sk5DRFg0Uzk4aDQrcENPaEdLRGhWM3J0a0tITWEzRUc0Sjl5OHpGV0k0VXNmTnpDL1JsNW1pZE5uN2d3b045ajIzSEdDUVErT0FacFRUUE1kaVZvdzc0MGdJeXVFdGQwcVZ4TXlOWGhIY251WFJLZHc1d0RVU0wzNThrdGpNWG1Ba3ZJQjczQkxhMXZmRjlCQVVaSW5QWUppd3hxRldRUUJWazdnUUg0b2pmVVEvS0VqbitBL1dSNkVFZTRDdGJwb0xlMW16SGthamdUSW9FMFNMREhWYXVLaHJxMTJ6ckFYQkdiUFBXS0N0NERHZWRxM0p5R1JibVBGVzMyYkU3VDIwKzczQmF0Vi9xUWhoQldmV0JGSGZoWVdYakFMdHMzOEZlbW5vVCs5Ym4xakRCTWNVTW1ZZ1NjMGU3R1FqdjJNVUJ3TFU4aW9uQ3BnVitRcmhnN2lVSWZVWTZKRnhSMFkrWlRDUE0rclZ1cTBHTkx5SlhYNm5yVVR0OEh6RkJSWTFFL0ZJbTJFZVZBOU5jWHJqN1M2WVlJQ2hWUUNXci9tMmZZVWpDNGowWExrelo4R0NTTGZta1czUEIveHErbmxYc0tWQk9qN3ZUdnFLQ09NcTdadHFyM2NRK044Z0JuUGFBcHMrb0d3V09rYnV4blJZai94L1dqaURjbFZyczIyeE1LNHFBckUxWnRrMTQ1NmtpSnJpdzZhYmtOZVJIb2dhUFJCZ2JnRjlaOGkvdGJ6V0VMTjRDdmJxdHJxVjlUdEdTbm1QUzJGOWtxT0lCYWF6SFlhSjliaTNBb0RCdmxaYXNNbHV4dDBCRFhmaHAwMkpuNDExYVZ0NlM0VFVCOFpnRkRrSTZUUDZnd1BZODV3K29VUVNzakllWFZtaW5yd0lkSzJaQWF3YjhTZTZYT0piT2FsaVF4SFNybkFlT05ETHVDbkZlaklicDRZRHRCY1FDd01zWWlSWmZIZWZ1RUpxSmN3S1RUSjhzeDVoakhtSkkxc1BGSE9yNlc5QWhaMk5Bb2QzOG1uTFFrMWdPejJMQ0FvaG9RYmdNYlVLOVJNRUEzTGtpRjdTcjl0TFpwNmxrY2lJR2hFMlY1NDZ3M01hbTUzVnRWa0diQjl3MFlrMlhpUm5DbWJweG1IcjJrNGVTQzBSdU5iak5zVWZESWZjOERadlJ2Z1VEZTFJbEtkWlR6Y1Q0WkdFYjUzZHA4VnRzb1pseVh6TEhPZEFic3AxTFBUVmFIdkxBMEdZREZNYkFXL1dVQmZVQWRId3FMRkFWKzN1SHZZV3JDZmhVT1IyaTg5cXZDQm9PYjQ4dXNBR2RjRjJNNGFLbjc5ay80M1d6QloreFIxTDB1WmZpYTcwWFA5c29RUmVldWhaaVVuWEZERzFUOC9PWE5tc3NUU25ZTysza1ZMQWdlaVk3MTl1RHdMOUZReWNnTFBlc3NOaWhNWmJBS0c3cXdQWnlHMTFHMStaQTNqQVgyeWRkcFlmbWFLQmxtZmNLL1YwbXdJUlVEQzBuSlNPUFVsMktCOGgxM0Y0ZGxWWmlSaGRHWTVmYXJ3TitmOWhFYjFjUmk0MVpjR0RuNlhlOU1NU1RPWTgxVUxKeVhJSFNXRklRSHN0VllMaUpFaVVqa3RsSGlHam50TjUvYnRCOEZ1K3ZwMjh6bDJmWlhOK2RKRHlONkVYaFMrMHl6cXBsL0xTSk5FVVZ4bXU3QnNOZGpBWTBqVnNBaGtOdXVZMEUxRzQ4ZWoyNW1TdCswMHlQYlE0U1JDVmtJd2I2SVN2WXRtSlJQejladDVkazc2YmxmK2xKd0FQSDVLREYrdkhBbUFDTG9DZEcyQWRpaTZkT0huTkpuVG1adG9PR084UTFqeTF2ZU13NmdiTEZUb1FtZkphN25UN0FsODltUmJSa1paUXhKVEtnSzVLYzlJTnptVEpGcDB0cEFQek5teUwvRjA4YlgzbmhDdW1NL2NSLzJSUG45ZW1aM1Zsam9rdHRaRDF6VldYbFVJcUVVN1NMazVJMGxGUlUwQWNFTlhCWWF6TmFWenNWSEEvc0QzbzlobTQyd2JISVJiL0JCUVRLekFpOHMzK2JNdHBPT1pnTGRRekNZUGZYM1VVeEtkMVdZVmtHSDdsaC9SQkJnTVpad1h6VTkrR1l4ZEJxbEdzMExQK0RaNWcyQldOaDZGQWNSOTQ0QitLL0pUV0kzdDlZeVZ5UmhsUDRDQ29Vay9tbUY3K3IycGlsVkJqeFhCSEZhQmZCdHI5aGJWbjJ6RHVJMGtFT0cza0J4OENHZFBPalgxcGgxUE9PWkpVTzFKRUdHMGp6VXkydEs0WDBDZ1ZOWWhta3FxUXlzUk50S3VQZENKcUszV1c1N2thVjE3dlhnaXlQcmw0S0VFV2dpR0YxZXVJNFFrU0ZIRmYwVERyb1FpTE5LSmlMYmRoSDBZQmhyaVJOQ0hQeFNxSm1OTm9rZXRhaW9vaHFNZ2xoNndMdEVHV1NNMUVaYlFnNzJoMFVKQUlQVkZDQUpPVGhwUUdHZEtmRm92Y3dFZWlCdVpITjJPYjR1Vk03K2d3Wkx6MUQ5RTd0YTRSbU1aMjRPQkJBZzdFaDZkTFhHb2ZaNFUyVEZPQ1FNS2p3aFZja2pyeWRSUytZYXFDdzFrWXQ2VWV4dXpiTkVEeVlMVFpuclkxUHpzSFpKVDRVK2F3TzJ4bHFUU1l1Nm4vVTI5TzJ3UFhnR09FS0RNU3ErelRVdHljOCs2aUxwMGl2YXY0Rkt4K3h4Vnk0RnhoSUYvcHVjVkRxcHNWZTJqRk9mZFpoVHpMejJRanR6dnNUQ3ZEUFU3YnpESDJlWFZLVVY5VForcUZ0YVNTeG5ZZ1lkWEt3VnJlSWd2V2hUOWVHREIyT3ZuV3lQTGZJSUlmTm5mSXhVOG5XN01iY0gwNW5obHNZdGFXOUVaUnN4V2NLZEVxSW5xMURpWlBLQ3o3aUdtQVU5L2Njbm5RdWQycE5nSUdGWU9UQVdqaElyZDYzYVBEZ2ZqOC9zZGxENGwrVVRsY3hUSTlqYmFNcXFOMGdReFNIczYwSUFjVzNjSDRwM1YxYVNjaVRLQjI5TDF0ejJlVVFoUmlUZ1R2bXFjK3NHdEJOaDRreTBtUUpHc2R5Y0JSRVArZkFhU3MxRVJFRFZvNWd2Z2k1K2FDTjdORUN3MzBvd2JDYzFtU3BqaWFoeU5Wd0pkMWppR2d6U3dmVHB6ZjJjNVhKdkcvZzFuMGZIODhLSE5uZit1N1ppUk1sWHVlU0lzbG9KQlV0VzllenZzeDlncmZzWC9GTnhuYnhVMUx2ZzBoTHhpeHlwSEtHRkFhUHUweENEOG9EVGVGU3lmUlQ2czgxMDlHTVVaTDhtMnhYcDhYMmRwUENXV2RYODRpZ2E0QnJUbE9mcW94NHNocUVnaC9IdDRxUnN0NTJjQTF4T0lVdU94Z2ZVaXZwNnY1ZjhJVnlhcnlFZHBWazcyRVJBd2RUNGFvWTF1c0JnbVArMG0wNlEyMTZIL251YnROWXhIYU9JWWpjYWNoM0E4RXovemMwS2NTaGhlbDBIQ1lqRnNBMEZqWXF5SjVaVUgxYVp3Myt6V0MwaExwTTZHRGZjQWRuOWZxMm9yUG1aYlc2WFhyZitLcmM5UnR2SUk1amVEM2RGb1QxS3daSnd4ZlVNdmM1S0xmbjhyUk9XMjNKdzg5c0oyYTVkcEIzcVdEVUJXRjJpWDhPQ3VLcHJIb3NKMm1mbEJSK1dxczg2VnZnSS9YTW5zcWI5NytWbEtkUFZ5c2N6UGo4Smh6ZitXQ3ZHQkhpakFxWWxhdmJGNjBzb01XbEhidktUK1NjdmhwcmdlVGxuNTF4WDBzRitFYWRjL2wyczJhNUJna1ZiSFl5ejBFODVwMExzdHFIK2dFR2lSODRuQlJSRkluOGhMU1pyR3dxalozRTI5Y3VHaSs1WjVicDdFTThNV0ZhOXNzUy92eTRWckRmRUNTdjdEU1U4NERhUDBzWEkzQXA0bFd6blE2NW5Rb1RLUldVMzBnZDdObjhab3dVdkdJeDRhcXlYR3dtQS9QQjRxTjhtc0pVT0RlelVIRWwwVlA5dW8rY1o4dlBGb2RTSUI0QzdsUVlqRUZqOHl1NDlDMktJVjNxeE1GWVRldkc4S3FBcjBUUGxrYnpISG5UcERwdnB6emlBaU5GaDh4aVQ3Qy9UaXlIMEVndVV3NHZ4QWdwbkUyN1dJeXBWK3VGTjJ6Vzd4bmlGL243NXRyczlJSjVhbUIxelhYWjFMRmtKNkdiUy9kRm9remw0Y2MybWFtVndoTDRYVTBBdjVnRFdBbCthRVdoQVA3dDJWSXdVK0VwdmZPUERjTEFTWDdIN2xacFhBMlhRZmJTbEQ0cVUxOE5mZk5Qb0FLTU5TY2NCZk85WVZWZ21sVzRSeWRCcWZIQVY3K2hyWjg0V0pHaG82Yk5UMFlNaHh4TGRPeC9kd0dqMG95YWs5YUFrTko4bFJKelV1QThzUitmUHlpeVRnVUhpbzUrUHArWWFLbEhyaFI0MWpZNU5FU1BTM3grelRNZTBTMkhuTE9LQ09RUHBkeEt5dmlCdmRIckNEUnFPK2w5NkhoaE5CTFhXdjR5RU11RVVZbzhrWG5ZSk04b0lnVk00WEoreFhPZXY0WWJXZXFzdmdxMGxtdzQvUGlZcjlzWUx0K1c1RUF1WVNGbkpFYW44Q3dKd2J0QVNCZkxCQnBKWmlSUG9yL2FDSkJac00rTWh2UzdaZXB5SHZVOG01V1NtYVpueHVMdHM4b2psNktrUzhvU0FIa3E1R1dsQ0IvTmdKNVczck8yQ2oxTUs3YWh4c0NyYlRUM2EwVi9RUUgrc0VyeFY0WFVXREh4MGtrRnkyNWJQbUJNQlE2QlUzSG9IaGhZY0pCOUpoUDZOWFVXS3huRTByYVhIQjZVOUtIcFdkUUNRSTcycWV2cDVmTXpjbStBdkM4NXJzeW5WUWhydURBOWZwOUNPZTdONTZjZzFVS0dTYXM4OXZyTitXbEdMWVR3aTVXKzB4WWRLRUd0R0NlTkp3WEtEVTBYcVU1dVFZbldzTXdURU5MR3RiUU12b0dqSUZJRU16Q1JhbDRybkJBZzdEL0NTbjhNc0N2UytGREpKQXpvaWlvSkVoWkpnQXA5bjIrMVl6bnI3SCs2ZVQ0WWtKOU1wajYwSW1jVzRpNGlIRExuOVJ5ZEI4ZHgzUVltM3JzWDZuNFZSclpEc1lLNkRDR3drd2Q1bjMvSU5GRXBrMTZmWXBQNkp0TVFwcUVNemNPZlFHQUhYQlRFR3p1TEowM0dZUUw5Ym1WMi83RXhEbFJmK1V2ZjFzTTJmclJ0Q1dtYWwxMnBNZ3RvbnZTQ3RSNG4xQ0xVWlJkVEhESFAxT3R3cWQrcmNkbGF2bktqVUIvT1lYUUhVSnpwTnlGb0twUUsrMk9nckVLcEd5SWdJQmduMnk5UUhuVEppaFpPcEV2T0tJb0hBTUdBWEhtajIxTHltMzlNYmlvdzRJRis3N3hOdWV3emlOVkJ4cjZLRDVlKzlIelpTQklsVWEvQW1zREZKRlhleXJRYWtSM0Z3b3dUR2NBREpIY0VmaEdrWFlOR1NZbzRkaDRieHdMTSsyOHhqaXFrZG4wLzNSNFVFa3ZjQnJCZm4vU3pCYzFYaEtNMlZQbEpnS1NvcmpEYWM5NlYyVW5RWVhsMS95WlBUNERWZWxnTytzb01qZXhYd1lPNThWTGw1eEluUVVaSThqYzNIMkNQbkNOYjlYMDVuT3hJeTRNbGVjYXNUcUdLNnMyYXo0UmpwRjJjUVAyRzI4Uis3d0RQc1pEWkMva1d0amRvSEM3U3BkUG1xUXJVQWhNd0tWdXhDbVlUaUQ5cS9PN0dIdFp2UFNOMENBVVFOL3J5bVhaTm5pWUxsSkRFNzBic2s2WHhzaDRrRE9keGU3QTJ3bzdQOUY1WXZxcVJESTZicmY3OXlQQ1NwNEkwalZvTzRZbkxZdFg1bnpzcFI1V0I0QUtPWXRSMXVqWGJPUXBQeVlEdmZSRTNGTjV6dzBpN3JlZWhkaTd5VjBZRFJLUmxsR0NHUms1WXorVXYxZllsMlp3cm5Hc3FzamdBVm8weEVVYmE4b2hqYU5NSk53VHdaQS93QkRXRlNDcGcxZVVIOE1ZTDJ6ZGlveFJUcWdHUXJEWnhReU56eUJKUFhaRjArb3hJVEpBYmo3b05DNUp3Z0RNVUphTTVHcWxHQ1djLy9LQ0lySSthY2xFZTRJQTB1enY3Y3VqNkdDZGFKT05waTEzTzU0NHZidElIQkYrQStKZURGVVFOeTYxR2tpM3J0eVE0YVV5d242cnUzMTQvZGtHaVA4SXdqbzBKLzJUeHM0OVprd0VsNG14K2lZVVVPNTVJNnBKelU0UCs3UlJzK0RYWmt5S1VZWnFWV3JQRjRJOTRtNFd4MXRYZUU3NG85R3VYOTc3eXZKL2prZGFrOCtBbW9IVmpJMTVWK1d3QmRBUkZWMklQaXJKZ1ZNZHNnMVBlejJWTkhxYTdFSFdkVGtsM1hUY3lqRzlCaXVlV0Z2UWZYSThhV1NrdXVSbXFpL0hVdXpxeXZMSmZOZnMwdHhNcWxkWVlmbFdCMUJTMzFXa3VQSkdHd1hVQ3BqaVFTa3RrdUJNV3dIalNrUXhlZWhxdzFLZ3owVHJ6bTdRYnRneGlFUERWbVdDTkNBZUNmUk9UcGhkMVpOT2h6THk2WGZKeUc2WGdkNU1DQVp3NHhpZTBTajVBblkxL2FrRGdOUzlZRmwzWTA2dmQ2RkFzZzJnVlFKdHpHN0xWcTFPSDJmcmJYTkhXSC9OWTg5Tk5aNFFVU0pxTDJ5RWNHQURiVDM4WDBiR2R1a3FZbFNvbGlLT2NzU1R1cWhjYWVtVWVZTExvSTgrTVpvcjJSeFhUUlRoRjFMckhmcWYvNUxjTEFqZGw0RUVSZ1V5c1lTMmdlRSt5RmRhc1U5MVVnVURzYzJjU1ExWm9UOSt1TE93ZGdBbWlmd1FxRjAyOElOYzJJUUVEZlRtVXczZVp4dno3VWQxejN4YzFQUWZlQ3ZmS3NCOWpPaFJqN3JGeWI5WGNEV0xjWWowYkJ5b3N5Y2hNZXpNTFZrRmlZY2RCQlF0dkk2SzBLUnVPWlFIMmtCc1lISmFYVGt1cDhGMGVJaE8xL0djSXdXS3ByMm1vdUI3ZzVUVURKTnZPUlhQWGEvbVU4YmgyN1RBWllCZTJzS3g0TlN2NU9qbkhJV0QyUnV5c0N6QmxVZmVOWGhEZDJqeG5Ib1VsaGVKM2pCQXB6VVJ5MGZ3bTJGd3dzU1UwY2FRR2wwS3Y4aG9wUlFFMjExTm52dExSc21DTnJoaHBFRG9OaVpFekQyUWRKV0tiUlJXbmFGZWRYSEFFTFNOMHQwYmZzQ3NNZjBrdGZCb1hCb05BK25aTjkrcFNsbXV6c3BGZXZtc3FxY01sbHp6dmt5WHJ6b0ErUnlvMWVQWHBkR09vSnZoeXJ1K0VCUnNtT3A3TVhaMHZOVU1VcUhMVW9LZ2xnMXA3M3NXZVptUGMrS0F3MHBFMnpJc0ZGRTVINDE5Mkt3RHZEeGR4RVlvREJETlpqYmcyYm1BRFRlVUtLNTdJUEQ0ZlRZRjRjNkVuWHgvdGVZTU9SQkR0SWhQSm5laVpueTdOdi96RytZbWVrSUtDb3hyNmthdUUyYlp0Qkx1ZmV0TkcwQnRCWTdmKy9JbVV5cE1CdmRXdS9RN3ZUTVJ6dzVhUUdaV3VjMVYwSEVzSXRGWU1JQm5vS0daMHhjYXJiYS9UWVpxNTBrQ2FmbEZ5c1lqQTRFREtIcUdkcFlXZEtZbW0rYTdUQURtVzM1eWZuT1lwWllya3BWRXRpcUYwRXVqSTAwYWVwbE5zMmsrcXlGWk5lRTNDRFBMOVA2YjRQUS9rYXRhSGtWcExTRVZHSzdFWDZyQWE3SVZOcnZadEZ2T0E2b2tLdkJnTXRGREFHWk94ODhNZUJjSjhBUjNBZ1VVZUl6bkFONnRqQ1VpcEdEWk9ObTFGaldKcDRBM1FJelNhSU9tWjdEdkYveXNZWWJNL2ZGRE9WMGpudEFqUmRhcHhKeEwwZVRocEVoS09qQ0REcTJrcyszR3J3eHFJRktMZTFXZE96SUk4WElPUEdud3k2TEtYVmZwU0RPVEVmYVJzR3VqaHBTNGhCSXNNT3FIYmwxNlBKeGM0RWthVnU5d3BFWWxGLzg0TlN2NVp1bTRkck1mcDl5WGJ6ekFPSnFxUzRZa0k0Y0JyRnJDN2JNUGlDZmdJM25OWkFxa2szUU9acVIreXlxeCtuRFFLQkJCWjdRS3JmR01DTCtYcHFGYUJKVTB3cGtCZEFoYlI0aEpzbVQ1YXlubHZrb3VveG0vTmpENW9lNkJ6VklPOXVrdE0rLzVkRUM1UDd2WnZhcm11Ty9sS1h6NHNCYWJWUElBVHVLVHJ3YkpQOFhVa2RNNnVFY3RIS1hJQ1VKR2phWklXUmJacDhjenF1UVlmWTZ5bkJVQ2ZJVStnRzZ3cVNJQm1ZSW05cFpwWGRhTDEyMVY3cTBWakRqbVFuWHZNZTd5c29FWm5aTDE1QjBTcHhTMWpqZDgzdU5JT0tad3U1TVB6ZzJOaE94M3hNT1BZd0VuMkNVemJTcndBczVPQXRyejNHQWFVa0pPVTc0WHdqYVlVbUdKZFpCUzFOSlZrR1lyVG9JTkxLRGp4Y3VJbHlmVnNLUVNHL0c0RHlpTzJTbFF2SjBkME90MXVPRzVJRlNBa3ErUFJWTWdWTUR2T0lKTWRxamVDRktVR1JXQlc5d2lnWXZjYlU3Q1FMLzdtZUYyS1pBYVdsKzR5OXVob3dBWDdlbG9nQXZJdEFBeG8yK1NGeEdSc0hHRVc5Qm5obFR1V2lnWXhSY25WVUJSUUhWNDFMVitGcjVDSllWN3NIZmV5d3N3eDRYTXRVeDZFa0JoUitxOEFYWFVBOHVQSjczUGI0OWk5S0c5Zk9sanZYZXlGajlpeGdibzZDY2JBSjdXSFdxS0h5L2grWWpCd3A2VmNON004OUZHelEwNHFiclF0Z3JPRnliZzNnUVJUWUc1eG43M0Fya2ZRV2pDSlJPd3kzSjM4RHgvRDdqT2E2QkJOc2l0RXcxd0dxNzgwRUVpb09lRCtaR3AySjY2QURpVkdNYXlpSFl1Y01rOG5USzJ6elQ5Q25FcmFBazk1a1FqeTRrMEdSRWxMTDVZQUtMUUVySjVycDFlYXk5TzRGYjZ5SkdtOVU0RmFNd1BHeHRLRDZvZElJSEtvV25oS28xVThLSXBGQytNVm41OVpYbWM3WlRCWmZzZzZGUThXMTBZZlRyNHUwbllycEhaYloxalhpTG1vb0YwY09tMCttUG5KQlhRdGVwYzduMEJxT2lwTkNxSTZ5eWxvVGVSU2hOS0gwNEZJbzBnY01rMEgveFRoeU40cFBBV2pERGtFcDNsTk5QUk5WZnBNSTQ0Q1dSbFJnVmlQNjRlSzBKU1JwMFdVdkNXWXVtbFcvYzU4VmN6L3lNd1ZjVzVvWWI5KzI2VEVod3ZieGlOZzQ4aGwxVkkxVVhUVS8vRXRhK0JNS25HVWl2Y3RmTDV3SU5ERDBnaVFMMWlwdDZVN0M5Y2Q0K2xncVkybE1VWjAyVXY2UHJzK1pFWmVyN1pmV0JYVmdobGZPT3JDbHdzb09GS3pXRWZ6NlJadTFlQ3MrSzhmTHZrdHM1K0JYMGd5ckZZdmUwQzNxSHJuNVUvT2g2RC9DaWhtV0lyWTdIVVpSaEpheGRlK3RsZHU2YWRZSitMZVh1cFF3MFhFeEMzNlJFVGRORnhjcTlnbE11NGNOUVNYOWNxUi9HUVlwK0l4VWtJY05HV1ZVN1p0R2E2UDNYQXlvZFJ0MFhlUzNUcDAxQW5DaDBaYlVoNFZyU1plVjlSV2ZTb1d5eG5ZM2h6Y1ozMEcvSW5EcTR3eFJyRWVqcmVCeG5oSVFia3hlbnhrYXhsK2s3ZUxVUWtVUjZ2S0oyaURGTkdYM1dtVkExeWFPSCttdmhCZCtzRTZ2YWNRekZvYndZNUJxRUFGbWVqd1c1bmU3SHRWTm9sT1VnSmM4Q3NVeG1jL0xCaThONW11OVZzSUE1SHlFcm5TNnplQ3o3VkxJOStuL2hiVDZoVG9rTVhUVnlYSlJLU0cyaGQybGFiWFRidG1LNGZOSDNJWkJQcmVTQTRGTWVWb3VWTjN6RzV4OUNpR3BMdy8zcGNlbzRxR3FwK3JWcCt6Kzd5UTk4b0VmK255SDRGMytKOUloZURCYTk0V2k2M3pKYkxCQ0labTdQMGFzSEdwSUp0M1B6RTNtMFM0WUlXeVhCQ1ZYR2lrajhNdWREUEIvNk5tMnY0SXhKNWdVMGlpMGd1eTVTVUhxR1VZelRQMGpJSlU1RTgyUkhVWHRYNGxEZHJpaEJMZFAxWWFHMUFHVUMxMnJRS3VJYUd2Q3BNalpDOWJXU0NZbmpEbHZwV2JrZFhNVE5lQkhMS2l1b296TUdJdmtjem1QMGFSSlNKOFBZbkxDVk5oS0hYQk5ja0g3OWU4WjhLYzJ3VWVqNHNRWm9IOHFEUkdrZzg2bWFXL1pRV0dObkxjWG1xM0ZsWE02c3NSLzNQNkUvYkhNdm02SExydjF5Uml4aXQyNUpzSDMvSU9yMlVWNEJXSmh4WFc1Qko2WGRyMDduOWtGM1pOQWs2L1hwYzVNU0ZtWUoyUjdiZEw4S2s3cTFPVTlFbGcvdEN4SjhnaVQyN3dTVHlTRjBHT3hnNFBiWUpkaS9OeWlhOU5uODlDR0R1bGZKZW1tMWFpRXIvZWxlR1NOKzVNUnJWSjRLNmxneVRUSVczaTljUTBkQWk2Rkh0MFlNYkgzd0RTQXRHTFNBY2Nlenp4SGl0dDFRZGhXMzZDUWdQY0E4dklJQmgzL0pOamYvT2JtYzJ5enBrOGVkU2xTNGxWZHdnVzV2emJZRXlGb0Y0R0NCQmJ5MWtlVk51ZUhBSCtldmkrSDdvT1ZmUzNYdVBRU05UWE9PTkFiekplU2I1c3R3ZFFIbDFaanJHb0U0OUk4K0E5ajN0K2FoaFFqNzRGQ1NXcFpyajd3UlNGSkpubndpMVQ5SEw1cXJDRlcvSlpxNlA2MlhrTVdUYit1NGxHcEtmbW13aUpXeDE3OEdPRzdLYnJaR3F5V3dtdXlLV1BrTnN3a1oxcTh1cHRVbHZpSWkrQVhoMmJPT1RPTHNydE5rZnFiUUplaDI0cmVlYmtJTkxranV0NXI0ZDlHUi9yOENCYTlTVTBVUWhzblpwNWNQK1JxV0NpeFJtN2k0WVJGYnRaNEVBa2h0TmE2akhiNmdQWVF2N01LcWtQTFJtWDNkRnNLOFhzUkxWWjZJRVZyQ2JtTkRjOG81bXFzb2dqQVFmb0M5QmM3UjZnZncwM20rbFFwdjZrVGZoeHNjRElYNnMwdytmQnh0a2hqWEFYcjEwVW91V0N4M0MvcC9GWXdKUlMvQVhSS2tqT2I1Q0xtSzRYUmUwK3hlRER3VmtKUFphdTUyYnpMRURIQ3FWMGY0NHBQZ0tPa1lLZ1RaSjMzZm1rM1R1OFNkeEowMlNITThGZW01U01zV3FSeWkyRjF5bmZSSnN6Y0ZLeWtkV2xOcWdEQS9MOWxLWUJtYzdadS9xOWlpMUZQRjQ3VkprcWhpclVvYjUzem9pSnRWVlJWd01SMzRnVjlpcWNCYUhiUnU5a2t2cWszeU1wZlJGRzQ5cEtLaklpcTdoL1ZwUndQR1RIb1k0Y2cwNVg1MDI4aUhzTHZVVy91eitralB5SUVoaGNLVXdDa0pBd2JSOXBJRUdPbjh6NnN2QU84aTg5c0ozZEw1cURXRlliUytIR1BSTXhZd0pJdEZRTjg2WUVTZUpRaG4ydXJHaUxSZmZRZUxwdERsOGRBZ2IrVHA0N1VRUHhXT3cxN09lQ2hMTjFXbnpsa1BMMVQ1TytPM01lbnBuNEMzSVk1TEVlcEhwblBlWkhidnVXZmVWdFBsa0g0TFpqUGJCcmtKVDNOb1JKekJ0ODZDTzBYcTU5b1ErOGRzbTB5bVJjbVF5bjh3NzFtaG1jdUVJNWJ5dUYrQzg4VlBZbHkyc0V6amx6QVEzdmRuLzErSHpndXc2cUZOTmJxZW5oWkdiZGlHNlJ3WmFURzdqVEEyWDlSZFhqRE45eWoxdVFweU80THg4S1JBY1pjYlpNYWZwNHdQT2Q1TWRYb0ZZNTJWMUE4TTloaTNzc285Myt1cHJFMHFZTk1qa0UyMkN2SzRIdVV4cU43b0l6NXBXdUVUcTFsUUFqcWxTbHFkRDJSbnIvZ2dwL1RWa1FZam45bE1mWWVsazJzSDVIUGRvcFlvN01Id2xWMW9yOUJ4ZitRQ3lMem05MnZ6RzJ3amlJakMvWkhFSnplcm9KbDZiZEZQVHBaaG81TVYyVTg2ZkxRcXhObEdJTXFDR3krOVdZaEo4b2IxcjArV2h4ZGU5TDJQZHlzRVR2OTdPK3hWdytWTk4xVFpTUU41STZsOW01SXA2cExJcUxtNGExQjFmZkg2Z0h5cVQ5cDgyTk9qbnRSV0dJb2ZPM2JKejVHaGt2U1dic1h1ZVRBTWFKRG91OTlrR0xxRGxod0JaTkVRNG1LUHVEdlZ3U0s0V21MbHVIeWhBOTdwWmlWZThnK0p4bW5KRjhJa1YvdENzNEpxL0hnT29BRUdSOXRDRHNEYkRtaTNPdmlVUXBHNUQ4WG1LY1NBVWFGTFJYYjJsbUpUTllkaHRZeWZqQllaUW1ONXFUNUNOdWFEM0JWbmxrQ2s3YnNNVzNBdFhrTk1NVHVXNEhqVUVSU0puVlEwdnNCR2Exd28zUWg3MTE1WEdlVEYzTlR6OHcwNDQwQWdVN2MzYlNYTy9LTUlOYUlXWGQwb0xwb3EvMC9RSnhDUVNKOVhuWXkxVzdUWUxCSnBIc1ZXRDFhaHNBN0ZqTnZSZDZteENpSHNtOGc2WjBwbnpxSXBGMWRIVXRQMklUVTVaMWhaSGJ1K0wzQkVFU3RCYkw5WFl2R2ZFYWt2MWJtZitiT1pHbm9pdUhFZGxCbmFDaHhZS056QjIzYjhzdzhZeVQ3QWp4Zms0OWVKSUF2ZGJWa2RGQ2UySjBnTWVmaFEwYklaeGh4M2Z6TUl5c1FOaU44UGdPVUt4T011cjEwTGR1aWdSRURSTVp5UDRvR1dyUDFHRlk0dDZncm9BU3NaNDIxb3M0OHdBZG5yYm92TmhMdDdTY05VTGt3WjVBSVpKVHJiYUtZVExqQTFvSjNzSXVOL2FZb2NtLzl1b1FIRUlsYWNGMXMvVE0xZkxjUFRMMzhPOWZPc2pNRUl3b1BLZnZ0N29wdUk5RzJIZi9QUjRhQ0xEUTd3Tm1JZEV1WEovUU5MNzJrNXE0TmVqQWxkUGZlM1VWVnF6a3lzOFlaL2pZT0dPcDZjK1l6UkNyQ3VxME0xMXk3VGlONnFrN1lYUk1uL2d1a3hyRWltYk1RanIzandSTTZkS1ZaNFJVZldRcjhub1BYTEpxNnloNVIzRUgxSVZPSEVTc3QvTEl0YkcyRDJ2UnNaUmtBT2J6dlFBQUQzbWIzL0c0TnpvcEkwRkFpSGZicHEwWDcyYWRnNlNSais4T0hNU2h0Rnh4TFpsZi9uTGdSTGJDbHdsNVdtYVlTcyt5RWprcTQ4dFk3WjJiRTBOOTFtSnd0K3VhME5sUkpJRGgwSGlrRjRVdlNWb3JGajJZVnU5WWVTNXRmdmxWalBTb051L1p1NmRFVWZCT1Q1NTVoYWhCZE4zU2E1WHVqMlJ2YXUxbFFOSWFDOTQ0eTBSV2o5VWlORHNrQUsxV29MK0VmWGNDNkliQlhGUnlWZlgvV0tYeFBBd1V5SUFHVzhnZ1owOGhjaWpLVHQxWUtuVU82UVB2Y3JtRFZBYjBGQ0xJWG41aWQ0ZkQvSng0dHcvZ2JYczdXRjliMlJnWHRQaExCRzl2RjVGRWtkSEFLclFIWkFKQy9IV3ZrN252enpEeklYWmxmRlRKb0MzSnBHZ0xQQlk3U1FUakdsVXZHNTc3eU51dFoxaFRmczkvMW5rU1hLOXp6S0xSWjNWT0RlS1VvdkplMFdDcTF6Vk1ZeENKTWVubU56UElVMlM4VEE0RTd3V21iTmt4cTlySTJkZDZ2MFZwY0FQVk14bkRzdldUV0ZheXlxdktaTzdaMDhhNjJpL29IMi9qeGY4cnBtZk82NGluM0ZMaUwxR1g4SUd0VkU5TTIzeUdzSXFKYnhEVHkrTHRhTVdEYVBxa3ltYjVWclFkek92cWxkZVUwU1VpNklpckc4VVozamNwUmJ3SGExQzBEd3c5Ry9TRlgzZ1B2VEpRRStreXorZzFCZU1JTEtLTytvbGNIemN0T1dnenhZSG5PRDdkcENSdHVaRVhBQ2pncWVzWk1hc29QZ251REM0blV2aUFBeERjNXBuZ2pvQUlUSWt2aEt3ZzVkNjA4cGRyWmNBK3FuNVRNVDZVby9RekJhT3hCQ0xUSlgzTWdrODVyTWZzbld4ODZvTHhmN3AyUFg1T05xaWVUYS9xTTN0UHc0Wlh2bEFwODNOU0Q4RjcrWmdjdEsxVHBvWXd0aVUyaDAySENHaW9INXRrVkNxTlZUTUg1cDAwc1J5MkpVMXF5REJQMkNJSS9EZzRXRHNJbCt6Z2VYNzU4OXNyeDZZT1JSUU1CZktib2RiQjc0M1RsNFdMS09FbndXVVZCc205NFNPbENyYWNVNzJNU3lqMDY4d2RwWWp5ejFGd0MyYmpRbnhuQjZNcC9wWit5eVpYdGd1RWFZQitrcWhqUTZVVW13U0Zhek9iK3JoWWpMYW9pTSthTjkvOEtLbjB6YUNURnBOOWVLd1d5Ny91NEVIek80NlRkRlNOak1mbjJpUFNKd0RQQ0ZIYzBJMSt2amRBWnc1WmpxUi91emk5Wm4yMG9BYTVKbkxFay9FQTNWUldFN0ovWHJ1cGZGSlB0Q1V1cUhQcG5sTDdJU0p0UnBTVmNCOHFzWkNtMlFFa1dvUk90Q0tLeFVoM3lFY01iV1lKd2s2RGxFQkcwYlpQNmVnMDZGTDN2NlJQYjdvZEd1d203Rk44Zkc0d29xdEI4ZTdNNWtsUHBvOTdHb09iTnd0K2x1ZFRBbXh5QzVobWNGeCtkSXZFWktJNmlnRktIcUxIMDFpWTFvNzkwM1Z6RzlRR2V0eVZ4NVJObUJZVVUrekl1U3ZhL3lJY0VDVWk0cFJtRTNWa0YyYXZxdWxRRVVZNHlaL3dtTmJvQnpQbUFQZXkzK2RTWXRCWlVqZVdXVDBwUHdDejRWb3p4cDl4ZUNsSVU2MHF2RUZNUUNhUHZQYUE3MFdsT1A5Zi9leTM5bWFjdnBHQ1ZhK3pmYThnTzQ0d2J4cEpVbEM4R04vcFJNVFF0elk4WjgvaGlOclUrWnE2NFpmRkdJa2RqN203YWJjSzFFQnR3czFYNEovaG5xdmFzUHZ2RFNEWVdOK1FjUVZHTXFYYWxrRHRUYWQ1cllZMFRJUjFFcW94M2N6d1BNaktQdkY1c0Z2MTdUaHVqcjFJWjFZdGw0VlgxSjB2alhLbUxZNGxtWGlwUkFybzBxVkdFY1h4RVZNTUVsNTRqUU1kNEo3Umpnb21VMGoxcHRqeXhZK2NMaVN5WFBmaUVjSVMybFdESzNJU0F5NlVaM0hiNXZuUG5jQTk0NDExamN5NzVheTZCNkRTVHpLNlVUQ1pSOXVEQU50UEJydklEZ2pzZmFyTWl3b2F4Mk9sTHhhU29ZbjRpUmdrcEVHcUVrd294NXR5SThhS2tMbGZaMTJsTzExVHhzcVJNWTg5ajVKYU81NVhmUEpQREwxTEdTbkM4OFJlOUFpK051NWJaanR3UnJ2RklUVUZIUFI0Wm14R3NsUU1lY2diWk83bkhrMzJxSHhZa2R2V3B1cDA3b2pjTUNhVnJwRkF5RlpKSmJOdkJwWmZkZjM5SGRvMmtQdFQ3djAvZjhSL0I1Tno0ZjF0OS8zek5NLzduNlNVSGZjV2s1ZGZRRkp2Y0pNZ1BvbEdDcE9GYi9XQzBGR1dVMmFzdVF5VCtybTg4WktaNzhDZWkvQ0FoOTM5Q0gwSllicFpJUHR4YzJ1ZlhxalMzcEhIOWxuV0s0aUo3T2pSL0VFU3BDbzJSM01ZS3lFN3JIZmhUdldobzRjTDFRZE40akZUeVI2c3lNd0ZtMTI0VFZERFJYTU52ZUkxRHAvbnR3ZHo4azhreHc3aUZTeDYrWXg2TysxTHpNVnJOMEJCenppWmk5a25lWlN6Z29sbEJuVndCaDZvU09QSFhyZ2xyT2orUW1SL0FFU3JoRHBLcldUKzgvQWlNRHhTLzV3d1JOdUdRUExsSjlvdm9taEpXbjhzTUxWSXRROE4vN0lYdnREOGtkT29IYXcrdkJTYkZJbVFzdi9PQ0FJdWk5OUUrWVNJT01sTXZCWGtBdCtOQVpLOHdCOUpmOENQdEIrVE9VT1IrejcxZC9BRlhwUEJUNitBNUZManhNakxJRW9KenJRZnF1dnhFSWkrV29VekdSMUl6UUZOdmJZT254YjJQeVEwa0dkeVhLelcyYXhRTDhsTkFYUGs2TkVqcXJSRDFvWnRLTGxGb29mclh3MGRDTldBU0h6eSs3UFN6T1VKM1h0YVBac3hMRGpyK280MWZLdUtXTm1qaVp0ZmtPekl0dmxWMk1ER1NoZUdGMG1hMDRxRTNUVUVmcUpNclhGbTdEcEsrMjdEU3ZDVVZmN3JiTm9salBoaGE1VzdLQnFWcTBTaFVTVGJSbXVxUHRRcmVWV0g0SkVUNXlNaHVxTW9TZDRyL044c0RtZVFpUVF2aTF0Y1p2N01vYzdkVDVYNUF0Q0Q2a05FR1pPelZjTllscFg0QWJUc0xnU1lZbGlpUHlWb25pdVlZeVN4c0J5NWNnYjNwRCtFSzBHcGIwd0pnMDMxZFBnYUw4Slp0NnNJdnpOUEVIZlZQT2pYbWFYajRiZDR2b1h6cFo1R0FwTWhJTGdNYkNFV1oyendnZGVRZ2pOSExiUEl0K0txeFJ3V1BMVE42SHdaME91aWpqNFVGK1NnMEF1OFh1SUtXMFd4bGV4ZHJGckRjWko4U2hhdWF0M1gwWG1IeWdxZ0wxbkF1MmhySkZiNHdaWGtjUytpMzZLTXlVMXlGdll2MjNiUVVKaS8zeVFwcXIvbmFVT29pRVdPeGNreXEvZ3E0M2RGb3UxRFZEYVlNWks5dGhvNytJWFhva0JDczVHUmZPY0JLN2czQStqWFEzOUs0WUE4UEJSVzRtNSt5UjBaQXhXSm5jalJWYklUdklBUEhZUnQxRUozWUxpVWJxSXZvS0h0ekhLdFV5MWRkUlVRMEFVTzQxdm9uWkRVT1crbXJzencrU1cvNlEvSVVnTnBjWEZqa003RjRDU1NRMkV4Wmc4NW90c01zN2txc1FENE94WWVCTkRjU3BpZmpNb0xiN0dFYkdXVHdhc1ZPYm1CL2JmUGNVbHEwd1loWENZRURXUlcwMlRQNWJCcllzS1RHV2puV0RESjFGN3pXYWkwelcvMlhzQ3V2QlFqUEZjVFlhUVgzdFNYUlNtOGhzQW9EZGpBcksvT0ZwNnZjV1lPRTdsaXpQMFljKzhwMTZpNy9OaVhJaWlRVHA3YzdYdXM5MjVWRXRsS0FqVWRGaHlhaUxUN1Z4RGFncHJNRndpeDR3WjA1dTBxajdjRFdGZDBXOU9ZSEl1M0piSktNWFJKMWFZTm92dWdnK1FxUk43Zk5IU2kyNlZTZ0JwbitKZk11UG8zYWVxUFdpay93STVSejNCV2FyUFFYNGk1K2RNMG5wd1ZPc1grS3NPaEM3dkRnK09Kc3o0UTV6bG5JZWZsVVdMNlFZTWJmOVdEZkxtb3NMRjRRZXYzbUppT3VIam9vci9kTWVCcEE5aUtEa01qWUJOYlJvNDE0SEN4anNIckI0RVhOYkh6Tk1ESENMdU5CRzZTZitKNE1aL0VsVnNEU0x4aklpR3NUUGh3OEJQanhiZlF0c2tqK2R5Tk1LT09jVVlJUkJFSXFiYXp6M2xtamxSUWhwbHhxNjczVmtsTU1ZNjU5N3Z1K2Q4OWVjL3pxN01pNGdRdmg4N2VoWWJwT3VaRVhqNWcvUTdTN0JGREFBQjlEekczNVNDODUzeHRXVmNuWlFvSDU0amVPcVlMUjlORHV3eHNWdGhUVjdWOTluL0I3SFNiQXl0YkV5VlR6LzVOaEo4Z0dJakcwRTVqM2dyaVVMVWQ1Umc3dFFSKzkwaEpnTlFLUUgyYnRiU2ZQY2FUT2ZJZXhjMWRiMUJ4VU9oTTF2V0NwTGFZdUtyM0ZkTlR0L1QzUFdDcEVVV0RLRXR6WXJqcHpsTC93cmkzTUlUS3NGdnRGOFFWVi9OaFZvOTdhS0lCZ2RsaU5jMTBkV2RYVkRwVnRzTm4rMlVJb2xyZ3FkV0E0RVk4c28wWXZCNGErYUx6TVhpTUF1T0hRclhZMHRyK0NMMTBKYnZaemdqSkp1QjFjUmtkVDdEVXFUdm5zd1ZVcDVra1VTRlZ0SUlGWUswNSt0UXhUNjk5MkhITldWaFd4VXNEMVBrY2VJcmxYdVVWUm9nd21mZGh5cmY2enphTDgrYzBMN0dYTVpPdGVBaEFWUVZ3ZEpoKzduclg3eDRMYUlJZnoyRjJ2N0RnL3VEZnoyRmErNGdGbTJ6SEFvcjhVcWltSkczVlRKdFpFb0ZYaG5EWVh2eE1KRmM2a3UyYmhiQ3h6aWoyejVVTnVLMGptcDFtbnZrVk5VZlIrU0VtajFMcjk0THltNzVQTzdGczBNSXIzR2RzV1hSWFNmZ0xUVlkwRkxxYmE5N3UxSW44TkFjWTdJQzZUaldMaWd3S0VJbTQzTnhUZGFWVHY5bWNLa3p1ekJrS2Q4eC94dDFwLzlCYlA3V3liNGJwbzFLMWduT3BiTHZLejU4cFdsM0I1NVJKL1o1bVJETFB0TlFnMTRqZE9FczkraC9WNVVWcHdyQUk4a0diWDhLUFZQRElNZklxS0RqSkQ5VXlET1BoalozdkZBeWVjd3lxNGFrVUU5bURPdEpFSzFocER5aTZBZTg3c1dBQ2xYR1Rpd1B3TjdQWFd3anhhUjc5QXJIUklQZVlLVHVuVlcyNHNQci8zSFB6Mkl3SDhvS0g0T2xXRW10NEJMTTZXNWc0a01jWWJMd2oydXNvZEQxMDg4c3RaQTdWT3NVU3BFVmw0dzdOTWIxRVVITVJ4QXhMRjBDSVYrMEwzaVpiK2VrQjF2U0RTRmpBWjNoZkxKZjdnRmFYck9LbittaFIrcld3L2VUWEljQWdsNEh2RnVCZzFMT21PQXdKSDNlb1ZFamp3aGVLQTRpY2JyUUNtdkF0cFEwbVhHMGFnWXA1bWo0UmI2bWRRK1JWNFFCUGJ4TXFoOUM3bzhuUDBXa28yb2NuQ0hlUkdoTjFYVnlUMmI5QUNzTCs2eWxVeSt5QzNRRW5hS1JJSks5MVl0YW9TcmNXWk1Nd3h1TTBFOUo2OForWXlqQTBnOHAxUGZIQUFJUk95NlNhMDRWWE91VDZBMzUxRk9XaEtmVEdzRkozUlRKR1dZUG9MazVGVks0T2FZUjloa0p2ZXp3Rjl2UU4xMTI2cjZpc01HWFdUcUZXKzNITDNJL2p1cmxJZERXSVZ2WVkrczZ5cTdsckZTUEFHUmRuVTdQVndZL1N2V2JaR3BYenkzQlEyTG1BSmxyT05Vc1pzNG9Ha2x5MFYyNjd4YkQ1S01ZOHdvTk5zbVdHMVZWZ0xDcmE4YVFCQmNJNERQMkJsTnd4aGlDdEhsYXo2T1dGb0NXMHZNUjNFcnJHN0p5TWpUU0NudlJjc0VIZ21QbndBNmlOcEoyRHJGYjRnTGxoS0p5WkdhV2tBOTdINkZGZHdFY0xUNkRSUVFMKytmT2tWQzRjWUdXMVRHLzNpSzVkU2hSU3VpQnVsbWlocWdqUjQ1VmkwM28yUmJRYlAzc3h0OTBWeFE2dnpkbEdma1htbUttak9pMDgwSlNIa0xudGp2c0JKbnY3Z0tzY09hVE9rRWFSUXFBbkNBNEhXdEI0WG5NdE9ocFJtSDJGSDh0VFhySWpBR05XRW11ZFFMQ2tjVmxHVFE5NjVLaDBINml4WGJnSW1RUDZiNDJCNDlzTzVDOHBjN2lSbGd5dlNZdmNuSDlGZ1EzYXpMYlFHMmNVVzk2U0RvalRRU3R4a09KeU91REdUSEFubldrejI5YUV3TjlGVDhFSjR5aFhPZytqTFRyQ1BLZUVvSjlhN2xEWE9qRXI4QWdYNEJtbk1RNjY4b1cwellQeVFpVk1QeEtSSHRwZm5FRXlhS2hkek5WVGhseHhEUU5kckhlWmlVRmI2Tm9ZMkt3dlNiN0JuUmNwSnkrL2cvekFZeDNmWVNONVFFYVZEMlkxVnNOV3hCMEJTTzEyTVJzUlk4SkxmQWV6Uk16NWxVUnVMVW5HMVRvS2s2UTMwRnVnaHFXTjZnQk5jRnhQL25ZL2l2K2lhVVFPYSsyTnV5bTQ2d3RJL0R2U2Z6U3AxakVpNFNkWUJFN1loVGlWVjVjWDlnd2JvVkRNVmdacDVZQlFsSE9RdmFETmZjQ29DSnVZaGY1a3o1a3dpSUtQanpncGNSSkhQYk9oSmFqZW9lUkw1M2N1TWFoaFY4WjdJUnI2TTRoVzBKelQ3bXphTVV6UXBtODY2endNN0NzMDdmSllYdVd2akFNa2JlNU82VjRidTcxc09HNkpRNG9MOHpJZVhIaGVGVmF2enhtbEl5QmtnYzlJWmxFRHBsTVByOHhsY3lzczRwVlVkd0sxZTdDSzJrVHNTZHE3ZzVTSFJBbDNwWVVCOUtvNGZzaDRxbGVPeUp2MXozS0ZTVFN2d0VjUk8vRXc4b3pFRFlaU3FwZm9WVzl1aEpmWXJOQVhSMFozVm1lb0FEK3JWV3R3UC8xM3NFLzNJQ1gzSGhERzNDTWM0NzZkRUVDMEszdW1TQUQ0aitaUUxWZEZPc1dMMkMxVEg1KzRLaVNXSCtsTWlibytCNTVoUjNHcTQwRzFuMjVzR2NOMG1FY29VMndOOUZDVnlRTEJoWU91OWFIVkxXakVLeDJKSVVaaTV5U29IVUFJOWI4aEd6YUxNeENaRE1MaHY4TWtjcFRxRXd6OUtGRHBDcHFRaFZtc0dRTjhtMjR3eUI4MkZBS05tamdmS1JzWFJtc1NFU292QXdYakJJb01LU0c1MXA2VW04YjNpN0dJU3M3a2pUcS9QWm9pb0NmSnpmS2RKVE4wUTQ1a1FFUXVoOUg4OE0zeUVzM0RidFJUS0FMcmFNMFlDOGxhaU1pT09lNkFEbVRjQ2lSRWVBV1plbEJhRVhSYVN1ajJseDB4SGFSWXFGNjVPMExvNU9DRlUxOEE4Y01ERTRNTFltOXcyUVNyOU5nUUFJY1J4WnNOcEE3VUpSMGU3MUpMK1ZVK0lTV0ZrNUk5N2xyYTh1R2c3R2xRWWhHZDRHYzZyeHNMRlJpSWVHTzRhYlA0UzRla1ExZmlxREN5ODdHWkhkNTJmbjVhYURHdXZPbUlvZnJ6cFZ3TXZ0YnJlWi84NTVPYVhUUmNOaU5FMHd6R1pTeGJqZzI2djhrbzhMNTM3di9YQ0NXUDJNRmFBckpwdm5rZXAwcEErTzg2TVdqUkFaUFFSZnpuWmlTSWFUcHB5Nm0zcDZIck5Tc1k3ZkR0ejdDbDRWL0RKQWpRRG95aUwydXdmMVVIVmQyQUlyekJVU2xKYVRqNGs2Tkw5N2EvR3FoV0tVOVJVbWpuWUtwbTJyK0pZVWNya0N1Wkt2Y1l2cmc4cERvVUtReXdZOUdEV2cwM0RVRlNpcmxVWEJTNVNXbi9LQW50bmYwSWRIR0wvN213WHFERytMWllqYkVkUW1xVXFxNHk1NFRObVdVUDdJZ2NBdzU4MTZZQnp3aU5JSmlFOU00bFBDemVJL0ZHQmVZeTNwNklBbUg0QWpYWG12UTRJeTBZODJOVG9iY0FnZ1QyQ2RxejZNeDRUZEdvcTlmbjJldHJXS1VORnlhdEFIeWRRVFZVUTJTNU9XVlVsdWdjTnZvVXJsQThjSkp6OU1xT2EvVzNpVm5vNHpESGZFN3pob1k1ZjVsUlRWWkRoclFiUjhMUzRlUkx6OGlQTXlCTDZvNFBpTGxwODlGamRva1FMYVNCbUtIVXdXcDBuYTVmRTN2OXpueTJZY0RYRy9qZkk5c2N0dWxIUmJka0k1YTRHT1BKeDRvQUpRelZaL3lZQWFkbzhLTlpVZEVGczlaUGlCc2F1c290WE1OZWJFZ3IwZHlvcHVxZlNjRkozT0ROUEhnY2xBQ1BkY2N3djBZSkdRZHNOMmxob1Y0SFZHQnhjRVVlVVgvYWxyNG5xcGNjMUNDUjN2UjdnNDB6dGVRZy9KdldtRmxVRTRtQWlUcEhsWUdyQjd3K1UyS2RTd1F6MlFKS0JlLzVlaWl4V2lwbWZQMTVBRldySzhTaDFHQkJZTGd6a2kxd1RNaEdRbWFnWHFKMitGdXFKOGYwWHpYQ1ZKRkhRZE1Bdzh4Y28xMUhoTTM0N2FsckF1K3dtWDNwREZBQk92a0MrV1BYMFVoZzFaNU1WSEtOUk94YVI4NFlWM3MxMlVjTSs3MGNKNDYwU3pFYUtMeWg0NzJ2T01EM1huYUs3enhaY1hsV3FlbkV2Y2ptZ0dOUjJPS2JJMXM4VStpd2lXK0hvdEhhbHAzZTFNR0R5NkJNVkl2YWpuQXprRkhiZVZzZ2ptSlVrclA5T0F3bkVIWVhWQnFZeDNxN0x2WGpvVlIwbVk4aCtaYU9uaDA1M3Bkc0drbWJxaHlyeU4wMWVWSHlTcitDa0RZa1NNZVoxeGpQTlZNK2dWTFRES3UyVkdzTVVKcVdPNFR3UERQMFZPZzIvOElUYkFVYU1HYjRMakw3TCtQaTExbEVWTVhUWUlsQVovUUhtVEVOanl4M2tEa0JkZmN2dlF0NnRLazZqWUZNNEVHNVVYRFRhRjUrMVpqUno2VzdNZEpQQyt3VGtiRFVpbTRwNVFRSDNiOWtHazJCa2lseWV1cjhCYzIwd201dUpTQk85NUdmWURJMUVaaXBvUmFIN3VWdmVuZXF6NDN0bFRaR1JRNGE3Q05tTUhnWHlPUVFPTDZXUWtnTVVUUURUOHZoMjFhU2R6N0VSaVpUMWpLOUYrdjZ3Z0Z2dUVtR25nU3ZJVVIyQ0prYzV0eDFReWdmWm5BcnVPTm9iQjFpZENMQjFGQ2ZPN04xWmRSb2NUOC9XeWUrRW5EaU85cHpxSXBuTERsNGJrYVJLVytla0JWd0huNDZTaHcxWDB0Y2x0LzBST2lqdVVCNGtJSW5yVkpVNGJ1V2Y0WUlUSnRqT0o2aUtkcjF1K2ZsZ1FlRkg3MEd4S2poZGd0L01yd2ZCNEsvc1hjelErOXpZY3JENGRoWTZxWmhaMDEwcnJ4Z2dXQThKYVp5ZzJwWWlqOGllWUVnMWFaSmtaSzlPMVJlN3NCMGlvdWY2MHJLMEdkK0FZbHA3c29xQ0JDREd3ZktlVVFoQ0JuMEUwbzBHUzZQZG1qTGkwVHRDWVplcWF6cXdOK3lOSU5JQThMazNpUERuV1VpSVBMR05jSG1aRHhmZUswaUFkeG0vVDdMbk4rZ2VtUkw2MWhISWMwTkNBWmFpWUpSK09IbkxXU2U4c0xySzkwNUI1ZUVKSE5sV3E0Um1FWElhRlRtbzQ5Zjh3NjErTndmRVV5dUpBd1ZxWkNMRmN5SEJLQWNJVmozc056ZkVPWHpWS0luZHhIdytBUjkzb3doYkN4VVpmNkdzOGN6Ni8xVmRyRkVQcnYzMzArOXM2QnRNVlBKM3psL1VmOXJVaTBaL29wZXhmZEwzeWtGNzZlOTk5R1BmVnY4Zkp2L1kvKy81aEVNb24xdHFORnlWUmV2Vjl5OS91SXZzRzNkYkI4R1JScmdhRVhmaHgrMnhlT0Z0K2NFbjNSWmFuTnhkRWUyK0I2TUhwTmJyUkU1M1BsRGlmUHZGY3A0a083OElMUjBUNHh5Vy9XR1B5QnNxR2RvQTd6SkpDdTFUS2JHZmhucWduUmJ4YkIyQjNVWm9lUTJiejJzVFZuVXdva1RjVFUyMVJ4TjFQWVBTM1NhcjdUMGVSSXN5Q05vd3I5YW13b01VL29kOXMyQVB0aUtOTDZFTk9seUtBRHN0QUVXS0Erc2RLRGhySjZCT2hSSm1aK1FKYkFhWjMvNUZxMC9sdW1DZ0V6R0VidTN5aTBZNEk0RWdWQWpxeGg0SGJ1UW4wR3JSaE9XeUFmc2dsUUpBVkwxeS82eWV6UzJrOFJFMk1zdEpMaDkyTk9CM0dDWWdGWHpuRjRkMjVxaVA0WkN5STRSWUdlc3V0NkZYSzZHd1BwS0s4V0hFa2hZdWkwQXlFbXI1TWwzdUJGdFBGZG5pb0k4UmlDb29hN1oxRzFXdXlJaTNuU05nbHV0Yyt4WThCa2VXM0pKWFBLNmpkMlZJTXBhU3hwVnRGcStSK3lTSzlKNldHNVF2dCtDK1FIMWh5WVVPVks3ODU3bkZteURCWWdaL28rQW5pYnpOVnF5WUNKUXZ5RFhEVEsraVhka0E3MWJZN1RMM2J2dUx4TEJROGtiVHZURVk5YXFrUTMrTWlMV2JFZ2pMek9IK2xYZ2NvMUVSZ3pkODByREN5bWxwYVJRYk9ZbktHL09Eb0ZsNDZselQwY2pNNUZZVnZ2MHFMVWJENWx5SnRNVWFDMXBGbFRrTk9OeDZsbGlhWDlvMGkvMXZ3czViTktuNU91RU5RRUttTGxjUDRvMlptSmpENHp6ZDNGazMydVE0dVJXa1BTVXFiNExCZTNFWEhkT1JOQjJCV3N3czVkYVJuTWZOVlg3aXNQU2IxaE1RZEFKaTEvcW1ETWZSVWxDVTc0cG1uempiWGZMOFBWRzhOc1c2SVFNMk5lMjNpQ1BJcHJ5SmpZYlZubTVoQ3ZLcE1hN0hMVmlOaU5jK3hUZkRJYUttM2pjdFZpRDhBMU05WVBKTmswMDNWVnI0Wm8yTXVHVzh2aWw4U0xhR3BQWHFHN0k0RExkdGw4YTRSYngxTHQ0dzVIdXFhYTFYelpCdGoyMDhFSlZHY21LWUV1YWVOMjd6VDlFRTZhMDlKZXJYZEVicGFOZ05xWUpkaFAxTmRxaVBLc2JEUlVpODZYdnZOQzdyTUU1bXJTUXRyekFaVm5kdFNqQ01xZDhCbWFlR1I0bDRZRlVMR1JCZVhJVjlZNHl4TEZkeW9VTnBpeTJJaGVQU1d6Qm9mWVBQMGVJYTJxNUpQNGo5RzhhdC9BcW9Tc0xBVXVSWHR2Z3NxWC96WXdzRStvZjZvU0RiVU9vNFJNSncrRE9VVEpxK2hucXdLaW05WXkvbmFweVpOVGMyckNxNlY5akh0SmJ4R1BEd2x6V2ovU2szekYvQkhPbFQvZlNqU3E3RnFsUEkxcTZKK3J1OEFrdTAwOFNGSU5YWmZPZm5aTk92R1BNdEVtbjJnTFB0K0g0UUxBKy9TWWU0ajM5OGF1emhLSXAyUG9rM21QQzVxMUlOMUhnUittbkVmYzROZWVIWXdkMi9rcHN6UjNjQm43bmk5TmJJcWh0U1dGVzh4YlVKdVVQVk9lZVh1M2owSUdabUZOaXdhTlo2ckg0L3pRMk9EejZ0RnhSTHNVWVp1MWJmZDF1SXZmUUR0NFlEL2VmS1l2OFZGOGJIR0RnSzIydzJXcXdwaTQzdk5DT1hGSlpDR01xV2lQYkw4bWlsNnRzbU9UWEFXQ3lNQ3c3M2UyckFEWmoySUs2cnFrc00zRVhGMmNiTGI0dmpCMTR3YS95WEs1dndVKzA1TXpFUko1blhzWHNXMjFvN00rZ08wanMyT3lLY2lQNXVGMmlYeWIyRGlwdHdRZUhlcXlna3JOc3FWQ1NsbGR4Qk1wd0hpMXZmYzhSS3BQLzRMM0xtcHE2RFpjdmhERGZ4VENFM3NwbGFjVGNPdFhkSzJnMzAzZElXQlZlMndEL0d2amExY0NsRlE2N2d3MHQxWlV0dHNVZ1ExVmVreThvT3BTNmtzWUVjNGJxc2VDYlp5NzY2U3ZMM0ZvZG1uYWhsV0pSZ1ZDTmpQeGhML2ZrMnd5dmxLaElUSC9WUUNpcE9JMGROY1JhNUIxTTVIbU9CalRMZVpRSnkyMzdlMm1vYndtRHlKTkhlUGhkRG1pa252TEthRGJTaEwrSXMxWFRDSnVMUWQyd21kSkw3K21LdnMyOTR3aFhRRCt2dGQ4OEtLazBEWFA4QjFYdTlKK3hvNjlWT3VGZ2V4Z1RyY3ZJNlN5bHR1TGl4OU9QdUU2L2lSSllvQk1FWHhVNHNoUU1mNEZqcXdmMVB0bkovd1dTWmQyOXJoWmpSbVRHZ2lHVEFVUXFSeituQ2RqZU1mWWhzQkQ1THY2MEtJTFdFdk5FSGZtc0RzMkwwQTI1MjM1MWVVb1l4QXlzVmFDSlZMZEg5UUZXQW1xSkRDT0RVY2RvbzEyK2dkNmJXMmJvWTBwQlZIV0w2TFFESzViWVdoMVY4dkZ2aTBjUnBmd3Y3Y0ppTVgzQVpOSnVUZGRIZWhUSWRVMFlRL3NRMWRMb0YyeFFQY0N1SEtpdUNXT1kzMERIZTFPd2NDbExBaHFBS3lxbG5JYkgvOHU5U2NKcGNTNGtncDZIS0RVZGlPZ1JhUkdTaVVDUkJqekk1Z1Nrc01aS3F5N1NkNTFhZWcwdGdKK3gwVEg5WUgyTWdzYXA5TjdFTlpkRUIwYmV5MkRNVHJCQTFobjU2U0VyTkhmM3RLdHF5TDliNnlYRVA5Ny9yYytqZ0QyTjFMTlVINlJNOUF6UDNrU2lwcjA2UmtLT29sUjdITzc2OGpqV2lIMVg5MmpBN2RrZzdnY05janFzWkNnZnFXdzB0UFhkTGcyMGNGNnZuUXlwZzdnTHRrYXpySEFvZHlZZkVOUFFac2RmbmpNWmlOdTRuSk85N0QxL3NRRSszdk5GenJTRE9LdytrZUxFQ1lmN1JKd1ZIZVAvajc5ODMzb1owZWdvbllCMkZsRkU1cWowMkIvTFZPTUpRbHNCOHVOZzNMZWc0cXRad250c09TTmlkUjBhYmJabUFLNHNDenZ0OFlpdXoyeXJOQ0pvSDVPOFh2WC92TGVSL0JCWVRXajBzT1BZTS9qeXhSZDUrL0p6aUtBQUJhUGN3LzM0VUEzYWovZ0xaeFpnUkNXTjZtNG0zZGVtYW5OZ3N4MFAyMzcvUStFdzVWWW5KUGt5Q1kwY0lWSG9GbjJBeS9lN1U0UDE5QVBiUEZYRUhYOTRONktoRU1QRzdpd0IzK0krTzFqZDVuNlZTZ0hlZ3hnYVNhd082aVFDWUZnRHNQU01zTk9jVWo0cTNzRjZLekdhSC8wdTVQUW9Bai84enE2VWM5TW9OckdxaFllYjJqUW8wV2xHbFhqeHRhblpMUzI0L09JTjVHeC8yZzY4NEJQRFFwd2xxbmtGY3hwbVAvb3NuT1hyRnV1NFBxaWZvdVFIMGVGNXFDa3ZJVFFiSncvWnZ5NW1BSFdDOW9VK2NUaVloSm1TZktzQ3l0MWNHVnhpc0t1K055bUVRSUF5YUNndWQvVjA5cVQzbmsvOXMvU1dzWXRoYTd5TnB6QklNTTQwckNTR2FKOXU2bEVrbDAwdlhCaUV0N3A5UDVJQkNpYXZ5bkVPdjdGZ0xxUGRlcXhSaUN3dUZWTW9sU0lVQmNveWZVQzJlMkZKU0FVZ1lkVkdGZjBiMEtuMkVabEs5N3l5eHJUMk1WZ3Z0UmlrZmRhQVc4UndFRWZOK0I3L2VLOGJCZHA3VVJwYnFuMXhjckM2ZDJVamRzS2J6Q2pCRnFrS2tvWnQ3TXJoZzZZYWdFN3Nwa3FqMGpPcldNK1VHUTBNVWxHMmV2UDF1RTFwMnhTdjRkTUswZG5hNkVOY05VRit4a2FKN0I3NjROZHhMQ3B1dmhibGx0VlJBZjd2SzVxUHR0Si85UllGVVVTR2NMZGlibno2bWY3V2tQTzNNa1VVaFIybUFPdUd2OElXdzVYRzFadm9WTW5qU0FaZTZUN1dZQTk5R0VOeG9Ia01pS3hIbEN1SzVHZDBJTnJJU0ltSFFyUW12NkY0bXFVL1RUUThuSE1EekNSaXZLeVNROGRxa3BRZ25VTW53SWthQXVjNi9GR3ExaHczYjJTYmEzOThCaFV3VVpTQUlPOFhadm51TGRZMm42aE9Yd3MrZ3E5QkhVS2NLRkE2a3o2RkRucHhMUElDYTNxR2huYzk3Ym8xRlQvWEprNDhMcmtISjJDQXRCdjBSdE45N04yMXBsZnBYSHZaOGdNSmI3WmM0Y2ZJNk1iUHdzVzdBaWxDU1hNRklFVUVtaXI4WExFa2xBMHp0WWJHcFRUR3F0dHA1aHBGVFRJcVV5YUFJcXZNVDlBL3grSmk1ZWpBNEJoeGIvY2wxcFVkT0Q2ZXBkM3lpbElkTzZqMjk3eElub2lCUHVFRFcyL1Vmc2xEeWhHa1FzN1d5MjUzYlZubFQrU1dnODl6WUlLLzlLWEZsNWZlK2pvdzJyZDVGWHY4ekRQcm1mTVhpVVB0OVFCTy9pSzRRR2JYNWovN1J4MWMxdnpzWThPTmJQM2xWSWFQcmhMNCsxUXJFQ1ROM255S2F2R0cwZ0JCdEh2VEtoR29CSGdNWEhTdEZvd04rSEtyUHJpWXUrT1owNUZybjhva1FyUGFheG9LUDFVTENTL2NtS0ZOM2djSDdIUWxWanJhQ2VRbXRqZzFwU1F4ZXVxWGlTS2dMcHhjLzFPaVpzVTQrbjRsejRocGFoR3lXQlVSTGk0NjQybjFnbjlxejliSXNhQ2VFUEowdUptZW5NV3AydEptSXdMUTZWU2dEWUVyT2VCQ2ZTajlQNEcvdkk3b0lGK2wvbjVmcDk1NlFneEd2dXI3N3luYXdBdTNHOU1kRmJKYnU0OU5abldubkZjUUhqeFJ1aFVZdmcxVS9lODRONEpUZWNjaURBS2IvS1lJRlh6bG95dUUxZVlYZjU0TW1oalRxN0IveUJUb0R6enB4M3RKQ1RvM0hDbVZQWWZtdEJSZTNtUFlFRS82UmxUSXhiZjRmU09jYUtGR2s0Z2JhVVdlNDRoVms5U1p6aFc4MHlmVzVRV0JIeG10VXp2TWhmVlFsaTRnWlRrdElPWmQ5bWpKNWhzYm16dHRhSFFCMjlBbTNkWmtteDNnL3F2WW9jeWhaMlBYQVdzTlFpSWFmK1E4Vy9NV1BJSzcvVGp2Q3g1cTJYUnA0bFZXeWRNYzJ3SVFraGFkREIweHNudy9rU0V5R2pMS2pJNGNvVkl3dHViVEYzRTdNSjZMUzZVT3NKS2o4MlhWQVZQSkpjZXBmZXdiekU5MWl2WFp2T3ZZZnNtTWV2d3RQcGZNekdtQzdXSmx5VzJqMGpoN0FGMUpMbXdFSlNLWXdJdnU2REhjM1lueUxIOVpkSUJuUStuT1ZEUmlQK1JFcHF2Kyt0eXBZSEl2b0p5SUNHQTQwZDhiUjdIUjJrN2RvNlVRVEhGNG9yaVllSVFieEtlNFRoNisvbDFCalV0UzlocU9SaDNNYmd2WXJTdFhUZlN3YUJPbUFWUVp6cFlOcXNBbVF5alk1Nk1VcXR5M2MveEg2R3VoTnZOYUc5dkdiRzZjUHRCTThVQTNlOHI1MUQwQVI5a296S3VHR1NNZ0x6M25BSHhETm5jN0dUd3BMajcvNkhlV3AxaWtzRGVUandDTHB4ZWp1TXRwTW5HSmdzaWt1MXNPQUN3UTl1a3pFU2lEUk43N1lORVN4UjVMcGhPbGNBU1hBNXVJdHMxTG5CSWNuMUo3QkxXczQ5RE1BTFNudXo5NWdkT3JUWnIwdTFTZVlIaW5uby9wRTU4eFlvWGJWTy9TK0ZFTU1zNXF5V2tNbnA4UTNDbHlUbFpQNTJZOW5xN2I4ZklUUHVWWFVrOW9oRzVFRkh3NGdBRWNqRnhmS2IzeHVBc0VqeDJ6MXd4TmJTWk1jZ1M5R0t5VzNSNkt3Sk9OZ3RBNjRMVHl4V204QnZ1ZHAwTTFGZEpQRUdvcE00RnZnN0cvaHNwdGtoQ2ZIRmVndjRFTnd4UGVYbVloeHdaeTdqcytCZU0yN3Q5T0RCTXluVkNMSjdSV2NCTXRlWkp0dmpPWUhiNWxPbkNMWVdORU1LQzU5QkE3Y292dTFjQU5hMlBYTDA1aUdkdWZPemtnRnFxSEJPcmdRVlVtTEVjK01rejRScThPNldrTnI3YXROa0g0TThkK1NEMXQvdFN6dDNvRnFsK25lVnMrQXdFSTVKYUJKYXhBUnRZMlo0bUtvVXF4ZHM0VXBaMHN2M3pJYk5vbzBKNGZpaGxkUVRYM1hOY3VOY1ptY3JCNUxUV01kemVSdUF0QmszY1pIWVFGNmdUaTNQTnVESjBubVIrNExQTG9IdnhRSXhSZ0o5aU5OWHFmMlNZSmhjdkN0SmlWV284NVRzeUZPdXE3RXlCUEpyQWRoRWdFMGNUcTE2RlFYaFlQSkZxU2ZpVm4wSVFuUE95MExiVTRCZUc5NFFqZFlOQjBDaVEzUWF4UXFEMmViU01pTmphVmF3OFdhTTRaNVduemNWRHNyNGVHd2VTTGEyREUzQldWaWF4aFpGSWNTVGpneE5DQWZlbGcraHpuVk9Zb2U1VnFUWXMxZzdXdGZUbTNlNC9XZHVDNnArcXFBTThINFp5ckpDR3Bld1RoVERQZTZIN0N6WC96UThUbStyNjVIZVpuK01zbXhVY2lFV1BsQVZhSy9WQmFRQldmb0cvYVJML2pTWklRZmVwLzg5R2phc1dtYmFXemVFWjJSMUZPanZ5SlQzN085QjgwNDZTUlNLVkVuWFdsQnFia2I1WENTM3FGZXVFOXhiOStmckVrbnhXQjVoMUQvaHJ1ejJpVkRFQVM3K3FrRXo1T3Q1YWdISmM3V0NkWTk0V3M2MXNVUmNYNW5HOFVFTEdCQUhaM2krM1Z1bEF5VDBuS05OejRLMkxCSEJXSmNUQlgxd3pmKy8vdS9qLzkrLy92ODcrOS9sOUxiaC9ML3V5TllpVHNXVjJMd3NqYUE2TXhUdXpGTXFteFc4SncvK0lwcGRYOHQvQ2xnaTFySTFTTjBVQy9yNnRYLzRsVWMyVlYxT1FSZVNlQ3NqVXBLWmNodzRYVWNqSGZ3NnJ5Q1YzUjhzNlZYbTY3dnA0bitsY1BWOWdKd21iS1FFc21ySmk5YzJ2a3dybThIRmJWWU5UYVJHcThEOTF0OW41K1UrYUQvaE50TjNIakMvbkMvdlVvR0ZTQ2tYUCtObFJjbUxVcUxiaVVCbDRMWWYxVS9DQ3Z3dGQzcnlDSDhnVW1HSVRBeGlIMU81cm5HVHo3eTFMdUZqbW5GR1ExVVd1TTdId2ZYdFdsMmZQRktrbFl3TlVwRjJJTC9UbWFSRVRqUWlNNVNKYWNJKzNHdjVNQlU4bFA1SW82Z1drYXdweXpORVZHcU9keDRZbE8xZEN2amJXRlpXYkNtZWlGS1BTbE1LdEtjTUZMcy9LUXh0Z0FIaTdOWk5DUTMyYkJBVzJtYkhmbFZaOHdYS2kxSktWSGtXMjBibllubDNkS1dKZVdKT2lYM29LUEJENlpiaTBadlNJdVdrdFVIQjhxRFI4RE1NaDFaZmtCTDlGUzl4NXIwaEJHTEo4cFVDSnYzTllIK0FlOHA0MG1aV2Q1bTVmaG9iRmpRZVF2cVRUNFZLV0lZZlJMMHRmYVhLaVZsNzVoSFJldVRKRWNxVmx1ZytlT0lJYzRiZEl5ZHRuMkswaU5aUHNZV1F2UWlvMnFiTzNPcUFsUEhERE9CN0RmakdFZlZGNTFGcXFOYWNkNlFtZ0ZLSnBNZkxwNURIVHY0d1hsT05LVlhGOXpUSnBEVjRtMXNZWnFKUGhvdGNzbGlaTTh5a3NLa0NrenBpWHQrRWNSUXZTUXFtQlM5V2RXa3hNVEpYUFN3OTRqcUkzdmFyQ2pReFRhempsTUg4alRTOGlsYVc4MDE0L3Z3QS9MTmErWWlGb3l5eDNzL0tzd1AzTzhRVzFqdHE0NXlUTS9EWDlhOE00dm9UVmFPMmVidncxRW9vRHcveWc2WTFmYVkrV3dyZFZzNVl0MGhRNUV3UmZZWFNGeHJheTFZdlNNK2tZbWxwTEcyLzltbTFNZm1iS0hYcjQ0SWg4blZLYjFNNTM3WkFOVWtDdGRzUFo4MEpWS1ZLYWJWSENhZGFMWGcrSVY4aTVHU3dwWnRpMGg2ZGlUYUtzOXNkcFVLRXBkN2pEVXBZbUh0aVgzM1NLaU8zdHV5ZGtheEE3cEVjOVhJUUVPZldKbHN6ajVZcEw1YktlUXlUN2FaU0JPYW12U0hsOHhzV3ZnbzI2SVAvYnFrKzBFSlV6K2dra2N2bFVseVBwMmtkS0Z0dDd5NWFDZGtzOVpKSmNGcDVaV2VhV0tndG5YTU4zT1J3R0xCRTBQdGtFSWVrNUZZMmFWc3NVWkh0c1dJdm5sak1WSnR1VklqcFp1cC81VkwxeVBPSFdXSGtPTWM2WXlTV01ja2N6RDVqVWoybWxMVnF1RmFNVThsZUdWYXFlWGlzK2FSUkw4em00V3VCazZjeVdmR014Z3RyOHVzZVFFeDdrL1B2Um9aeWQ5bmRlMUdVQ1Y4NGdNWDhPZ3UvQldlellQU1IyN2xselFuQTk3b28wcFl5eG9iWVVKZnNqK3lzVG05ekorUzRwazBUR285VlRHMEtqcVloVG1BTGZvRFpWS2xhMmI1eWh2MjQxUHhGYUxKczNpMDVLMEFBSWRjR3hDSlptVDNaZFQ3Q2xpUjdxK2t1cjdXZFFqeWdZdE9XUkw5QjhFNHM0TEk4S3BBajdiRTBkZzdETE9hWCtNR2VBaTBoTU1TU1daRXorUnVkWGJaQ3NHWVMwUXFpWGpIOVhRYmQ4c0NCK25JVlRxNy9UL0ZEUyt6V1k5cTdaMmZkcTF0ZExiNnYzaEtLVkRBdzVnamo2bzlyMXdIRlJPZEhjMThNSnA0U0oyVWN2dStpUTlFZ2tla1c4VkNNK3BzTTZ5Ky8yU0J5OHROTjRhM0wxTXpQK09Mc3l2RVNvNWdTN0lRT25JcU1tdmlKQlZjNnpiVkcxbjhlWGlBM2o0NmttdnZ0Smxld3dORHJ4azRTYkpPdFAvVFYvbElWSzl1ZVNoTmJiTUhmd25MVExMaGJadU83OWVjNVh2ZmdSd0xGSyt3MXI1WldXMTVyVkZackUrd0txTlJ2NUtxc0xOZnBHZ25vVVU2WTcxTnhFbU43TXlxd3FBUXFvSVVMT3cvTGJ1VUIyK3VFNzVnSnQra3ExcVk0TG94VitxUi96YWx1cGVhM0Q1K1dNZWFSSW4wc0FJNkREV0RoMTU4ZnFVYjRZaEF4aFJFYlVOMHF5eUpZa0JVNFYyS0FSWERUNjVnVzNnUnNpdjd4U1BZRUtMd3pncmlXY1dnUHIwc2JabnY3bTFYSE5GVzZ4UGRHTlpVZHhGaVVZbG1YTmpEVld1dTdMQ2tYL25Wa3JYYUpoaVlrdEJJU0MyeGdCWFFuTkVQK2NwdFdsMWVHNjJhN0NQWHJucmtUUTVCUUFTYkVxVVpXTURpWlVpc0t5SERlTEZPYUpJTFVvNWY2aUR0NFpPOE1scWFLTHRvMEFtVEhWVmJrR3V5UGExUi95d1pzV1JvUkRvUmROTU1Id1lUc2tsTVZubEFkMlMwMjgyYmdNSThmaUpwRGg2OU9TTDZLM3FibzIwS2ZwTk11cm5ZR1FTci9zdEZxWjdoWXN4S2xMbktBS2hzbUI4QUlwRVE0YmQvTnJUTFRYZWZzRTZDaFJtS1dqWEtWZ3BHb1BzOEdBaWNnS1Z3NEswcWdEZ3kxQTZoRnExV1JhdDNmSEYrRmtVK2I2SDROV3BPVTNLWFR4ckliMnFTSEFiK3FobThoaVNST2kvOW9mYXBqeGh5S3h4bnRQcGdlNktMNVo0K1dCTVlrQWNFNiswSGQzWWgyekJzSzJNVjNpVzBZNmN2T0Nyb1hsUmIyTU1KdGRXeCszZGtGekdoMlBlM0RaOVFwU3FwYVIvckUxSW1PckhxWVl5Y2NwaUxDMjJhbUpJalJXVkFoZXJUZnBRTG1vNi9LMnBuYTg1R3JEdVFQbEgxVHNhcjhpc0FKYlhMYWZTd09vZjRnZzlSa0FHbS9vWXBCUVFpUFVveURrMkJDUTFrK0tJTHE0OEVyRm80V1NSaEhMcS95N21ndzMrTDg1UHBQNnhXcjZjZ3A5c09qWWpLYWdPcnhGMTQ4dWh1YVd0amV0OTUzZmgxSVFpRXpnQytkMklnQkNjVVpxZ1RBSUNtMmJSOG9DakRMQnNtZytUaHloZkQrekJhbHNLQlkxQ2U1NFkvdDljd2ZiTHU5U0Z3RWdwaGZvcE5BM3lOeGd5RGFmVU0zbVlUb3ZaTmdQR2RkNFpGRk9qMXZ0ZkZXM3U3TitpSEVOMUhrZWVzRE1YS1B5b0NEQ0dWTW80R0NDRDZQQmhRM2RSWklIeTBZLzNNYUU1elU5bVRDcnd3blpvanRFK3FOcE1Ta0pTcG1HZTBFekx5RmVsTUpxaGZGUTdhNTB1WHhaOHBDYzJ3eHRBS1dnSG9lYW1SMk83UiticTdJYlBZSXRPMGVzZFJnb1RhWTM4aFpMSjV5MDJvSVZ3b1Bva0dJenhBTUR1YW5RMXZuMldEUTAwUmg2bzVRT2FDUnU5OWZ3RGJRY04wWEF1cWtGcHhUL2NmejNzbEdSVm9rck5VMGlxaU1BSkZFYktTY1pkbVNrVFV6bkMwVStNZndGT0dkTGdzZXdSeVBLd0JaWVNteTZVMzI1aVVoQlFOeGJBQzNGTEtEVjlWU091UXBPT3VrSi9HQW11L3R5RWJYOURnRXA2ZHYxem9VMElxenBHNmdzc1NqSVlSVlBHZ1UxUUFRWVJnSVQ4Z0VWMEVYcjFzcWVoMkk2clhqdG1vQ1l5RURDZS9Qa0ZFaS9RNDhGdVQyOXA1NTdpTitMQ3drNUNLL0NaMldkQWRmUVpoMlo5UUdyelBMU05SajVpZ1VXemw5VmkwckNxSDhHMUtwNFFNTGt1d01DQXlwZHZpRFh5T0lrMEFIVE04SEJZS2gzYjAvRitEeG9OajRaZG9aZkNwUVZkblphcnFvTWFIV25NTE5WY3lldnl0R3NyWFFFb0lidWJxV1lObzdOUkh6ZGMwenZUMjFmV1Zpcmo3ZzM2aXk2cHhvZ2Z2Z0hwMXhIMVR1cmJ6OFF5eUhuWGVCSmljcFlVY3RiekFwd3paMUhUK0ZQRVhNQWdVWmV0Z2VHTXd0NEcrREhpRFQyTHUrUFQyMWZqSkNBZlYxNmEvV3UxUHFPa1VIU1RLWWhXVzZQaGhIVWxOdFd6Rm5BN01iWStyNjR2a3dkcGZOQjJKZldnV1hBdmt6ZDQySzRsTjl4N1dyZzRrSUtnWENiNG1jVzU5NU1DUEovY1RmUEFNUU1GV3ducXdkZTR3OEhaWUpGcFF3Y1NNaGpWejRCOHA2bmNTQ04xWDRrbHhvSUg0Qk4ySjZ0YUJNajZsSGtBT3M4SkpBbVhxNXhzUXRyUElQSUlwL0hHNmkyMXhNR2NGZ3FEWFNSRjB4UWcxNGQydXk2SGdLRTEzTFN2UWU1Mm9TaEY1SngxUjZhdnlMNHRoaFhRWkhmQzk0b1p6dVBVQktGWWYxVnZEYXhJcnRWNmROR1N4N0RPMGkxcDZDekJrdUFtRXF5V2NlUVk3RjkrVTBPYllEem9hMWlLYW8vY09EL3Y2UTlnSHJycjF1Q2VPazhmU1Q5TUcyM1VsMEttTTNyK1duNkhpNldBY0w3Z0VlYXlraWN2Z2p6a2pTd0ZzQVhJUjgxWng0UUo2b29zVnlKa0NjVCs0eEFsZENjaWhxdlRmOTRISFVQWFlwM1JFSWFSNGRocFFGNitGSzFIMGk5aTdQdmg4b3d1M2xPNFBUMWl1cXUrRGtMMkJqOStrZGZHQWcyVFh3MDNpTkh5b2J4b2ZMRTJpYmpzWURQZ2VFUWxSTVI3YWZYYlNHUWNuUGpJMkQrc2R0bXVRNzcxZGJBU1VzRG5kVTd0NThqcnJOR1J6SVN2d2lvQWxIczVGQStjQkU1Q2N6bmtkOE5NVjZCUjZrc25LTFBabk1VYXdSRFUxTVovaWIzeENka1RibEhLdTRibE5peWxINW4yMTN5TTB6dWJFaWUwbzRKaHpjZkF5M0g1cWgybDE3dUxvb0JOTGFPK2d6b25USDJ1RjhQUXU5RXlIK3BqR3NBQ1RNeTRjSHpzUGR5bVVTWFlKT01QM3lUa1hxdk8vbHB2dDBjWDVla0RFdTlQVWZCZVpPRGtGdUFqWENhR2RpNmV3NHF4SjhQbUZmd21QcGtnUWpRbFdxb21GWTZVa2ptY25BdEpHNzVFVlIrTnB6R3BQMUVmNXFVVWJmb3dyQzN6Y1NMWDNCeGdXRWdFeC92OWNQOEg4dTFNdnQ5L3JNRFlmNnNqd1UxeFNPUEJnekZFZUpMTVJWRnRLbzVRSHNVWVQ4WlJMQ2FoMjc1OTlFdXFvQzlQWWpZTzZhb0FNSEI4WDFPSHdFQVlvdUhmSEIzbnliMkIrU25aeE0vdncvYkN0T1JqTE1TeTVhWm9FcHZnZEd2bEpmTlBGVXUvcDdaNFZWSzFoaUkwL1VUdUIzWlBxNG9oRWJtN01udGdjMWV2RXRrbmFvc2daU3duREMyQmRNbWlicGVnNDhYOEl4bCsvOCt4WGRic2hRWFVQUHZ4OGpUM2ZrRUxpdkhTbXFiaGJsZk5GU2hXQXlRbkozV0JVNlNNWVNJcFREbUhqZExWQWRsQURkejlnQ3BsWnc2bVRpSHFEd0lzeGJtOUVyR3VzaVZwZzJ3OFEza2hLVi9SOU9qOFBGZUY0M2htVy9uU2Q5OW5aemh5akNYM1FPWmtrQjZCc0g0SDg2NldHeXY5RTBoVkF6UFlhaDJ0a1JmUVpNbVAycmluZk9lUWFsZ2Uwb3ZoZHVCakpzOWExR0J3UmVlcmNlaWZ5NDljdE9oNS82NUFUWXVNc0FrVmx0bXZUTEJrNG9IcGRsNmkrcDhEb05qNEZiMnZoZEZZZXIySlNFaWxFd1BkNW41ek5vR0JYRWpyZWcvd2gyTkZuTlJhSVVIU09YYTRlSlJ3eWdab1g2dm5XbnFWZENSVDFBUnhlRnJOQkordHNkb29Nd3FuWWhFN3pJeG5EOHBaSCtQME51MXdXeENQVEFEZk5XbXF4NjI2SUJKSnE2TmVhcGNHZU9tYnRYdmwwVGVXRzBZN09HR1Y0K0VIVHROQklUNVdkMEJ1amw3aW5YZ1pnZlhUTTVlZkQzcURUSjU0Tzl2M0Jrdit0ZElSbHExa1hjVkQwQkVNaXJtRnhnbE5QdDVwZWRiMUFueHVDWU1DaFV5a3dzVElXcVQyM1hEcHZUaUtFcnUxY1RjRU1lbmlCK0hRRGVoeFBYTm1rb3RGZHdVUG5pbEIvdTROeDVYYzZsOEo5akgxRWdLWlVVdDh0OGN5b1psZURCRXQ4b2liRG1KUkFvTUtKNU9lOUNTV1M1Wk1FSnZhY3NHVmRYRFdqcC9ZcGU1eDBwOVBYQjJQQXd0MkxSRDNkK2Z0TmdwdXl2eGxQOHBCODRvQjFpNzN2QVZwd3lybVhXNzJoZlc2RHpuOUprajQrKzBWUTRkMEtTeDFBc0RBNE90WFhEbzYzL3crR0QrekM3dzVTSmF4c21ubFlSUTRkZ2RqQTd0VGwyS05MbnBKK212a29EeHR0MWE0b1BhWDNFVnFqOTZvOXNSS0JRcVU3Wk9pdXBlQUl5TE1EK1kzWXdIeDMwWFdIQjVDUWl3N3EzbWoxRURsUDJlQnNaYno3OWF5VU1ieUhRN3M4Z3U0TGdpcDFMaUdKajdOUWo5MDUvK3JnVVlLQUE1cWRybEhLSWtuV21xZnVSK1BCOFJkQmtEZy9OZ25sVDg5RzcyaDJOdnlTbmo3VXlCd0QrbWkvSVdzMXhXYnh1VndVSVZYdW41Y01xQnRGYnJjY0krRElManNWUWc2ZWVxMGl0aVJmZWRuODlDdnlGdHBreGFhdUV2U0FOdVptQjFwOEZHUGJVOTRKOW1lZHdzWjlIa1VZam1JN09INUh1eGVuZExieFRhWXJQdUlmRTJmZlhGS2hvTkJVcDMzSHNGQVhtQ1YvVnhwcTVBWWdGb1JyNUF5OTNaTFJsZ2FJUGpoWmpYWlpDaFQrYUU1aVdBWE1YMG9TRlFFdHdqaXVoUVFJdFRRWDVJWXJLZktCK3F1ZVROcGxSMUhvZmxvNS9JNmFQUG1BQ3dRQ0UyalRPWW81RHoxY3M3U29kMEtURy8za0VER2sza1VhVUNPTjE5eFNKQ2FiM2tOcFdaaFNXa084bCtTcFc3MFduM2cwY2lPSUpPNUpYbWE2ZGJvczZqeWlzdXhYd1VVaGoyKzF1R2hjdnVsaUt0V3dzVVR3NGdpMWMvZGlFRXBaSG9Lb3hUQmVNRG1oUGhLVHg3VFhXUmFrVjhpbUpSMzU1RGNJSGtSOUlSRUh4b2hQNFRieVI1THRGVTI0dW1SUFJtRVlIYnBlMUxnaHl4UHg3WWdVSGpOYmJRRlJRaGg0S2VVMUVhYlh4OEZTM0pBeHAycndSRG9lV2tKZ1dSVVNLdzZnR1A1VTJQdU85VjRadWlLWEdHekZRdVJ1Zit0a1NTc2JCdFJKS2hDaTNFTnVMbFhoUGJqVEtENGRqWFZuZlhGZHM2WmIrMVhpVXJSZnlheUd4SnExK1NZQkVmYktsZ2ppU21rMG9yZ1RxelNTK0RaNXJUcXNKYnR0aU50cCtLTXFHRTJBSEdGdzZqUXFNNXZENnZNcHRtWFY5T0FqcTQ5VWYvTHg5T3BhbStIbjVPOXA4cW9CQkFRaXh6UVo0ZU5Wa085c1B6SkFNeVIxeTQvUkNRUTFzMHBWNUtBVTVzS0x3M3RrY0ZiSS9KcXJqQ3NLNE13K1c4YW9kNGxpb1l1YXdVaUN5VldCRS9xUGFGaTVibmtncGZ1L2FlNDcxNzRySTFmcVFvVGJXMEhyVTZGQWVqcTdCeU0wVjR6a1pUZzAyL1lKSzJON2hVUVJDZVo0QklnU0VxZ0Q4WHNqekc2TElzU2J1SG9JZHovTGhGemJObjFjbGNpMU5IV0owLzYvTzhISk1kSXBFWmJxaTFScnJGZm9vL3JJLzd1Zm0yTVBHNWxVSTBJWUo0TUFpSFJUU09GSjJvVHZlckZIWVhUaGtZRklveUZ4NnJNWUZnYU9LTTR4TldkbE9uSWNLYi9zdXB0cHRnVE9UZFZJZjRZZ2RhQWpKbklBbTRxTk5ITlFxcUF6dmk1M0dreVJDRW9zZVVCckhvaFpzalVia1I4Z2ZLdGMvK09hNzJsd3hKOE1xNkhEZkRBVGJmYkpoemVJdUZRSlNpdzF1WnBySGx6VWY5MFdncUc3NnpPMGVDQjFXZFB2MUlUNnNOeHhoOTFHRUwyWXBnQzk3aWtGSHlvYUg5Mm5kd2R1cVo2SVlqa2cyMERYMzNNV2RvWms3UWtjS1VDZ2lzSVlzbE9hYUx5dklJcVJLV1FqMTZqRTFEbFFXSkphUG9wV1RKalhmaXhFalJKSm84ZzQrK3d1UWpicStXVllqc3FDdU5JUVczWWpueEtlMk01WktFcXErY1g3WlZnbmtic1UzUldJeVhBMXJ4djRrR2Vyc1lKakQvL2F1bGRYR21jRWJjZlRlRjE2WTE3MDhGQjFISWZtV3Y2ZFNGaTZvRDRFK1JJakNzRVora1k3ZEtud1JlSkp3M3hDakt2aTNrR040MnJ2eWhVbEl6MEJwK2ZOU1Y1eHdGaXVCekcyOTZlNXMvb0hvRnRVeVVwbG1QdWxJUGwrZTFDUUlRVnRqbHpMenp6YlYrRC9PVlF0WXpvNWl4dE1pNUJtSHVHNE4vdUtmSms1VUlSRXA3KzEyb1psS3RQQm9tWFN6QVkwS2d0YlB6elpvSFF4dWpuUkVVZ0JVK08vaktLaGd4VmhSUHRicXlIaVVhUndScEh2N3BnUlB5VXJuRTdmWWtWYmxHbWZUWTI4dEZDdmxJTEMwNFR6M2l2a05XVmF6QStPc1lyeHZSTS9oaU5uOEZjNGJRQmVVWkFCR3g1Uy94RmY5TGJibWsyOThYN2lGZzJ5ZWltdnNRcXFKK2hZYnQ2dXErWmY5akMrSmN3aWNjZDYxTktRdEZ2R1dyZ0ppSEI1bHdpNmZSOEt6WVM3RWFFSGYva2E5RUM3SDhEK1dFYTNURUFDSEJrTlNqL2NYeEZlcTRSbGxDK2ZVRm0yeHRzdFlMTDJub3MxRGZ6c0M5dnFERGRSVmNQQTNIbzk1YUVRSHZFeFZUaFhQcXltNjVsbGtLbGZSWGJQVFJpRGVwZHlsSGptVjlZVFdBRWpsRDlEZFFuQ2VtN0FqL21sNThPbjM2NjM5MjIxNEI1enJtUXovOXlTRzJtRnFFd2pxNXNGbDV0WUpQdzVoTno4bHlaUFVUc3I1RTBGMkM5Vk1Qblpja1dQNyttYndwL0JpTjdmNGtmN3Z0R25aRjJKR3ZqSy9zRFgxUnRjRlk1b1BRbkU0bElBWVY0OVUzQzlTUDBMQ1kvOWkvV0lGSzlPUmp6TTlrRy9LR3JBdXdGbWdkRXBkTGFpcVFOcENUR1pWdUFPNjVhZmtZMWgzM2hycXlMalp5OTJKSzMvdHdkajlwYWZGY3dmWE9ObVBRV2xkUGxNZTdqbFAyNEpzMHY5bThiSUo5VGdTMkl1UnZFOVpWUmFDd1NKWU90QWZMNUgvWVM0RmZ6S1dLYmVrK0dGdWxoZXlLdERObEJ0cmRtcitLVStpYkhUZGFsekZVbU1meHczZjM2eCszY1FiSkxJdFNpbFc5Y3V2WkVNakt3OTg3anlrWlJsc0gvVUkrSGxLZm8ydEx3ZW1CRWVCRnRteEYyeG1JdEEvZEFJZlErclhubTg4ZHF2WGErR2FwT1lWdC8yd2FGaW1YRngzVEMyTVVpT2k1L01sKzNyai9ZVTZJaHgyaFhnaURYRnNVZVFrUkFENndGM1NDUGkyZmxrN1h3S0FBNHpib3F5bnVFTEQzMTJFSjg4bG1ERVZPTWExVy9LL2E4dEd5bFpSTXJNb0lMeW9NUXp6YkRKSE5acmhINzdMOXFTQzQySFZtS2laNVMwMDE2VVRwODNnT2hDd3o5WEl0SzlmZ1hmSzNGNWQ3blpDQlVla29MeHJ1dFFhUEhhMTZSanNhMGdUcnp5anFUbm1jSWNyeGc2WDZka0tpdWN1ZGMwREQ1VzRwSlBmMHZ1RFc4cjUvdXcyNFlmTXV4RlJwRDJvdlQybUZYNzl4SDZKZitNVmR2MlRZcVI2Lzk1NVFnVlBlM0pDRC9XakFZY0xBOXRwWGdGaUVqZ2UySjVsamVJL2lVemc5MUtRdUhrSUk0bW1IWnhDM1hRT1JMQUM2Rzd1Rm41TE9tbG5Ya2pGZG9POTc2bW9OVHhFbFM4SGR4V29QQWtqam9jRFIxMzZtMmwrZjV0NnhhYU5nZG9kT3ZUdTByaWV2bmhOQUI3OVdOclZzNkVzUGdrZ2ZhaEY5Z1NGenpBZCtySlNyYXc1TWxsaXQ3dlVQNVl4QTg0M2xVcHU2LzVqQVIwUnZINHJSWGtTZzNuRStPNUdGeWZlK0wwczVyM2swNUZ5Z2hTRm5LbzRUVGdzMDdxajRuVExxT1lqNnFhVzlrbkpURGtGNU9GTVlibUNQKzhIMTZUeTQ4Mk9qdkVSVjZPRnl3MDQzTDl3M2hvSmk0MDhzUitTR28xV3ZpWFV1OGQ3cVMrZWhLanBLd3hlQ3Roc20yTEJGU0ZlZXR4MHg0QWFLUHh0cDNDeGRXcUNzTHJCMXMvajVUQWhjMWpOWnNYV2w2dGpvL1dEb2V3eHpnOFQ4Tm5oWjFuaVV3TC9uaGZ5Z0xhbkNuUndhRkdEeUx3K3NmWmh5WjFVdFlUcDhUWUI2ZEU3UjNWc0tLSDk1Q1V4Sjh1OE4rOXUyLzlIVU5LSFczeDN3NUdRcmZPUGFmazJ3NXFacThNYUhUMGViZVkzd0lzcDNyTjlscnBJc1c5YzF3czNWTlYrSndOejBMbzkrVjd6WnI2R0Q1NldlNmdXVkl2dG1hbTVHUFBrVkFicjc0cjZTd2h1TCtUUlh0Vy8wcGd5WDE2Vk5sNC9FQUQ1MFRuVVB1d3JXNk9jVU8yVmxXWFMwaW5xODcya2s3R1VsVzZvL296RktxK1NpcDZMY1R0U0RmRHJQVGNDSGh4NzVIOEJlUm9uK0tHMndSd3pmRGdXaEFMbWlXT01PNmgzcG0xVUNaRVBFalNjeWs3dGRMeDZXcmRBMk4xUVRQRU52Tm5oQ1FqVzZrbDA1Ny9xdjdJd1JyeUhyWkJDd1ZTYkxMbkZSaUhkVHdrOG1sWWl4RnQxc2xFY1BEN0ZWaHQxM0h5cVZleUQ1NUhPWHJoMkVsQXhKeWluR2VvRnp3S0E5MXpmcmRMdkR4SlNqem1JbWZ2VGlzcmVJMjVFRGNWZkdzbXhMVmJmVThQR2UvN05tV1dLalhjZFRKMTFqQWxWSVkvQnYvbWN4Zy9RMTB2Q0h3S0cxR1cvWGJKcTVueERoeUxxaW9ybjdXZDdWRVZMOFVnVnpwSE1qUStaOERVZ1N1a2lWd1dBS2tlVGxWVmVaN3QxREduQ2dKVklkQlBaQUVLNWY4Q0R5RE5vN3RLNC81REJqZEQ1TVBWODZUYUVoR3NMVkZQUVNJNjhLbEJZeTg0RmlldmRVOWdXaDZYWnJ1Z3Z0Q1ptaTl2ZmQ2ZGI2VjdGbW9FY1JIbkczNlZaSDhONGFaYWxkcTl6WmF3dDF1QkZneFlZeCtHcy9xVzFqd0FOZUZ5K0xDb3lteU02emdHN2o4Ykd6VXlMaHZyYkprVFlBRWRJQ0ViNGtNS3VzS1Q5VjNlSXdNTHNqZFVkZ2lqTWMrN2lLcnIrVHhyVldHMFUrVzk1U0dyeG54R3JFNGVhSkZmZ3ZBalVNNFNBeThVYVJ3RTlqNlpRSDVxWUFXR3RYQnl2RGlMU0RmT0QweUZBM1VDTUtTeVEzMGZ5eTFtSVJnNFpjZ1pITE5IV2wrYzlTZWlqT3ZiT0p4b1F5N2xUTjJyM1k4cDZvdnh2VVk3NGFPWWJ1VmV6cnlxWEE2VStmY3A2d1NWOVg1L09aS1AxOHRCNTZVYTBnTXl4Skk3WHlOVDdJcnFOOEdzQjlyTC9rUDVLTXJqWHhncUtMRGErVjVPQ0g2YTVobU9XZW1NVXNlYTl2UWw5dDVPY2U3NlByVHlUdjUwRXhPcW5nRTNQSFBmU0wvL0FJdFBkQjdrR255VFJoVlVVRk5kSkoyejdSdGt0WndnbVF6aEJHL0c3UXNqWm1KZkNFN2s3NUVtZElLSDd4bG5tRHJOTS9YYlRUNkZ6bGRjSC9yY1JHeGxQcnY0cURTY3FFN0pTbVFBQkpXcVJUL1RVY0pTd29RTSsxanZEaWd2cmpqSDhvZUsyaW4xUysveU8xajh4QXdzL1Q1dTBWbkl2QVBxYUUxYXROdU4wY3VSbGlMY0gyajBuVEw0SnBjUjd3OVF5YTBKb2FIZ3NPaUFMTENDelJrbDFVVUVTeit6ZS9nSVhIR3REd2dZcks2cENGS0oxd2ViU0RvZzR6VGxQa2dYWnF4bFFEaVlNamhEcHdUdEJXMld4dGhXYm92OWR0Mlg5WEZMRm1jRitlRWMxVWFRNzRncVppWnNkajYzcEgxcWN2M1Z5OEpZY2lvZ0lWS3NKOFl5M0o5dy9HaGpXVlNRQW1yUzBCUE9XSytSS1YrMGxXcVhnWU1uSUZ3cGNaVkQ3elBTcDU0N2k5SGxmbEI4Z1ZuU1RHbW1xMUNsTzA4MU9XL1VIMTFwRVFNZmtFZERGempMQzFDZG8vQmRMM3M3Y1hiOEorK0h6ejFyaE9VVlpGSVBlaFJpWjhWWXU2KzdFcjdqNVBTWnU5Zy9HQmRtTnpKbXlDRDl3aXN3ajlCWncrVDNpQnJnODFyZTM2aWhNTGpvVkxvV2MrNjJhMVUvN3FWWDVDcHZUVkY3cm9jU0FLd3Y0Y0JWcVptN2xMRFMvcW9YczRmTXMvVlFpNkJ0VmJOQTN1U3pLcFFmakgxbzN4NExydmtPbjQwemhtNmhqZHVEZ2x6SlV3QTBQT2FiZ2RYSW5kcDlmemhPbzIzUGUrUms5R1NMWDBkNzFQb3FyeThOUURUek5sc2ErSlRORzkrVXJFZituZ3hDakdFc0RDYzBieit1ZFZSeUhRSTFqbUVPM1MrSU9ReWNFcTdYd0I2ejN3Zk1mYTczbThQVlJwK2lPZ3RaZmVTQmwwMXhuMDN2TWFRSmt5ajd2bmhHQ2tsc0NXVlJVbDR5KzVvTlV6UTYzQjJkYmpERjN2aWtkLzNSVU1pZlBZblg1R2xmdWsyRnNWLzdScWpJOXlLVGJFOHdKWSs3NHA3cVhPOCtkSVlnanRMRC9OOFRKdFJoMDROOXRYSkE0SDU5SWtNbUxFbGd2cjBRNU9DZVZmZEF0KzVoa2g0cFFnZlJNSHBMNzRYYXRMUXBQaU95SFJzL09kbUh0QmY4bk9aY3hWS3pkR2NsSU4xNmxFN2tKK3BWTWpzcE9JKzUrVHFMUk82bTBacE5YSm9aUnY5TVBEUmNBZkpVdE5aSHlpZy9zMnd3UmVha0ZnUFBKd0NRbXUxSTMwL3RjQmJqaStOYTUzaTFXMU4rQnFvWTdaeG8rVS9NOVh5SjRPazJTU2tCdG9Pcnd1aEFZM2EwM0V1Nmw4d0ZkSUcxY04rZThob3BUa2lLRjA5M0t1SC9CY0IzOXJNaUdETG42WFZoR0tFYWFUL3ZxYi9sdWZ1QWRwR0V4ZXZGMStKOWl0a0ZoQ2Z5bVdyOXZHYjNCVEs0ajU5OHpSSDcrZStNVTltYXJ1WnFiMHBrR3hSRFJFMUNENFo4TFY0dmhnUGlkazV3MkJxODE2ZzNuSHcxLy9qM0pTdHo3TlI5SElXRUxPOFRNbjNRclAvelpwLy8rRHY5cDQyOS9vZ3YrR0FUUituL1VkRituczl4TmtYWlFKWFk0dDlqTWtKTlVGeWdBdHpuZFh3anNzK3lXSDlIQW5MUVFmaEFza2RaUzJsMDFITFd2N0w3dXM1dVRINDA5cHFpdHZmU09RZy9jK1p0N2s4NzlQM0s5K1dWNjhuNyszY1pmdVJkL2REUFAvMDNybitkKy9uQnZXZmdEbHQ4K0x6anFKL3Z4M0NuTk93aVhoaG83NzhDOTZpRCsxVEJ2UlpZZVArRUg4MUxFMHZWd09Pcm1DTEIzaUt6STF4K3ZKRXNyUEg0dUYwVUI0VEo0WDN1RGZPQ28zUFlwWWUwTUY0Ym91aDBEUS9sNDNmeFVGN1krZHBXdXZUU2ZmQjB5TzJVUVVFVEkvTHdDWkUzQnZuZXZKN2M5elVsWTNINTh4emtlNkRORkRRRzhuMFd0RE40TEFZTjRub2dLYXYxZXpPZksveit0NnRzQ1RwK2RoeDR5bWpXdUNKazFkRVVpZkRQK0h5UzRpUC9WZzlCMmpUbzlMNE5iaUJ1RFM0bnV1SFc2SCtKRFFuMkp0cVJLR2tFUVBFWUU3dXphelhJa2N4SUFxVXExZXNhc1pCRVRsRVpZN3k3Sm8rUm9WL0lzalk5ZUlNa1V2cjQySGMweHF0c2F2WnZoejFPTHdTeE1PVHVxemxoYjBXYmRPd0JIOUVZaXlCamF0ejQwYlV4VEhiaVd4cUowdW1hMTlxaFBydXZjV0psYmlTU0g0OE9MRERwYUhQc3p2eWN0NDFaZlR1MTArdmpveDZrT3FLNnYwSy9nRVBwaEV2TWwvdndTditBNEhobTM2SlNQOUlYVHlDWkRtNGtLc3FENWF5OGIxU2FkL3ZhaXlPNU4vc0RmRVY2WjRxOTVFK3lmanhwcUJvQkVUVzJDN3hsNHBJTzJiRE9EREZ1clVQd0U3RVdDMlVwbHErQUhtQkh2aXIyUFNna1IxMi9SeTY1TzBhWnRRUGVYaTltVGxGL1dqNUdRK3ZGa1l5aFhzTFRqckJTUDlod2s0R1BxRFA1ckJuNS9sOGIwbUxSQXZSU3pYSGMyOTNiczNzOEVzZEUzbTJleHhpZFdWQjRqb0hSK1MrZHo1L1crdjAwSzNUcU4xNENEQnRoOGVXY3NUYml3WFBzeWdIZEdpZDBQRWR5NkhIbTJ2L0lVdVY1UlZhcFltekdzWDkwbXBuSWROR2NPT3E2NERiYzVHVWJZcEQ5TTdTKzZjTFkvL1FtanhGTFA1Y3VURlJtM3ZBNXJrRlpyb0ZuTzNiakhGMzV1VTNzOG12TDdUcDlueVRjNG15bVRKNXNMSXA3dW1TbkdrTzIzZmFlaHR6M21tVFM3ZmJWeDVyUDd4M0hYSWpSTmVxL0EzeENzOUpOQjA4YzlTOUJGMk8zYk91cjBJdHNsRnhYZ1JQZGFhcEJJaTRkUnBLR3hWejdpcjY5dC9iYzlxVHhqdnRPeUdPZmlMR0RoUjRmWXl3SHYxV2RPcGx4SVY4N1RwTEJ5M1djMFFQMFA5czRHN0ZCTk9kSVRTL3RlcDNvM2gxVEVhNVhERGlpN2ZXdHFSelVFUmVQMmZieHo3YkhXV0pkYklPeE9VSlp0SXROWnBURlJmajZ2bTlzWWpSeFFWTytXVGRpT2hkUGVUSis4WWlyUHZvZUw4OGw1aUxZT0hkM2IvSW1rcSsxWk4xRWwzVWlraGZ0dXRlRVl4ZjFXdWpvZjhQcjRJQ1R1NWV6WnlaNHRIUU14bHpVSExZTzJWTU9vTk1HTC8yMFM1aTJvMm9iZmsrOHFxZFI3eHpiUkRiZ1UwbG51SWd6NExlbFE1WFM3eGJMdVNRdE5TOTV2M1pVT2RhVXgvUWQ4cXhDdDZ4ZjJFNjJ5Yi9IdWtMTzZSeW9yVjhLZ1lsNVlOYzc1eStLdmVmcnhZK2xjLzY0eTlrdldQMGEwYkR6L3JvanErUldqTzA2V2VydVdxTkZVN3IzSFBJY0xXUnFsOElDWnN6MkxzL3FPbS9DTG42KytYK1FmN21Hc3BZQ3Jab2QvbHBsNlJ3NHhOL3l1cThncVY0QjZhSGsxaFZFMVNmSUx4V3U1Z3ZYcWJmQVJZUXBzcGN4S3AxRi9jOFhPUHprWnZtb1N3K3ZFcUJMZHJxMWZyM3dBUHY1Tm5NOWk4RitqZEF1eGtQNVo3MWM2dWhLM2VubG5HeW1yN1VzV1pLQzEycWdVaUc4WFhHUTlteG5xejRHU0lseWJGOWVYbWJxajJzSFgrYTFqZjBnUm9PTkhSZFJTcklxMDNUeTg5ZVExR2JWL0JrK2R1NCtWMTV6bHMrdnZFUnZaNEU3WmJueFdUVmpEamI0by9rOGpsdzQ0cFRJclVHeHh1SnZCZU8raGV1aE9qcEZzTzZsVkovYVhuSkRhL2JNMFFsMWNMYlhFL1BidjNFWjN2ajNpVnJCNWlyanVwWlR6bG52Njc3TnJJOVVOWU5xYlBncC9IWlhTK2xKbWs4N3dlYys3WU94VERvMmF3MmwzTmZEcjM0Vk5sdnFXSkJrbnVLN29TbFo2L1QxMHp1T29QWk9lb0lrODFOK3NMODQzV0oyUTRaMGZaM3Njc3FDL0pWMmZ1aFdpMWpHVVJTS1pWNjM3bGY1M1hubngxNi92S0VYWTg5YVZKMGZ2OTFqR2RmRytHNCtzbml3SGVzNGhTK3VkT3I0UmZoRmhHL0Y1Z1VHMzVRYVUrTWN1TG1jbGI1WldtUitzRzVWNm5mK1B4WXpscm5GR3hwWmFLOGVxcVZvME5mbUFXb0dmWERpVC9GblViV3Z6R0RPVHI4YWt0T1pXZzRCWXZ6NVlIMTJaYmZDY0d0TmsrZERBWk5HV3ZIb3YrUElPblk5UHJqZzhoL3dMUnJUNjlzdWFNVlo1Yk51SzAwbFNWcG5xU1gxTk9OLzgxRm9QOTJyWW5kaW9ud2dPaUE4V01mNHZjOGwxNUtxRUVHNHlBbTIrV0FONUJyZnUxc3E5c3VXWXFnb2FqZ09ZdC9KQ2sxZ0M4d1BrSytYS0N0Ulg2VEF0Z3ZybnVCZ05SbW42SThsVkRpcE9WQjlrWDZPeGtwNFpLeWQxTTZHajgvdjJVN2srWVFCTDk1S2I5UFFFTnVjSmIwSmxXM2I1dE9iTjdtL1oxajFldjM4OGQ3bzE1emdYc0k5Q2lrQUdBVmlSNmxrSnY3bmI0QWs0ME0yRzhUSjQ0N2tOK3B2ZkhpT0ZqU1VTUDZQTStRZmJBeXdLSkNCYXhTVnhwaXpIc2VaVXlVQmhxNTl2Rndya3lHb1JpSGJvMGFwd2VFWmVTTHVOaVErSEFla09uYXJGZzAwZFpOWGFQZW9IUFRSUjBGbUV5cVlFeE9WYWFhTzhjMHVGVWg3VTRlL1V4ZEJtdGhsQkRnZzI1N1EzM2oxaEE3SFR4U2VUVFN1Vm5QWmJnVzFub2R3bUcxNmFLQkRLeEVldHY3RDlPak8wSmhyYkpUbm9lK2tjR29ESmF6RlNPOC9mVU45SnkvZzRYSzVQVWt3MmRnUERHcEpxQmZoZTdHQStjanpmRS9FR3NNTStGVjluajlJQWhyU2ZUL0ozUUU1VEVJWXlrNVVqc0k2WlpjQ1ByNkE4RlpVRjRnOW5ucFZtalg5ME1MU1F5c0lQRDBuRnpxd0NjU0ptSWI1bVl2MkNtaytDMU1ERmtaUXlDQnE0Yy9ZYWk5TEo2eFlrR1MveDJzNS9mcklXMnZtRzJXcnYwQVBwQ2RnQ0E5c25GdmZwZTh1YzBPd2RSczRHOTk3M1BHRUJuUUI1cUtyQ1E2bTZYL0g3TkluWjd5LzE2NzQvWlhPVnA3T2V1Q1JrOEpGUzUxNlZIcm5IMUhrSVVJbFRJbGpqSGFRdEV0a0p0b3NZdWw3N2NWd2prM2dXMUFqYWE2eldleUhHTGxwazNWSEUyVkZ6VDJ5SS9FdmxHVVN6Mkg5ellFMXM0bnNLTXRNcU55S050TC81OUNwRkpraTVGb3U2VlhHbTh2V0FURVB3clVWT0x2b0E4akx1d096VkJDZ0hCMkNyNVY2T3dFV3RKRUtva0prZmM4N2grc05IVHZNYjBLVlRwNTI4NFFUUHVwb1d2UVZVd1Vlb2daUjNrQk1FU1lvMG1mdWtld1JWUEtoNStyekxRYjdIS2pGRklnV2hqMXczeU4vcUNOb1BJOFhGaVVnQk5UMWhDSEJzQXo4TDdPeXQ4d1FXVUZqOTJPTm4vQVB5SkZnOGh6dWVxb0pkTmo1N1JPckZiZmZ1Uy9YeHJTWExUUmdqNXV4WmpwZ1FZY2VlTWMyd0pyYWhSZVNLcG0zUWpIZnFFeFRMQUIyaXBWdW1FOHBxY1p2OExZWFFpUEhIc2diNUJNVzh6TTVwdlFpdCttUXg4WEdhVkRjZlZiTHlNVGxZOHhjZm1tL1JTQVQvSDA5VVFvbDVnSXo3ckVTRG1uclE0YlVSSUI0aVJYTURRd3hnZXgxR2d0RHhLcDJIYXlJa1IrRS9hRG1DdHRObTJDNmx5dFdkZk9WekQ2WDJTcERXalFEbE1SdkFwMXN5bVd2NG15MWJQQ0QrRTFFbUduTUdXaE53bXljSm5EVjJXclFOeE80NXVrRWIwOEFBZmZpellLVlVMcDE1STR2Yk5LNUR6V3dDU1VBRGZtS2hmR1NVcWlpMUwyVXNFOHJCN21MdUh1VUpaT3g0K1dpaXpIQkovaHdib2FCemhwTk9WdmdGVGY1Y0pzSGVmN0wxSENJOWRPVVViYitZeFVKV242ZFlPTHorVEhpOTFrelk1ZHRPNWMrZ3JYN3YwakVic3VvT0dub0lyZURJZy9zRk15RytUeUNMSWNBV2QxSVoxVU5GeEU4VWllMTN1Y200MFUyZmN4QzB1M1dMdkxPeHd1K0Y3TVdVc0hzZHRGUVo3VytubGZDQVNpQUt5aDhyblAzRXlEQnl2dEpiNktheDYvSGtMelQ5U3lFeVRNVk0xelB0TTBNSlkxNERtc1doNE1nRDE1RWE5SGQwMEFka1RaMEVpRzVOQUd1SUJ6UUpKMEpSMG5hK09CN2xRQTZVS3hNZmloSVE3R0NDblZ6Njk0UXZ5a1dYVHhwUzJzb0R1K3NtcnUxVWRJeFN2QXN6QkZEMWM4YzZaT29iQThiSmlKSXZ1eWNnSVhCUUlYV3doeVRnWkRReEpUUlhnRXdSTkFhd0dTWE8wYTFES2pkaWhMVk5wL3RhRS94WWhzZ3dlK1ZwS0VFQjRMbHJhUXlFODRnRWloeENuYmZveU91SklFWHkyRklZdytKalJ1c3liS2xVMmcvdmhUU0dUeWR2Q3ZYaFlCZHRBWHRTMnY3TGtIdG1YaC84Zmx5MWRvOEZJL0QwZjhVYnpWYjVoK0tSaE1HU0FtUjJtaGkwWUcvdWo3d2d4Y2Z6Q3JNdmRqaXRVSXBYRFg4YWUySmNGLzM2cVVXSU13TjZKc2phUkdOaitqRXRlR0RjRnlUVWI4WC9OSFN1Y0tNSnA3cGR1eHRENkt1eFZseXh4d2FlaUMxRmJHQkVTTzg0bGJ5ckF1Z1l4ZGwrMk44LzZBZ1dwby9JZW9BT2NzRzM1SUEvYjNBdVN5b2E1NUw3bGxCTGxhV2xFV3Z1Q0ZkOGY4TmZjVFVnekp2NkNiQis2b2hXd29kbGs5bkdXRnBCQU9hejV1RVc1eEJ2bWpuSEZlRHNiMG1Yd2F5ajNtZFlxNWd4eE5mM0gzL3RuQ2dId2pTcnBTZ1Z4TG1pVHR1c3pkUlVGSXNuNkxpTVBqTDgwOHZMMXVRaERiTTdhQTQzbUlTWFJlcWpTc2t5bklSY0hDSjlxZUZvcEpmeDl0cXlVb0diU3dKZXgvMGFERTNwbEJQR3ROQllnV2JkTG9tMytRL2JqZGl6UjIvQVMvYy9kSC9kM0c3cHlsMXFEWGd0T0Z0RXFpZHdMcXhQWXRyTkV2ZWFzV3EzdlBVVXRxVGV1OGdwb3Y0YmRPUVJJMmtuZUZ2Uk5NclNoeVZlRXVwSzFQb0xEUE1TZldNSUpjczI2N21HQjhYOUNlaFFDRjBnSXlocFAxMG1ieU03bHdXMWU2VEd2SEJWMXNnL1V5VGdoSFBHUnFNeWFlYkM2cGJCMVdLTkNRdGxhaTFHR3ZtcTl6VUthVXpMYVhzWEVCWXRIeG1GYkVaMmtKaFIxNjRMaFdXMlRscDFkaHNHRTdaZ0lXUkJPeDNaY3UyRHhnSCtHODNXVFBjZUtHMFRnUUtLaWlOTk9sV2d2cU5FYm5yazZmVkQrQXFSYW0yT2d1WmIwWVdTVFg4OE4raS9FTFN4YmFVVXBQeDR2SlV6WWcvV29uU2VBOHhVSzZ1N0RQSGdwcVdwRWU2RDRjWGc1dUs5RklZVmJhNDdWL25iK3d5T3RrK3pHOFJyUzRFQTBvdXdhMDRpQnlSTFN2b0pBMkZ6YW9iYlp0WG5xOEdkYmZxRXA1STJkcGZwajU5VENWaWY2K0U3NXA2NjVmYWlYOGdTMjEzUnFCeFRacWZIUDQ2bkY2TlNlbk9uZXVUK3ZnYkxVYmRUSDIvdDBSRUZYWkpPRUI2REh2eDZONmc5OTU2Q1lyWS9BWWNtOWdFTEpYWWtyU2krMEYwZ2VLRFpnT0NJWWtMVS8rR09XNWFHajhtdkxGZ3RGSDUrWEM4aHZBRTNDdkhSZmw0b2ZNL1F3azR4MkErUitueWM5Z051LzlUZW03WFc0WFJueVJ5bWY1MnowOWNUT2RyK1BHNitQL1ZiNFFpWGx3YXVjNVdCMXozbytJSmpsYnhJOE15V3RTelQrazRzS1ZiaEYzeGErdkR0czNOeFhhODdpaXUreFJIOWNBcHJuT0wyaDZ2VjU0aVFSWHVPQWoxczhuTEZLOGdaNzBUaElRY1dkRjE5LzJ4YUptVDBlZnJrTkRrV2JwQVFQZG85Mlo4K0huL2FMamJPekI5QUkvazEyZlBzOUhoVU5ESjF1NmF4MlZ4RDNSNlB5d043QnJMSjI2ejZzM1FvTXA3NnF6endldHJEQUJLU0drZlc1UHdTMUd2WU5VYks2dVJxeGZ5VkdOeUZCMEUrT3VnTU04a0t3bUptdXB1UldPOFhrWFhYUUVDeVJWdzlVeUlydEN0Y2M0b05xWHFyN0FVUkJtS242S2h6M2VCTjk2THdJSnJBR1A5bXIvNTl1VE9TeDYzMXN1eVQrUXVqRGQ0YmVVRnBaMGtKRUVuamxQK1gvS3Iya0NLaG5FTlRnNEJzTVRPbU1xbGoyV01GTFJVbFZHMGZ6ZENCZ1V0YTlvZHJKZnBWZEZvbVRpNmFrMHRGalhUY2RxcXZXQkF6alk2aFZySDlzYnQzWjlnbitBVkRwVGNRSW1lZmJCNGVkaXJqenJzTmlldnZlNFpUNEVVWldWM1R4RXNJVys5TVQvUkpvS2ZaWllTUkdmQzFDd1BHLzlyZE1PTThxUi9MVVl2dzVmL2VtVVNvRDdZU0Z1T29xY2hkVWcyVWVQZDFlQ3RGU0tneExTWjc2NG95NGx2UkNJSDZib3dQeFpXd3hORmN0a3NMZWlsNDdwZmV2Y0JpcGtrQkljNG5nWkcra3hHWjcxYTcyS1E3VmFaNk1aT1prUUpaWE02a2IvQWMwL1hrSng4ZHZ5ZkpjV2JJM3pPTkVhRVBJVzhHYmtZanNaY3d5K2VNb0tyWWpEbXZFRWl4SHprQ1NDUlBSemhPZkpadUxkY2J4MTlFTDIzTUE4cm5qVFpaNzg3RkdNbmtxbnB1ekI1LzkwdzFndFVTUmFXY2IwZXRhODE5OFZFZVpNVVNmSWh5dWM0L255d0ZROXVxbjdqZHFYaCs1d3d2K1JLOVhvdU5QYllkb0VlbE5HbzM0S3l5U3dpZ3NyZkNlMHYvUGxXUHZRdlFnOFIwS2dITzE4bVRWVGhoUXJsYkVRMEtwL0p4UGRqSHlSN0UxUVB3L3V0MHIrSERERzdCd1pGbTlJcUVVWlJwdjJXcHpsTWtPZW1lTGNBdDVDc3J6c2tMR2FWT0F4eXlTelpWL0QyRVk3eWROWk1mOGU4VmhIY0tHSEFXTnN6ZjFFT3E4Zk5zdGlqTVk0Slh5QVR3VGRuY0ZGcWNORGZEbyttV0Z2eEpKcGM0c0VadGpYeUJkb0ZjeGJVbW5pQ29LcTVqeWRVSE5qWUp4TXFOMUt6WVY2Mk11Z2NFTFZoUzNCbmQrVExMT2g3ZHdzL3pTWFd6eEViNE5qNGFGdW41eDRrRFdMSzVUVUYveUNYQi9jWll2STlrUGdWc0cyalNodFhreGZnVCt4empKb2ZYcVBFbklYSVExbG5JZG1WekJPTTkwRVh2SlVXNmEwblovN1hqSkdsOFRvTzNIL2ZkeG54bVROS0JaeG5rcFhMVmdMWENaeXdHVDNZeVM3NXcvUEFINUkvak11UnNwZWo4eFpPYlU5a1JFYlJBK2txam1LUkZhS0dXQW1GUXNwQytRTGJLUGYwUmFLM09YdkJTV3FvNDZwNzB3cy9lWnB1NmpDdFpVZ1F5NnI0dEhNUFVkQWdXR0dVWU5idXYvMWE2SytNVkZzZDNUMTgzK1Q4Y2FwU282bTArU2g1N2ZFZUcvOTVkeWtHSkJRTWowOURTVzJiWTBtVW9uRHk5YTh0ckxubkw1QjVMVzNObDhySlpOeXNPOFpiKzgwelh4cVVHRnB1ZDNRendiN2JmKzhtcTZ4MFRBbkpVOXBEUVI5WVFtWmhsbmEyeHV4SnQwYUNPL2YxU1U4Z2JsT3JiSXlNc3hUbFZVVzY5VkpQellVMkhsUlhjcUUybExMeG5PYlp1ejJ0VDlDaXZmVEFVWWZtekpsdC9sT1Bnc1I2Vk42NC94UWQ0SmxrL1JWN1VLVnYyR3gvQVdzbVRBdUNXS2hkd0MrNEhtS0VLWVpoMlhpczRLc1VSMUJlT2JzMWMxM3dxRlJub2NkbXVoZWFUVjMwZ3ZWWFpjb3V6SEtLNXp3ck41MmpYSkV1WDZkR3gzQkNwVi8rKzRmM2h5YVcvY1FKTEZLcWFzanNNdU8zQjNXbE1xMmd5WWZkSzFlN0wycE8vdFJ5ZTJtd3p3WlBmZFVNcmw1d2RMcWRkMkt2L3dWdG5weVdZaGQ0OUw2cnNPVis4SFhQcldIMkt1cDg5bDJ0ejZiZjgwaVlTZCtWNExST1NPSGVhbXZleFI1MjRxNHI0M3JUbXRGelF2QXJwdldmTFlGWnJiRnNwQnNYTlVxcWVuanhOTnNGWGF0WnZsSWhrN3RlVVBmSytZTDMyRjhNY1RuanYwQlpOcHBiK3ZzaG9DcnRMWGpJV3EzRUpYcFZYSWxHNlpOTDBkaDZxRW0yV013RGpEM0xmT2ZrR2gxL2N6WWMvMHFoaUQyb3pObkg0ODgyTVZWdDNKYlZGa2J3b3dOQ08zS0w1SW9ZVzV3bFZlR0NWaU91djFzdlp4N0ZienhLekE0ekdxQmxSUmFSV0NvYlhhVnE0eVlDV2JaZjhlaUp3dDNPWStNRmlTSmVuZ2NGUDJ0MEpNZnpPaUo3Y0VDdnB4N25lZzFSYzV4KzdteVBKT1h0MkZvaFZSeVh0RCsvckRvVE95R1lJbkplbFpNam9sZWNWSFVoVU5xdmRaV2cySjJ0MGpQbWlMRmVSRC84Zk9UNG8rTkdJTGIrVHVmQ285Y2VCQm0zSkxWbitNTzI2NzVuN3FpRVgvNlcrMTg4Y1lnM1puNU5TVGpnT0tmV0ZTQUFOYTZyYUN4U29WVTg1MW9KTFkxMVdJb1lLMGR1MGVjNUU0dENuQVBvS2g3MXJpVHNqVklwM2dLdkJiRVlRaU5Zcm1IMjJvTFFXQTJBZHdNbklENlBYOWI1OGRSMlFLbzRxYWcxRDFaK0wvRndFS1RSN29zT1pQV0VDUEpJSFFxUFVzTTVpL0NINVl1cFZQZkZBNXBIVUJjc2VzaDhlTzVZaHlXbmFWUlBabi9CbWRYVnVtWldQeE1QNWUyOHptMnVxSGdGb1Q5Q3ltSFlOTnJ6cnJqbFhaTTA2SG56RHhZTmxJNWIvUW9zeExtbXJxREZxbW9nUWRxazBXTGtVY2VvQXZReEhna0l5dldVNjlCUEZyMjRWQjYrbHg3NVJuYTZkR3RybU94RG52Qm9qdmkxLzRkSGpWZWc4b3dvZlBlMWNPbnhVMWlvaDAxNnMvVnVkdjltaFY5ZjM1QXQrU2gyOGgxYnBwOHhocjA5K3ZmNDdFbHgzTXM2aHlwNlF2QjN0MHZuTGJPaHdvNjYwY3A3SzB2dmVwYWJLN1lKZnhFV1dmckMyWXpKZllPanlnUHdmd2QvMWFtVHFhMGhaNXVlZWJoV1lWTXViUlR3SWpqKzBPcTBvaFUzemZSZnVMOGd0NTlYc0hkd0t0eFRRUTRZMnF6Nmdpc3hubTJVZGxtcEVrZ09zWno3aUVrNlFPdDhCdVB3citOUjAxTFRxWG1KbzFDNzZvMU4yNzR0d0p2bCtJMDY5VGlMcGVuSy9taVJ4aHlZOGp2WVY2VzFXdVN3aEg5cTdrdXduSk10bTdJV2NxczdIc255SFNxV1hMU3BZdFpHYVIxVjN0MGdhdW5pbkZQWkd0V3NrRjY1cnR0aTQ4VVY5dVY5S004a2ZEWXMwcGdCMDBTK1RselRYVjZQOG14cTE1YjlFbjhzejNqV1NzemNpZlphL051dWZQTm5OVGIwMzFwcHR0MCtzUlNILzdVRzhwemJzZ3R0M09HM3V0N0I5SnpETXQybVRadXlSTklWOEQ1NFR1VHJwTmNIdGdtTWxZSmVpWTlYUzgzTllKaWNqUmp0SlNmOUJaTHNRdjYyOVFkRHNLUWhUSzVDblhocGs3dk1Oa0h6UGhtMEV4Vy9WQ0dBcEhmUHlCYWd0WlFUUW1QSHg3ZzVJWFhzclFEUHpJVmh2MkxCNkloMTM4aVNEd3cxSk5IckR2elV4dnA3M01zUUJWaFc4RWJyUmVhVlVjTEIxUjNQVVh5YVlHNEhwSlVjTFZ4TWdEeGNQa1ZSUXBMN1ZUQUdhYkR6YktjdmcxMnQ1UDhUU0dRa3JqL2dPcnBuYmlESHdsdUE3M3hiWHRzL0w3dTQ2OGNSV1NXUnRnVHdsUW5BNDdFS2cwT2laRGdGeEFLUVFVY3NiR29tSVRnZVhVQUF5S2UwM2VBN01wNGdueUtRbW0wTFhKdEVrNmRka3NNSkN1eERtbUh6bVZoTytYYU4yQTU0TUloM25pdzVDRjdQd2lYRlpybkE4d09kZUhMdnZoZG9xSURHOVBESTdVbldXSHE1MjZUOHk2aXhKUGhrdVZLWm5vVXJ1T3BVZ09PcDNpSUtCamsreWkxdkhvNWNJdEhYYjFQSUt6R2FabFJTMGc1ZDNNVjJwRDhGUWRHWUxaNzNhYWUvZUVJVWVQTWM0TkZ6OHBJVWZMQ3JyRjRqVldINWdRbmVOM1M4dkFOQm1VWHJFY0tHbjZoSVVOOTV5MXZwc3ZMd2JHcHpWOUwwWktUYW42VERYTTA1MjM2dUxKY0lFTUtWQXhLTlQwSzhXbGp1d05ueTNCTlFSZnpvdkE4NWJlSTl6cjFBR05ZbllDVmtSMWFHbmdXVVJVcmdxUitnUnJRaHhXODFsM0NIZXZqdkdFUHpQTVR4ZHNJZkI5ZGZHUmJaVTBjZy8xbWN1YnRFQ1g0dHZhZWRtTkF2VHhDSnRjMlFhb1VhbEdmRU5DR0s3SVMvTzhDUnBkT1ZjYThFV0NSd3Yyc1NXRThDSlBXNVBDdWdqQ1hQZDNoNlU2MGNQRCtiZGh0WFp1WUI2c3Rjb3ZlRTdTbTVNTTJ5dmZVSFhGU1c3S3pMbWk3L0VlRVdMMHdxY09IOU1PU0tqaENISG13K0pHTGNZRS83U0JaUUNSZ2dveDBaWlRBeHJsek5OWFlYTDVmTklqa2RUNFlNcVZVejZwOFlEdDA0OXY0T1hHZGczcVRydExCVVhPWmY3YWhQbFpBWS9PKzdTcDBidkdTSGR5UThCMUxPc3BscU1iOVNlOFZBRTdnSWRTWnZ4YlJTcmZsK0xrNVFhcWk1UUpjZXFqaXRkRXJjSFhnLzNNcnlsalBTSUFNYWFsb0ZtMWNWd0JKOERObWtEcW9HUk9TSEZldHJnalE1Q2FodUtrZEg1cFJQaWdNcmdUdGxGSTh1ZkpQSlNVbEdnVGpiQlN2cFJjMHp5cGlVbjZVNUtacWNSb3lydHpobUo3L2NhZVprbVZSd0pRZUxPRzhMWTZ2UDVDaHBLaGM4SnMwRWwrbjZGWHFieDlJdGR0THRZUDkya0tmYVRMdENpOFN0TFpkRU5KYTlFeDFuT296MWtRN3F4b2laRktSeUxmNE80Q0hSVDBULzBXOUY4ZXBOS1ZvZXl4VVhoeTNzUU1Nc0pqUUpFeU1Pam1PaE1GZ09tbWxzY1Y0ZUZpMUNsZFU5Mnlqd2xlaXJFS1BXM2JQQXVFaFJaVjdKc0tWM0xyNWNFVEFpRnVYNU53NVVsRjdkMkhaOTZCaDBzZ0ZJTDVLR2FLU29WWVZsdmRLcFpKVlA1K05aN3hERWtRaG1EZ3NES2NpYXpKQ1hKNlpOMkIzRlkyZjZWWnlHbC90NGF1bkdJQWsvQkhhUytpK1NwZFJmbkIvT2t0T3Z5amluV05mTTlLc3I2V3d0Q2ExaENtZVJJNmljcEZNNG84cXVDTHNpa1UwdE1vWkkvOUVxWFJNcEtHYVd6b2ZsNG5RdVZRbTE3ZDVmVTVxWENRZUNEcVZhTDlYSjlxSjA4bjNHM0VGWlMyOFNIRWIzY2RSQmR0TzBZY1R6aWwzUWtuTktFZS9zbVExZlRiMFhicHlOQjV4QWV1SWxmKzVLV2xFWTBEcUpic256SmxReEpQT1Z5SGlLTXg1WHU5RmNFdjFGYmc2RmhtNHQrSnl5NUpDMVczWU84ZFlMc08wUFhQYnhvZEJndHRUYkgzcnQ5Q3AxbEpJazJyM08xWnF1OTRlUmJuSXoyZjUwbFdvbFl6dUtzajRQTW9rNGFiSExPOE5BQzg4NGhpWHg1Rnk1cFdLTzBiV0w3dUVHWGFKQ3R6bmhQNjdTbFE0eGpXSWZncTZFcFoyOFFNdHVaSzdKQzBSR2JsOW5BNFh0Rkx1Zy9OTE1vSDFwR3Q5SW9uQUpxY0VETHlINlREUk9jYnNtR1BhR0l4TW80MUlVQW5RVlBNUEdCeXA0bU9taDlaUU1rQkFja3NVSzU1THNaajdFNXo1WHVab3lXQ0t1Nm5IbURxMjJ4SS85WjhZZHhKeTRrV3BEMTZqTFZycHdHTFdmeU9EMFdkK2NCekZCeFZhR3Y3UzVrOXF3aC81dC9MUUVYc1JxSTNROVJtM1FJb2FaVzlHbHNEYUtPVXl5a3lXdWhOT3ByU0VpMHMxRzRyZ29pWDFWNzQzRUVMdGkrcEp1NW9nNlgwZzZvVHluVXFsaEg5azZlenlSaTA1TkdaSHowbnZwM0hPSnI3ZWJyQVVGckRqYmtGQk9iRXZkUVdra1ViTDBwRXZNVTQ2WDU4dkY5ajlGM2o2a3B5ZXROVUJJdHJFdWJXOVp2TVBNNHFOcUxsc1NCSnFPSDNYYk53di9jWERYTnhOOGlGTHpVaHRlaXNZWStSbEhZT3VQMjkvQ2IrTCt4diszNVJ2N3h1ZG5aNm9oSzRjTVBmQ0c4S0k3ZE5tak5rL0g0ZTg0cE94bi9zWkhLOXBzZnZqOG5jQThxSno3Tzh4cWJ4RVNEaXZHSk9aekY3bzVQSkxRN2czNHFBV295dUEreDNidFU5OExUNlp5R3ljZUlYanJxb2IyQ0FWcWw0Vk9UUVBVUVl2SFYvZzR6QXVDWkd2WVFCdGYwd21kNWxpbHJ2dUVuMUJYTG55MDFCNGg0U01EbFlzbk5wbTlkN205aDU3OHVmcGVmOVo0V3BscVdRdnFvNTJmeVVBN0oyNGVaRDVhdjZTeUdJVjlrcG1ITnF5dmRmemNwRU13OTdCdmtuVjJmcStNRkh1bjlCVDNMc2Y4cGJ6dmlzV2lJUXZZa25nKzhWeGsxVitkbGkxdTU2a1k1MExSamFQZG90dlQ1QndxdHd5RitlbW8vejlKM3lWVVZHZktyeFF0Sk1PQVFXb1FpaS80ZHA5d2d5YlNhNW1rdWNtUkx0RVFaL3B6MHRML05WY2dXQWQ5NW5FUTNUZzZ0TmJ1eW4zSWVwejY1TDNodU1VVUJudGxsV3V1NERidE9GU01TYnBJTFY0Znk2d2xNMFNPdmk2Q3BMaDgxYzFMcmVJdktkNjF1RVdCY0R3MWxVQlVXMUkwWittL1BhUmxYK1BRL294ZzBZZTZLVWlJaVRGNEFETms1OVlkcHQ1L3JreG1xOXRWNUtjcC9lUUxVVlZtQnpRTlZ1eXRRQ1A2RXpkMEc4ZUx4V3lIcG1aV0ozYkF6a1dUdGc0bFpsdzQyU1FlekVtaVVQYUpVdVIvcWtsVkEvODdTNEFyRkNwQUxkWTNRUmRVdzNHM1hiV1VwNmFxOXowelVpemNQYTczNTFwOUpYT1p5ZmRaQkZucXQ5MFZ6UW5kWEIvbXdmOExDOVNUajVrZW5WcE51cU9RUVAzbUlSSmo3ZVYyMUZ4RzhWQXhLckVuM2MrWGZtWjgwMEVQYjkvNWxJbGlqc2NVYkI2ZGEwUlFhTW9vazB6dWcxRzB0S2kvSkJDNHJ3Ny9EM200QVJ6QWt6TWNWckRjVDJTeUZ0VWRXQXNGbHNQREZxVjNOK0VqeVhhb0VlUHdyb2FaQ2lMcUV6YjhNVytQTkU5VG1UQzAxRXpXbGk1MVB6WnZVcWtteXVST1UrVjZpaytMZS85cVQ2bnd6VXpmOXRQNjh0WWVpMFlhREd4NmtBZDdqbjFjS3FPQ3VZYmlFTEg5ellxY2M0TW5SSmprZUdpcWFHd0xJbWh5ZUtzK3hLSk1CbE9KMDVvdzlnR0NLWjFWcG5NS29TQ1RiTVMrWCsyM3kwNDJ6T2I1TXRjWS82b0JlQW8xVnk4OU9UeWhwYXZGUDc4alhDY0ZIMHQ3R3gyNGhNRU9tMmdzRWZHYWJWcFFndkZxYlFLTXNrbkZSUm11UEhjWnUwU3UvV01GcGhadkIyci9FR2JHNzJycEdHaG8zaCtNc3owdUd6SjdoTksydXFRaUUxcW1uMHpnYWNLWVlaQkNxc3hWK3NqYnBvVmRTaWxXL2I5NG4yeE5iNjQ4Vm1OSW9penFFV2hCbnNlbitkMGtiQ1BtUkl0ZldxU0JlT2Q5V25lM2M2YmNkNnV2WE9KNldkaVNzdVhxMG5kaHFyUTRRb1dVakNqWXRaMEVBaG5TT1AxbTQ0eGtmME83alhnaHJ6U0pXeFA0YS90NzJqVTI5VnUycnZ1NG43SGZIa2ttUU9NR1NTK05QZUxHTzVJNzNtQzJCNytsTWlCUVFaUk05LzlsaUxJZm93dXBVRkFiUEJiUitseERNNk04UHRnaDFwYUpxNVJ2czd5RXVMUXYvN2Qxb1Uyd29GU2IzRk1QV1FPS011Q3VKN3BERGpwSWNsdXM1VGVFb01CeTJZZFZCNGZ4bWVzYUNlTU5zRWdUSEtTNVdEU0d5TlVPb0VwY0MyT0ZXdElSZjB3MjdjazM0L0RqeFJUVkljYzkra3FaRTZpTVNpVkRzaUtkUC9YejVYZkVobS9zQmhPNTBwMXJ2SkRsa3l5eHVKOVNQZ3M3WWVVSkJqWGRlQWtFK1A5T1FKbTZTWm5uMXN2Y2R1STc4ZFltYmtFMm10emlQcmNqVmlzWEc3OHNwTHZiWmFTRngvUmtzOXpQNExLbjBDZHovM0pzZXRrVDA2QThmL3lDZ01PNk1iMUhtZTBKSjdiMndaejFxbGVxVHVLQkdva2hQVlVaMGRWdSt0blFZTkVZMWZta1pTejYrRUdaNUV6TDc2NTdtcmVaR1IzalVmYUVrNDU4UERuaUJ6c1NtQktoRFJ6ZlhhbWVyeUp2OS9ENW02SElxWjBSK291Q0U1NER6cDRJSnV1RDFlNERjNWkrUHBTT1JKZkcyM3VWZ3FpeEFNRHZjaE1SMG5aZEg1YnJjbFl3Um9KUld2L3JseEdSSTVmZkQ1TlBHbUlEdDd2REUxNDM0cFlkVlpJRmg4OUJzOTRIR0dKYlR3ck44VDZsaDFIWkZUT0I0bFd6V2o2RVZxeFNNdkMwL2xqV0JRM0Yya2MvbU8yYjZ0V29uVDJKRXFFd0Z0czhyejJoK29XTmRzOWNlUjJjYjd6WnZKVERwcEhhRWhLNWF2V3Fzc2VXYTJEdDVCQmhhYmRXU2t0Uzgwb01Rckw0VHZBTTliNUhNbXlEbk8rT2trYk1YZlVKRzdlWHFUSUc2bHFTT0VicVZSK3FZZFA3dVdiNTdXRUpxenloNDExR0FWc0RpblBzN0t2VWVYSXRsY01kT1VXelhCSDZ6c2N5bVYxTExWQ3RjOEllUG9qelhIRjltNWI1ekd3QlJkemN5VUpraXU5MzhBcG1BYXlSZEpyWDFQbVZndVdVdnQyVGhRNjJjekl0VHlXSk1XMkFuL2hkRGZNSzdTaUZRbEdJZEFibHRIejN5Y29oN2o5VjdHeE5XQnBidGNTZHFtNFh4UndUYXdjM2NiWit4ZlN2OXFRZkVrREtmWlR3Q2txV0dJL3VyMjUwSXRYbE1saDZ2VU5XRVlJZzlBM0d6YmdtYnF2VE44anMyWU1vODdDVTV5Nm5aNGRiSkxEUUpqOWZjN3lNN3RaekpEWkZ0cU9jVTgrbVpqWWxxNFZtaWZJMjNpSGIxWm9UOUUra1QyZG9sblAxQWZpT2t0N1BRQ1N5a0JpWHk1bXY2MzdJZWdXU0tqOUlLcllaZjRMdTkrSTd1Yitta1JkbHZZemVoaC9qYUo5bjdIVUg1YjJJYmdlTmRrWTd3eDF5Vnp4UzdwYnZreTYrbm1WVXRSbGxFRmZ3ZVVRMC9uRzAxN1dvVVlTeHMrajJCNEZWL0Y2MkV0SGxNV1pYWXJqR0hwdGhuTmIxeDY2TEtaMFFlOTJJTldIZGZSL3ZxcDAyd01TOHIxRzRkSnFIb2s4S21RNzk0N0cxM2E0WVhic0dnSGNCdlJ1VnUxZUFpNC9BNStaaXhtZFNYTTczTHVwQi9MSDdPOXl4TFRWWEpUeUJiSTFTNDlUSVJPcmZWQ09iL2N6WjlwTTRKc1p4OGtVejhkUUd2N2dVV0t4WHZUSDdRTS8zSjJPdVhYZ2NpVWhxWStjZ3RhT2xpUVFWT1l0aEJMVjN4cEVTWlQzcm1mRVlOWnhtcEJiYjI0Q1Jhbzg2cHJuK2k5VE5PaDhWeFJKR1hKZlhIQVRKSHMxVDV0eGdjL29wWXJZOFhqbEdRUWJSY294SUJjblZzTWptVTF5bW1JVUw0ZHZpSlhuZE1BSjBZZXQrYzdPNTIvcDk4eXRsbUFzR0JhVEFtTWhpbUFudnAxVFdOR005QnB1aXRHait0ODEwQ1UyVWhvcnJqUEtHdFRoVkM4V2FYdzA0V0ZuVDVmVGpxbVB5clEwdE4zQ2tMc2N0VnkyeHIwWldnaVdWWjFPcmxGamp4SllzT2ladjJjQW9PdkUrN3NZMEkvVHdXY1pxTW95SUtOT2Z0d1A3dysrUmZnNjdsamZvdktZYTUwaWYzZnpFLzhhUFlWZXkvTnEzNStuSDJzTFBoL2ZQNVRzeWxTS0dPWjRrNjlkMlBuSDQzK2txKytzUlhIUXFHQXJXZHdoeCtocHdRQzZKZ1QydXhlaFlVNFpidzdvTmI2L0hMaWtQeUpST0dLMm91eXIrdnpzZUVTcDlHNTBUNEF5RnJTcU9RMHJyb0NZUDRzTURGQnJIbjM0MkV5WlRNbFN5azQ3ckhTcTg5WTkvbkkzekc1bFgxNlo1bHhwaGd1TE9jWlVuZEw4d05jcmt5akg4MmpxZzhCbzhPWWt5bnJ4WnZiRm5vNWxVUzNPUHI4S28zbVg5Tm9SUGRZT0tLakQwN2J2Z0ZncFovUkYrWXprV3ZKL0hzL3RVYmZlR3pHV0x4TkFqZkR6SEhNVlNEd0I1U2FiUUxzSVpIaUJwNDNGakdrYWllbllvRGQxOGh1MkJHd09LN1UzbzcwSy9XWS9rdXVLZG1kcnlrSUJVZEcybXZFOTFMMUp0VGJoMjBtT0xiazF2Q0FhbXU3dXRsWGVHVTJvb1Zpa2JVL2FjdGNnbXNDMUZLazJxbWozR1dlSVdiajR0R0l4RTdCTGNCV1V2dmNuZC9sWXhzTVY0RjkxN2ZXZUZCL1hiSU5OM3FHdkl5VHBDYWx6MWxWZXdkSUdxZUFTL2dCOE1pK3NBK0JxRGlYM1ZHRDJlVXVuVFJiU1krQXVEeTRFM1F4M2hBaHduU1hYK0IwenVqM2VRMW1pUzhWdXgyei9sNi9Ca1d0aktHVTcyYUprT0NXaEdjU2YzK2tGa2tCMTV2R09zUXJTZEZyNnFUajBnQllpT2xuQk80MTE3MGdPV0hTVW9CVlJVMkpqd3BwWWRoSUZEZnU3dElSSGNjU05NNUtaT0ZEUHowVEdNQWp6ekVwZUx3VFdwK2tuMjAxa1U2TmpiaU1RSng4MytMWDFlMXRaMTBrdUNoSlovWEJVUTFkd2FCSGpUREpEcU95bXBFazhYMk0zVnRWdzIxSmtzQ2hBOHcxdFRlZk8zUkoxRk1icVowMWJISGt1ZERCL09oTGZlN1A1R09IYUkyOFpYS1RNdXFvMGhMV1E0SGFiQnNHRzdOYlAxUmlYdEVUejA3NGVyNncvT2VySldFcWpta3EyeTUxcTFCVkkrSlV1ZG5WYTNvZ0JwemRoRkU3ZkM3a3lickF0Mlo2UnFEakFUQVVFWWVZSzQ1V011cEJLUVJ0UWxVK3VOc2puemo2Wm1HcmV6QStBU3JXeFE2TE1rSFJYcVh3TnE3ZnR2MjhkVXgvWlNKY2lEWFAyU1dKc1dhTjBGalBYOVlrbzZMb2JaN2FZVy9JZFVrdEk5YXBUTHlIUzhEeVdQeXVvWnl4TjFUSy92dGZ4azNId1doNkpjelpDOEZ0bjBiSUpheTJnK241d2Q3bG05ckVzS08rc3ZxVm1pK2Mxajg4aFNDeGJ6cmc0K0hFUDBOdDEvQjZZVzFYVm0wOVQxQ3BBS2pjOW4xOGhqcXNhRkdkZnl2YTFaRzBYdTNpcDZONkpHcHlUU3FZNWg0Qk9scExQYU9ueXc0NVBkWFROK0R0QUtnN0RMckxGVG5XdXNvU0JIazNzMGQ3WW91SkhxODUvUjA5VGZjMzdFTlhaRjQ4ZUFZTG5xOUdMaW9OY3dEWnJDNkZXNmdvZEI4Sm5xWVVQdm4wcFdMZlF6MGxNMFl5OE15YmduODREczNROWJEUDEwYkx5T1YrcXp4YTRSZDlEaHU3Y2p1OG1NYU9OWEszVXFtQlE5cUlnN2V0SXdFcU0va0VDay9EemphNEJzMXhSK1EvdENiYzhJS3JTR3NUZEpKMHZnZTdJRzIwVzY4N3VWbUs2aWNXUTZjRDNsd0Z6Z05NR3RGdk81cXlKZUtmbEdMQUFjUVpPcmt4Vnd5M2NXdnFsR3B2am1mOVFlNkFwMjBNUGJWOTJEUFYwT2hGTTRrejhZcjBmZkMyekxXU1Exa3FZNlFkUXJ0dFIza2gxWUx0UWQxa0NFdjVoVm9QSVJXbDVFUmNVVHR0QklyV3A2WHM1RWhoNU9VVXdJNWFFQnZ1aURtVW9FTm1uVncxRm9oQ3JiUnAxQTFFK1hTbFdWT1RpN0FEVys1T2hiOXoxdks0cXg1UjVsUGRHQ1BCSlowMG1DK1NzcDhWVWJncEdBdlhXTXVXUVFSYkNxSTZScjJqdHhaeHRmUDdXLzhvbnoreXowR3M3NkxhVDVIWDllY3lpWkNCL1pSL2dGdE14UHNEd29ob2VDUnRpdUx4RTFHTTF2VUVVZ0J2ODYrZWVoTDU4L1A1NlFGR1EvTXFPZS92Qzc2TDYzanptZWF4NGV4ZC9PS1RVdmtYZytmT0pVSHljaDl4dC85Z29KTXJhcFNndlhyajgrOHZrL044MGYyMlNld2o2Y3lHcXQxQjZtenRvZWtsVkhIcmFvdWh2SEphRy9PdUJ6NkRIS01wRm1RVUxVMWJSV2x5WUUwUlBYWVlrVXljSWVtTjdUTHRnTkNKWDZCcWR5eERLa2VnTzduSks1eFE3T1ZZRFpUTWY5YlZIaWR0azZEUVg5RXQrVjlNN2VzZ2JzWUJkRWVVcHNCMFh2dzJrZDkrckk3VittNDd1K08vdHE3bXc3MjYySFUxV2xTOXVGenNWNkp4SUhObVVDeTBRUzllMDc3SkdSRmJHNjV6My9kT0tCL1prK3lEZEtwVW1kWGpuL2FTM041bnY0Zks3Yk1ISG1QbEhkNEUyK2lUYlY1cnB6U2NSbnhrNktBUnVEVEo4UTFMcEsybVA4Z2oxRWJ1SjlSSXlZK0VXSzRoQ2lJREJBUzFUbTJJRVhBRmZnS1BnZEw5TzZtQWEwNndqQ2NVQUw2RXN4UFFXTzlWTmVnQlBtLzBHZ2taYkR4Q3lueHVqWC85MnZtR2NqWlJNQVk0NXB1YWsyc0ZMQ0xTd1hwRXN5eTVmbkYwakdKQmhtK2ZOU0hLS1VVZnkrMjc2QTcvZmVMT0Z4eFV1SFJOSkkyT3Nlbnh5dmY4REFHT2JUNjBwZlRUbGhFZzl1L0tLa2hKcW01VTEvK0JFY1NrcEZEQTVYZUNxeHdYbVBhYzFqY3VaM0pXUStwME5kV3piLzV2MVp2RjhHdE1URkZFZFFqcExPMGJ3UGIwQkhOV25pcDNsaURYSTJmWGYwNWpqdmZKME5wakxDVWdmVGg5Q01GWVZGS0VkNFovT0cvMkMrTjQzNW1uSys5dDFndkNpVmNhYUg3cks0K1BqQ3ZwVk5peit0MlF5cUgxTzh4M0pLWlZsNlErTHAvWEs4d01qVk1zbE9xOUZkU3c1RnRVcy9DcHRYSDlQVyt3YldIZ3JWMTdSNWpUVk90R3RLRnUzbmI4MFQrRTB0djlRa3pXM0oyZGJhdy84ZGRBS1owcHhJYUVxTGpsUHJqaTNWZ0ozR3ZkRnZscUQ4MDc1d294aDRmVnQwSlpFMEtWRnNBdnFoZTBkcU45YjM1anRTcG5ZTVhrVSt2WnErSUFIYWQzSUhjMnMvTFlybkQxYW5mRzQ2SUZpTUlyOW9OYlpEV3Z3dGhxWU5xT2lnYUtkL1hsTFU0WEhmay9QWElqUHNMeS85L2tBdFErL3dLSCtoSS9JUk9XajVGUHZUWkFUOWY3ajRaWFF5RzRNMFR1ak1BRlhZa0t2RUh2MXhoeVNla2dYR0dxTnhXZVdLbGY4ZERBbEx1QjFjYi9xT0Qrcms3Y213dCsxeUtwazljdWRxQmFuVGk2elRiWFJ0VjhxeWxOdGp5T1ZLeTFIVHowR1c5cmp0NnNTakFaY1Q1UitLZHR5WWIwenlxRzlwU0x1Q3c1V0J3QW43ZmpCaktMTG94TFhNSSs1Mkw5Y0x3SVIyQjZPbGxKWkxISjh2RHhtV2R0RitRSm5tdDFyc0hQSVdZMjBsZnRrOGZZZVBrQUlnNkhnbjUzMlFvSXBlZ014aVdnQU9mZTUvVTQ0QVBSOEFjME5lWnJWaDNnRWhzMTJXK3RWU2lXaVVRZWtmL1lCRUNVeTVmZFliQTA4ZGQ3VnpQQVA5YWlWY0lCOWs2dFk3V2RKMXdOVitiSGV5ZE50bUM2RzVJQ3RGQzFad21KVS9qOGhmMEk4VFJWS1NpejVvWUlhOTNFcFVJNzhYOEdZSUFaYWJ4NDcvbjhMREFBSjBuTnRQMXJwUk9wcnFLTUJSZWNTaGNhNnFYdVRTSTNqWkJMT0IzVnAzODFCNXJDR2hqU3ZoL05TVmtZcDJxSWRQL0JnPSI7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZGVjL2RpY3Rpb25hcnktYnJvd3Nlci5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsgdmFyIG4gPSBlKCJiYXNlNjQtanMiKTsKICAgICAgICAgICAgICAgICAgICAgICAgci5pbml0ID0gZnVuY3Rpb24oKSB7IHZhciB0ID0gZSgiLi9kZWNvZGUiKS5Ccm90bGlEZWNvbXByZXNzQnVmZmVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuLnRvQnl0ZUFycmF5KGUoIi4vZGljdGlvbmFyeS5iaW4uanMiKSk7IHJldHVybiB0KHIpIH0gfSwKICAgICAgICAgICAgICAgICAgICAiZGVjL2h1ZmZtYW4uanMiOiBmdW5jdGlvbihlLCB0LCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG4oZSwgdCkgeyB0aGlzLmJpdHMgPSBlLCB0aGlzLnZhbHVlID0gdCB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvKGUsIHQpIHsgZm9yICh2YXIgciA9IDEgPDwgdCAtIDE7IGUgJiByOykgciA+Pj0gMTsgcmV0dXJuIChlICYgciAtIDEpICsgciB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhKGUsIHQsIHIsIG8sIGEpIHsgZG8gbyAtPSByLCBlW3QgKyBvXSA9IG5ldyBuKGEuYml0cywgYS52YWx1ZSk7IHdoaWxlIChvID4gMCkgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaShlLCB0LCByKSB7IGZvciAodmFyIG4gPSAxIDw8IHQgLSByOyB0IDwgcyAmJiAobiAtPSBlW3RdLCAhKG4gPD0gMCkpOykgKyt0LCBuIDw8PSAxOyByZXR1cm4gdCAtIHIgfSByLkh1ZmZtYW5Db2RlID0gbjsgY29uc3QgcyA9IDE1OwogICAgICAgICAgICAgICAgICAgICAgICByLkJyb3RsaUJ1aWxkSHVmZm1hblRhYmxlID0gZnVuY3Rpb24oZSwgdCwgciwgZCwgbCkgeyB2YXIgdSwgZiwgYywgaCwgcCwgdywgbSwgYiwgeSwgZywgdiwgQSA9IHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVSA9IG5ldyBJbnQzMkFycmF5KDE2KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gbmV3IEludDMyQXJyYXkoMTYpOyBmb3IgKHYgPSBuZXcgSW50MzJBcnJheShsKSwgYyA9IDA7IGMgPCBsOyBjKyspIFVbZFtjXV0rKzsgZm9yICh4WzFdID0gMCwgZiA9IDE7IGYgPCBzOyBmKyspIHhbZiArIDFdID0geFtmXSArIFVbZl07IGZvciAoYyA9IDA7IGMgPCBsOyBjKyspIDAgIT09IGRbY10gJiYgKHZbeFtkW2NdXSsrXSA9IGMpOyBpZiAoYiA9IHIsIHkgPSAxIDw8IGIsIGcgPSB5LCAxID09PSB4W3NdKSB7IGZvciAoaCA9IDA7IGggPCBnOyArK2gpIGVbdCArIGhdID0gbmV3IG4oMCwgNjU1MzUgJiB2WzBdKTsgcmV0dXJuIGcgfSBmb3IgKGggPSAwLCBjID0gMCwgZiA9IDEsIHAgPSAyOyBmIDw9IHI7ICsrZiwgcCA8PD0gMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgVVtmXSA+IDA7IC0tVVtmXSkgdSA9IG5ldyBuKDI1NSAmIGYsIDY1NTM1ICYgdltjKytdKSwgYShlLCB0ICsgaCwgcCwgeSwgdSksIGggPSBvKGgsIGYpOyBmb3IgKG0gPSBnIC0gMSwgdyA9IC0xLCBmID0gciArIDEsIHAgPSAyOyBmIDw9IHM7ICsrZiwgcCA8PD0gMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgVVtmXSA+IDA7IC0tVVtmXSkoaCAmIG0pICE9PSB3ICYmICh0ICs9IHksIGIgPSBpKFUsIGYsIHIpLCB5ID0gMSA8PCBiLCBnICs9IHksIHcgPSBoICYgbSwgZVtBICsgd10gPSBuZXcgbihiICsgciAmIDI1NSwgdCAtIEEgLSB3ICYgNjU1MzUpKSwgdSA9IG5ldyBuKGYgLSByICYgMjU1LCA2NTUzNSAmIHZbYysrXSksIGEoZSwgdCArIChoID4+IHIpLCBwLCB5LCB1KSwgaCA9IG8oaCwgZik7IHJldHVybiBnIH0gfSwKICAgICAgICAgICAgICAgICAgICAiZGVjL3ByZWZpeC5qcyI6IGZ1bmN0aW9uKGUsIHQsIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbihlLCB0KSB7IHRoaXMub2Zmc2V0ID0gZSwgdGhpcy5uYml0cyA9IHQgfSByLmtCbG9ja0xlbmd0aFByZWZpeENvZGUgPSBbbmV3IG4oMSwgMiksIG5ldyBuKDUsIDIpLCBuZXcgbig5LCAyKSwgbmV3IG4oMTMsIDIpLCBuZXcgbigxNywgMyksIG5ldyBuKDI1LCAzKSwgbmV3IG4oMzMsIDMpLCBuZXcgbig0MSwgMyksIG5ldyBuKDQ5LCA0KSwgbmV3IG4oNjUsIDQpLCBuZXcgbig4MSwgNCksIG5ldyBuKDk3LCA0KSwgbmV3IG4oMTEzLCA1KSwgbmV3IG4oMTQ1LCA1KSwgbmV3IG4oMTc3LCA1KSwgbmV3IG4oMjA5LCA1KSwgbmV3IG4oMjQxLCA2KSwgbmV3IG4oMzA1LCA2KSwgbmV3IG4oMzY5LCA3KSwgbmV3IG4oNDk3LCA4KSwgbmV3IG4oNzUzLCA5KSwgbmV3IG4oMTI2NSwgMTApLCBuZXcgbigyMjg5LCAxMSksIG5ldyBuKDQzMzcsIDEyKSwgbmV3IG4oODQzMywgMTMpLCBuZXcgbigxNjYyNSwgMjQpXSwgci5rSW5zZXJ0TGVuZ3RoUHJlZml4Q29kZSA9IFtuZXcgbigwLCAwKSwgbmV3IG4oMSwgMCksIG5ldyBuKDIsIDApLCBuZXcgbigzLCAwKSwgbmV3IG4oNCwgMCksIG5ldyBuKDUsIDApLCBuZXcgbig2LCAxKSwgbmV3IG4oOCwgMSksIG5ldyBuKDEwLCAyKSwgbmV3IG4oMTQsIDIpLCBuZXcgbigxOCwgMyksIG5ldyBuKDI2LCAzKSwgbmV3IG4oMzQsIDQpLCBuZXcgbig1MCwgNCksIG5ldyBuKDY2LCA1KSwgbmV3IG4oOTgsIDUpLCBuZXcgbigxMzAsIDYpLCBuZXcgbigxOTQsIDcpLCBuZXcgbigzMjIsIDgpLCBuZXcgbig1NzgsIDkpLCBuZXcgbigxMDkwLCAxMCksIG5ldyBuKDIxMTQsIDEyKSwgbmV3IG4oNjIxMCwgMTQpLCBuZXcgbigyMjU5NCwgMjQpXSwgci5rQ29weUxlbmd0aFByZWZpeENvZGUgPSBbbmV3IG4oMiwgMCksIG5ldyBuKDMsIDApLCBuZXcgbig0LCAwKSwgbmV3IG4oNSwgMCksIG5ldyBuKDYsIDApLCBuZXcgbig3LCAwKSwgbmV3IG4oOCwgMCksIG5ldyBuKDksIDApLCBuZXcgbigxMCwgMSksIG5ldyBuKDEyLCAxKSwgbmV3IG4oMTQsIDIpLCBuZXcgbigxOCwgMiksIG5ldyBuKDIyLCAzKSwgbmV3IG4oMzAsIDMpLCBuZXcgbigzOCwgNCksIG5ldyBuKDU0LCA0KSwgbmV3IG4oNzAsIDUpLCBuZXcgbigxMDIsIDUpLCBuZXcgbigxMzQsIDYpLCBuZXcgbigxOTgsIDcpLCBuZXcgbigzMjYsIDgpLCBuZXcgbig1ODIsIDkpLCBuZXcgbigxMDk0LCAxMCksIG5ldyBuKDIxMTgsIDI0KV0sIHIua0luc2VydFJhbmdlTHV0ID0gWzAsIDAsIDgsIDgsIDAsIDE2LCA4LCAxNiwgMTZdLCByLmtDb3B5UmFuZ2VMdXQgPSBbMCwgOCwgMCwgOCwgMTYsIDAsIDE2LCA4LCAxNl0gfSwKICAgICAgICAgICAgICAgICAgICAiZGVjL3N0cmVhbXMuanMiOiBmdW5jdGlvbihlLCB0LCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG4oZSkgeyB0aGlzLmJ1ZmZlciA9IGUsIHRoaXMucG9zID0gMCB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvKGUpIHsgdGhpcy5idWZmZXIgPSBlLCB0aGlzLnBvcyA9IDAgfSBuLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24oZSwgdCwgcikgeyB0aGlzLnBvcyArIHIgPiB0aGlzLmJ1ZmZlci5sZW5ndGggJiYgKHIgPSB0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLnBvcyk7IGZvciAodmFyIG4gPSAwOyBuIDwgcjsgbisrKSBlW3QgKyBuXSA9IHRoaXMuYnVmZmVyW3RoaXMucG9zICsgbl07IHJldHVybiB0aGlzLnBvcyArPSByLCByIH0sIHIuQnJvdGxpSW5wdXQgPSBuLCBvLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGUsIHQpIHsgaWYgKHRoaXMucG9zICsgdCA+IHRoaXMuYnVmZmVyLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCJPdXRwdXQgYnVmZmVyIGlzIG5vdCBsYXJnZSBlbm91Z2giKTsgcmV0dXJuIHRoaXMuYnVmZmVyLnNldChlLnN1YmFycmF5KDAsIHQpLCB0aGlzLnBvcyksIHRoaXMucG9zICs9IHQsIHQgfSwgci5Ccm90bGlPdXRwdXQgPSBvIH0sCiAgICAgICAgICAgICAgICAgICAgImRlYy90cmFuc2Zvcm0uanMiOiBmdW5jdGlvbihlLCB0LCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG4oZSwgdCwgcikgeyB0aGlzLnByZWZpeCA9IG5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSwgdGhpcy50cmFuc2Zvcm0gPSB0LCB0aGlzLnN1ZmZpeCA9IG5ldyBVaW50OEFycmF5KHIubGVuZ3RoKTsgZm9yICh2YXIgbiA9IDA7IG4gPCBlLmxlbmd0aDsgbisrKSB0aGlzLnByZWZpeFtuXSA9IGUuY2hhckNvZGVBdChuKTsgZm9yICh2YXIgbiA9IDA7IG4gPCByLmxlbmd0aDsgbisrKSB0aGlzLnN1ZmZpeFtuXSA9IHIuY2hhckNvZGVBdChuKSB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvKGUsIHQpIHsgcmV0dXJuIGVbdF0gPCAxOTIgPyAoZVt0XSA+PSA5NyAmJiBlW3RdIDw9IDEyMiAmJiAoZVt0XSBePSAzMiksIDEpIDogZVt0XSA8IDIyNCA/IChlW3QgKyAxXSBePSAzMiwgMikgOiAoZVt0ICsgMl0gXj0gNSwgMykgfSB2YXIgYSA9IGUoIi4vZGljdGlvbmFyeSIpOyBjb25zdCBpID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IDIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gMywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSA0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IDUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gNiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSA3LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IDgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ID0gOSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSAxMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSAxMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSAxMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSAxMywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSAxNCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEgPSAxNSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFUgPSAxNiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSAxNywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUgPSAxOCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSAyMDsgdmFyIEIgPSBbbmV3IG4oIiIsIGksICIiKSwgbmV3IG4oIiIsIGksICIgIiksIG5ldyBuKCIgIiwgaSwgIiAiKSwgbmV3IG4oIiIsIHksICIiKSwgbmV3IG4oIiIsIG0sICIgIiksIG5ldyBuKCIiLCBpLCAiIHRoZSAiKSwgbmV3IG4oIiAiLCBpLCAiIiksIG5ldyBuKCJzICIsIGksICIgIiksIG5ldyBuKCIiLCBpLCAiIG9mICIpLCBuZXcgbigiIiwgbSwgIiIpLCBuZXcgbigiIiwgaSwgIiBhbmQgIiksIG5ldyBuKCIiLCBnLCAiIiksIG5ldyBuKCIiLCBzLCAiIiksIG5ldyBuKCIsICIsIGksICIgIiksIG5ldyBuKCIiLCBpLCAiLCAiKSwgbmV3IG4oIiAiLCBtLCAiICIpLCBuZXcgbigiIiwgaSwgIiBpbiAiKSwgbmV3IG4oIiIsIGksICIgdG8gIiksIG5ldyBuKCJlICIsIGksICIgIiksIG5ldyBuKCIiLCBpLCAnIicpLCBuZXcgbigiIiwgaSwgIi4iKSwgbmV3IG4oIiIsIGksICciPicpLCBuZXcgbigiIiwgaSwgIlxuIiksIG5ldyBuKCIiLCBsLCAiIiksIG5ldyBuKCIiLCBpLCAiXSIpLCBuZXcgbigiIiwgaSwgIiBmb3IgIiksIG5ldyBuKCIiLCB2LCAiIiksIG5ldyBuKCIiLCBkLCAiIiksIG5ldyBuKCIiLCBpLCAiIGEgIiksIG5ldyBuKCIiLCBpLCAiIHRoYXQgIiksIG5ldyBuKCIgIiwgbSwgIiIpLCBuZXcgbigiIiwgaSwgIi4gIiksIG5ldyBuKCIuIiwgaSwgIiIpLCBuZXcgbigiICIsIGksICIsICIpLCBuZXcgbigiIiwgQSwgIiIpLCBuZXcgbigiIiwgaSwgIiB3aXRoICIpLCBuZXcgbigiIiwgaSwgIiciKSwgbmV3IG4oIiIsIGksICIgZnJvbSAiKSwgbmV3IG4oIiIsIGksICIgYnkgIiksIG5ldyBuKCIiLCBVLCAiIiksIG5ldyBuKCIiLCB4LCAiIiksIG5ldyBuKCIgdGhlICIsIGksICIiKSwgbmV3IG4oIiIsIHUsICIiKSwgbmV3IG4oIiIsIGksICIuIFRoZSAiKSwgbmV3IG4oIiIsIGIsICIiKSwgbmV3IG4oIiIsIGksICIgb24gIiksIG5ldyBuKCIiLCBpLCAiIGFzICIpLCBuZXcgbigiIiwgaSwgIiBpcyAiKSwgbmV3IG4oIiIsIGgsICIiKSwgbmV3IG4oIiIsIHMsICJpbmcgIiksIG5ldyBuKCIiLCBpLCAiXG5cdCIpLCBuZXcgbigiIiwgaSwgIjoiKSwgbmV3IG4oIiAiLCBpLCAiLiAiKSwgbmV3IG4oIiIsIGksICJlZCAiKSwgbmV3IG4oIiIsIGssICIiKSwgbmV3IG4oIiIsIEUsICIiKSwgbmV3IG4oIiIsIGMsICIiKSwgbmV3IG4oIiIsIGksICIoIiksIG5ldyBuKCIiLCBtLCAiLCAiKSwgbmV3IG4oIiIsIHAsICIiKSwgbmV3IG4oIiIsIGksICIgYXQgIiksIG5ldyBuKCIiLCBpLCAibHkgIiksIG5ldyBuKCIgdGhlICIsIGksICIgb2YgIiksIG5ldyBuKCIiLCBmLCAiIiksIG5ldyBuKCIiLCB3LCAiIiksIG5ldyBuKCIgIiwgbSwgIiwgIiksIG5ldyBuKCIiLCBtLCAnIicpLCBuZXcgbigiLiIsIGksICIoIiksIG5ldyBuKCIiLCBiLCAiICIpLCBuZXcgbigiIiwgbSwgJyI+JyksIG5ldyBuKCIiLCBpLCAnPSInKSwgbmV3IG4oIiAiLCBpLCAiLiIpLCBuZXcgbigiLmNvbS8iLCBpLCAiIiksIG5ldyBuKCIgdGhlICIsIGksICIgb2YgdGhlICIpLCBuZXcgbigiIiwgbSwgIiciKSwgbmV3IG4oIiIsIGksICIuIFRoaXMgIiksIG5ldyBuKCIiLCBpLCAiLCIpLCBuZXcgbigiLiIsIGksICIgIiksIG5ldyBuKCIiLCBtLCAiKCIpLCBuZXcgbigiIiwgbSwgIi4iKSwgbmV3IG4oIiIsIGksICIgbm90ICIpLCBuZXcgbigiICIsIGksICc9IicpLCBuZXcgbigiIiwgaSwgImVyICIpLCBuZXcgbigiICIsIGIsICIgIiksIG5ldyBuKCIiLCBpLCAiYWwgIiksIG5ldyBuKCIgIiwgYiwgIiIpLCBuZXcgbigiIiwgaSwgIj0nIiksIG5ldyBuKCIiLCBiLCAnIicpLCBuZXcgbigiIiwgbSwgIi4gIiksIG5ldyBuKCIgIiwgaSwgIigiKSwgbmV3IG4oIiIsIGksICJmdWwgIiksIG5ldyBuKCIgIiwgbSwgIi4gIiksIG5ldyBuKCIiLCBpLCAiaXZlICIpLCBuZXcgbigiIiwgaSwgImxlc3MgIiksIG5ldyBuKCIiLCBiLCAiJyIpLCBuZXcgbigiIiwgaSwgImVzdCAiKSwgbmV3IG4oIiAiLCBtLCAiLiIpLCBuZXcgbigiIiwgYiwgJyI+JyksIG5ldyBuKCIgIiwgaSwgIj0nIiksIG5ldyBuKCIiLCBtLCAiLCIpLCBuZXcgbigiIiwgaSwgIml6ZSAiKSwgbmV3IG4oIiIsIGIsICIuIiksIG5ldyBuKCJceGMyXHhhMCIsIGksICIiKSwgbmV3IG4oIiAiLCBpLCAiLCIpLCBuZXcgbigiIiwgbSwgJz0iJyksIG5ldyBuKCIiLCBiLCAnPSInKSwgbmV3IG4oIiIsIGksICJvdXMgIiksIG5ldyBuKCIiLCBiLCAiLCAiKSwgbmV3IG4oIiIsIG0sICI9JyIpLCBuZXcgbigiICIsIG0sICIsIiksIG5ldyBuKCIgIiwgYiwgJz0iJyksIG5ldyBuKCIgIiwgYiwgIiwgIiksIG5ldyBuKCIiLCBiLCAiLCIpLCBuZXcgbigiIiwgYiwgIigiKSwgbmV3IG4oIiIsIGIsICIuICIpLCBuZXcgbigiICIsIGIsICIuIiksIG5ldyBuKCIiLCBiLCAiPSciKSwgbmV3IG4oIiAiLCBiLCAiLiAiKSwgbmV3IG4oIiAiLCBtLCAnPSInKSwgbmV3IG4oIiAiLCBiLCAiPSciKSwgbmV3IG4oIiAiLCBtLCAiPSciKV07CiAgICAgICAgICAgICAgICAgICAgICAgIHIua1RyYW5zZm9ybXMgPSBCLCByLmtOdW1UcmFuc2Zvcm1zID0gQi5sZW5ndGgsIHIudHJhbnNmb3JtRGljdGlvbmFyeVdvcmQgPSBmdW5jdGlvbihlLCB0LCByLCBuLCBpKSB7IHZhciBzLCBkID0gQltpXS5wcmVmaXgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IEJbaV0uc3VmZml4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBCW2ldLnRyYW5zZm9ybSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gdSA8IHkgPyAwIDogdSAtIDExLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSB0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA+IG4gJiYgKGYgPSBuKTsgZm9yICh2YXIgcCA9IDA7IHAgPCBkLmxlbmd0aDspIGVbdCsrXSA9IGRbcCsrXTsgZm9yIChyICs9IGYsIG4gLT0gZiwgdSA8PSB3ICYmIChuIC09IHUpLCBjID0gMDsgYyA8IG47IGMrKykgZVt0KytdID0gYS5kaWN0aW9uYXJ5W3IgKyBjXTsgaWYgKHMgPSB0IC0gbiwgdSA9PT0gbSkgbyhlLCBzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHUgPT09IGIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IG4gPiAwOykgeyB2YXIgZyA9IG8oZSwgcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgKz0gZywgbiAtPSBnIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwgbC5sZW5ndGg7KSBlW3QrK10gPSBsW3YrK107IHJldHVybiB0IC0gaCB9IH0sCiAgICAgICAgICAgICAgICAgICAgIm5vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiOiBmdW5jdGlvbihlLCB0LCByKSB7ICJ1c2Ugc3RyaWN0IjsKCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG4oZSkgeyB2YXIgdCA9IGUubGVuZ3RoOyBpZiAodCAlIDQgPiAwKSB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQiKTsgcmV0dXJuICI9IiA9PT0gZVt0IC0gMl0gPyAyIDogIj0iID09PSBlW3QgLSAxXSA/IDEgOiAwIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG8oZSkgeyByZXR1cm4gMyAqIGUubGVuZ3RoIC8gNCAtIG4oZSkgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYShlKSB7IHZhciB0LCByLCBvLCBhLCBpLCBzLCBkID0gZS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gbihlKSwgcyA9IG5ldyBmKDMgKiBkIC8gNCAtIGkpLCBvID0gaSA+IDAgPyBkIC0gNCA6IGQ7IHZhciBsID0gMDsgZm9yICh0ID0gMCwgciA9IDA7IHQgPCBvOyB0ICs9IDQsIHIgKz0gMykgYSA9IHVbZS5jaGFyQ29kZUF0KHQpXSA8PCAxOCB8IHVbZS5jaGFyQ29kZUF0KHQgKyAxKV0gPDwgMTIgfCB1W2UuY2hhckNvZGVBdCh0ICsgMildIDw8IDYgfCB1W2UuY2hhckNvZGVBdCh0ICsgMyldLCBzW2wrK10gPSBhID4+IDE2ICYgMjU1LCBzW2wrK10gPSBhID4+IDggJiAyNTUsIHNbbCsrXSA9IDI1NSAmIGE7IHJldHVybiAyID09PSBpID8gKGEgPSB1W2UuY2hhckNvZGVBdCh0KV0gPDwgMiB8IHVbZS5jaGFyQ29kZUF0KHQgKyAxKV0gPj4gNCwgc1tsKytdID0gMjU1ICYgYSkgOiAxID09PSBpICYmIChhID0gdVtlLmNoYXJDb2RlQXQodCldIDw8IDEwIHwgdVtlLmNoYXJDb2RlQXQodCArIDEpXSA8PCA0IHwgdVtlLmNoYXJDb2RlQXQodCArIDIpXSA+PiAyLCBzW2wrK10gPSBhID4+IDggJiAyNTUsIHNbbCsrXSA9IDI1NSAmIGEpLCBzIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGkoZSkgeyByZXR1cm4gbFtlID4+IDE4ICYgNjNdICsgbFtlID4+IDEyICYgNjNdICsgbFtlID4+IDYgJiA2M10gKyBsWzYzICYgZV0gfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcyhlLCB0LCByKSB7IGZvciAodmFyIG4sIG8gPSBbXSwgYSA9IHQ7IGEgPCByOyBhICs9IDMpIG4gPSAoZVthXSA8PCAxNikgKyAoZVthICsgMV0gPDwgOCkgKyBlW2EgKyAyXSwgby5wdXNoKGkobikpOyByZXR1cm4gby5qb2luKCIiKSB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkKGUpIHsgZm9yICh2YXIgdCwgciA9IGUubGVuZ3RoLCBuID0gciAlIDMsIG8gPSAiIiwgYSA9IFtdLCBpID0gMTYzODMsIGQgPSAwLCB1ID0gciAtIG47IGQgPCB1OyBkICs9IGkpIGEucHVzaChzKGUsIGQsIGQgKyBpID4gdSA/IHUgOiBkICsgaSkpOyByZXR1cm4gMSA9PT0gbiA/ICh0ID0gZVtyIC0gMV0sIG8gKz0gbFt0ID4+IDJdLCBvICs9IGxbdCA8PCA0ICYgNjNdLCBvICs9ICI9PSIpIDogMiA9PT0gbiAmJiAodCA9IChlW3IgLSAyXSA8PCA4KSArIGVbciAtIDFdLCBvICs9IGxbdCA+PiAxMF0sIG8gKz0gbFt0ID4+IDQgJiA2M10sIG8gKz0gbFt0IDw8IDIgJiA2M10sIG8gKz0gIj0iKSwgYS5wdXNoKG8pLCBhLmpvaW4oIiIpIH0gci5ieXRlTGVuZ3RoID0gbywgci50b0J5dGVBcnJheSA9IGEsIHIuZnJvbUJ5dGVBcnJheSA9IGQ7IGZvciAodmFyIGwgPSBbXSwgdSA9IFtdLCBmID0gInVuZGVmaW5lZCIgIT0gdHlwZW9mIFVpbnQ4QXJyYXkgPyBVaW50OEFycmF5IDogQXJyYXksIGMgPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyIsIGggPSAwLCBwID0gYy5sZW5ndGg7IGggPCBwOyArK2gpIGxbaF0gPSBjW2hdLCB1W2MuY2hhckNvZGVBdChoKV0gPSBoOwogICAgICAgICAgICAgICAgICAgICAgICB1WyItIi5jaGFyQ29kZUF0KDApXSA9IDYyLCB1WyJfIi5jaGFyQ29kZUF0KDApXSA9IDYzIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBmb3IgKHZhciByIGluIHQpIHRbcl0uZm9sZGVyID0gci5zdWJzdHJpbmcoMCwgci5sYXN0SW5kZXhPZigiLyIpICsgMSk7CiAgICAgICAgICAgICAgICB2YXIgbiA9IGZ1bmN0aW9uKGUpIHsgdmFyIHIgPSBbXTsgcmV0dXJuIGUgPSBlLnNwbGl0KCIvIikuZXZlcnkoZnVuY3Rpb24oZSkgeyByZXR1cm4gIi4uIiA9PSBlID8gci5wb3AoKSA6ICIuIiA9PSBlIHx8ICIiID09IGUgfHwgci5wdXNoKGUpIH0pID8gci5qb2luKCIvIikgOiBudWxsLCBlID8gdFtlXSB8fCB0W2UgKyAiLmpzIl0gfHwgdFtlICsgIi9pbmRleC5qcyJdIDogbnVsbCB9LAogICAgICAgICAgICAgICAgICAgIG8gPSBmdW5jdGlvbihlLCB0KSB7IHJldHVybiBlID8gbihlLmZvbGRlciArICJub2RlX21vZHVsZXMvIiArIHQpIHx8IG8oZS5wYXJlbnQsIHQpIDogbnVsbCB9LAogICAgICAgICAgICAgICAgICAgIGEgPSBmdW5jdGlvbihlLCB0KSB7IHZhciByID0gdC5tYXRjaCgvXlwvLykgPyBudWxsIDogZSA/IHQubWF0Y2goL15cLlwuP1wvLykgPyBuKGUuZm9sZGVyICsgdCkgOiBvKGUsIHQpIDogbih0KTsgaWYgKCFyKSB0aHJvdyAibW9kdWxlIG5vdCBmb3VuZDogIiArIHQ7IHJldHVybiByLmV4cG9ydHMgfHwgKHIucGFyZW50ID0gZSwgcihhLmJpbmQobnVsbCwgciksIHIsIHIuZXhwb3J0cyA9IHt9KSksIHIuZXhwb3J0cyB9OwogICAgICAgICAgICAgICAgcmV0dXJuIGEobnVsbCwgZSkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVjb21wcmVzczogZnVuY3Rpb24oZSkgeyB0aGlzLmV4cG9ydHMgfHwgKHRoaXMuZXhwb3J0cyA9IHRoaXMucmVxdWlyZSgiZGVjb21wcmVzcy5qcyIpKTsgdHJ5IHsgcmV0dXJuIHRoaXMuZXhwb3J0cyhlKSB9IGNhdGNoIChlKSB7fSB9LAogICAgICAgICAgICBoYXNVbml0eU1hcmtlcjogZnVuY3Rpb24oZSkgeyB2YXIgdCA9ICJVbml0eVdlYiBDb21wcmVzc2VkIENvbnRlbnQgKGJyb3RsaSkiOyBpZiAoIWUubGVuZ3RoKSByZXR1cm4gITE7IHZhciByID0gMSAmIGVbMF0gPyAxNCAmIGVbMF0gPyA0IDogNyA6IDEsCiAgICAgICAgICAgICAgICAgICAgbiA9IGVbMF0gJiAoMSA8PCByKSAtIDEsCiAgICAgICAgICAgICAgICAgICAgbyA9IDEgKyAoTWF0aC5sb2codC5sZW5ndGggLSAxKSAvIE1hdGgubG9nKDIpID4+IDMpOyBpZiAoY29tbWVudE9mZnNldCA9IHIgKyAxICsgMiArIDEgKyAyICsgKG8gPDwgMykgKyA3ID4+IDMsIDE3ID09IG4gfHwgY29tbWVudE9mZnNldCA+IGUubGVuZ3RoKSByZXR1cm4gITE7IGZvciAodmFyIGEgPSBuICsgKDYgKyAobyA8PCA0KSArICh0Lmxlbmd0aCAtIDEgPDwgNikgPDwgciksIGkgPSAwOyBpIDwgY29tbWVudE9mZnNldDsgaSsrLCBhID4+Pj0gOCkKICAgICAgICAgICAgICAgICAgICBpZiAoZVtpXSAhPSAoMjU1ICYgYSkpIHJldHVybiAhMTsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZS5zdWJhcnJheShjb21tZW50T2Zmc2V0LCBjb21tZW50T2Zmc2V0ICsgdC5sZW5ndGgpKSA9PSB0IH0KICAgICAgICB9LAogICAgICAgIGRlY29tcHJlc3M6IGZ1bmN0aW9uKGUsIHQpIHsgdmFyIHIgPSB0aGlzLmd6aXAuaGFzVW5pdHlNYXJrZXIoZSkgPyB0aGlzLmd6aXAgOiB0aGlzLmJyb3RsaS5oYXNVbml0eU1hcmtlcihlKSA/IHRoaXMuYnJvdGxpIDogdGhpcy5pZGVudGl0eTsgaWYgKHRoaXMuc2VydmVyU2V0dXBXYXJuaW5nRW5hYmxlZCAmJiByICE9IHRoaXMuaWRlbnRpdHkgJiYgKGNvbnNvbGUubG9nKCJZb3UgY2FuIHJlZHVjZSB5b3VyIHN0YXJ0dXAgdGltZSBpZiB5b3UgY29uZmlndXJlIHlvdXIgd2ViIHNlcnZlciB0byBob3N0IC51bml0eXdlYiBmaWxlcyB1c2luZyAiICsgKHIgPT0gdGhpcy5nemlwID8gImd6aXAiIDogImJyb3RsaSIpICsgIiBjb21wcmVzc2lvbi4iKSwgdGhpcy5zZXJ2ZXJTZXR1cFdhcm5pbmdFbmFibGVkID0gITEpLCAiZnVuY3Rpb24iICE9IHR5cGVvZiB0KSByZXR1cm4gci5kZWNvbXByZXNzKGUpOyBpZiAoIXIud29ya2VyKSB7IHZhciBuID0gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbInRoaXMucmVxdWlyZSA9ICIsIHIucmVxdWlyZS50b1N0cmluZygpLCAiOyB0aGlzLmRlY29tcHJlc3MgPSAiLCByLmRlY29tcHJlc3MudG9TdHJpbmcoKSwgIjsgdGhpcy5vbm1lc3NhZ2UgPSAiLCBmdW5jdGlvbihlKSB7IHZhciB0ID0geyBpZDogZS5kYXRhLmlkLCBkZWNvbXByZXNzZWQ6IHRoaXMuZGVjb21wcmVzcyhlLmRhdGEuY29tcHJlc3NlZCkgfTsKICAgICAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh0LCB0LmRlY29tcHJlc3NlZCA/IFt0LmRlY29tcHJlc3NlZC5idWZmZXJdIDogW10pIH0udG9TdHJpbmcoKSwgIjsgcG9zdE1lc3NhZ2UoeyByZWFkeTogdHJ1ZSB9KTsiXSwgeyB0eXBlOiAidGV4dC9qYXZhc2NyaXB0IiB9KSk7CiAgICAgICAgICAgICAgICByLndvcmtlciA9IG5ldyBXb3JrZXIobiksIHIud29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHsgcmV0dXJuIGUuZGF0YS5yZWFkeSA/IHZvaWQgVVJMLnJldm9rZU9iamVjdFVSTChuKSA6ICh0aGlzLmNhbGxiYWNrc1tlLmRhdGEuaWRdKGUuZGF0YS5kZWNvbXByZXNzZWQpLCB2b2lkIGRlbGV0ZSB0aGlzLmNhbGxiYWNrc1tlLmRhdGEuaWRdKSB9LCByLndvcmtlci5jYWxsYmFja3MgPSB7fSwgci53b3JrZXIubmV4dENhbGxiYWNrSWQgPSAwIH0gdmFyIG8gPSByLndvcmtlci5uZXh0Q2FsbGJhY2tJZCsrOwogICAgICAgICAgICByLndvcmtlci5jYWxsYmFja3Nbb10gPSB0LCByLndvcmtlci5wb3N0TWVzc2FnZSh7IGlkOiBvLCBjb21wcmVzc2VkOiBlIH0sIFtlLmJ1ZmZlcl0pIH0sCiAgICAgICAgc2VydmVyU2V0dXBXYXJuaW5nRW5hYmxlZDogITAKICAgIH0KfTsKZQogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0PgogICAgICAgIHZhciBnYW1lSW5zdGFuY2UgPSBVbml0eUxvYWRlci5pbnN0YW50aWF0ZSgiZ2FtZUNvbnRhaW5lciIsICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQnJvd25jaGEwMjMvVmVuZ2VhbmNlL21haW4vb3RoZXIvc2xvcGUvc2xvcGUuanNvbiIsIHsgb25Qcm9ncmVzczogVW5pdHlQcm9ncmVzcywgTW9kdWxlOiB7IG9uUnVudGltZUluaXRpYWxpemVkOiBmdW5jdGlvbigpIHsgVW5pdHlQcm9ncmVzcyhnYW1lSW5zdGFuY2UsICJjb21wbGV0ZSIpIH0gfSB9KTsKICAgIDwvc2NyaXB0Pgo8L2hlYWQ+Cjxib2R5IHN0eWxlPSJtYXJnaW46IDA7IG92ZXJmbG93OiBoaWRkZW47Ij4KICAgIDxkaXYgY2xhc3M9IndlYmdsLWNvbnRlbnQiPgogICAgICAgIDxkaXYgaWQ9ImdhbWVDb250YWluZXIiIHN0eWxlPSJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBtYXJnaW46IDA7Ij48L2Rpdj4KICAgIDwvZGl2Pgo8L2JvZHk+')
document.getElementsByTagName("body")[0].appendChild(mg).focus()
var thestyle = document.createElement("style")
thestyle.innerText += "#mgid {position: fixed; left: 0px; top: 0px; width: 100%; height:100%; background: black; z-index: 9999999999; border: none;}"
thestyle.innerText += "body {overflow: hidden;}"
document.getElementsByTagName("body")[0].appendChild(thestyle)
